[
    {
        "name": "CallSpell",
        "arguments": [],
        "return": {},
        "description": "If the conditions to use a spell card are met, uses a spell card.",
        "notes": "If the player is not permitted to shoot, then this function returns void."
    },
    {
        "name": "LoadPlayerShotData",
        "arguments": [
            {
                "name": "shotsheetpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Loads the shot data image file, allowing usage of the specified shot IDs within the player script.",
        "notes": "If called several times, loads each file in succession as long as the IDs are different.\n\nA file cannot be loaded multiple times in a row."
    },
    {
        "name": "ReloadPlayerShotData",
        "arguments": [
            {
                "name": "shotsheetpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Reloads the shot data image file, allowing usage of the specified shot IDs within the player script.",
        "notes": "A file can be loaded several times with this function.\n\nCan be used without loading through LoadPlayerShotData first."
    },
    {
        "name": "GetSpellManageObject",
        "arguments": [],
        "return": {
            "name": "array of spell manage object IDs",
            "type": "number (Object ID) []"
        },
        "description": "Returns an array of spell card management object IDs.",
        "notes": "At the end of the spell card you need to delete this object with ObjDelete."
    },
    {
        "name": "ObjSpell_Create",
        "arguments": [],
        "return": {
            "name": "object ID of new spell object",
            "type": "number (Object ID)"
        },
        "description": "Creates a spell object and returns its ID.",
        "notes": ""
    },
    {
        "name": "ObjSpell_Regist",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Invokes the spell object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjSpell_SetDamage",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "damage",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the damage of the spell object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjSpell_SetEraseShot",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "eraseshot",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Determines whether the spell object associated with objID can delete enemy bullets.",
        "notes": "Defaults to true."
    },
    {
        "name": "ObjSpell_SetIntersectionCircle",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "radius",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the collision circle of the spell object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjSpell_SetIntersectionLine",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "startxcoord",
                "type": "number"
            },
            {
                "name": "startycoord",
                "type": "number"
            },
            {
                "name": "endxcoord",
                "type": "number"
            },
            {
                "name": "endycoord",
                "type": "number"
            },
            {
                "name": "width",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the collision line of the spell object associated with objID.",
        "notes": ""
    },
    {
        "name": "SetPauseScriptPath",
        "arguments": [
            {
                "name": "scriptpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Defines a script to be executed when the game is paused.",
        "notes": ""
    },
    {
        "name": "SetEndSceneScriptPath",
        "arguments": [
            {
                "name": "scriptpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Defines a script to be executed when the game (Single/Plural/Stage) finishes.",
        "notes": ""
    },
    {
        "name": "SetReplaySaveSceneScriptPath",
        "arguments": [
            {
                "name": "scriptpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Defines a script to be executed when the player chooses to save a replay of the game.",
        "notes": ""
    },
    {
        "name": "GetTransitionRenderTargetName",
        "arguments": [],
        "return": {
            "name": "transition render target",
            "type": "string (path)"
        },
        "description": "Gets the name of the render target from the frame before a menu script was executed.",
        "notes": "Specifically to be used by menu scripts such as the pause script.\n\nThis can be used to create a texture of the previous frame just before the game is paused.\n\nThis allows for effects to be applied such as fading to a blur.\n\nExample: `let target = GetTransitionRenderTargetName(); ObjPrim_SetTexture(obj, target);`"
    },
    {
        "name": "SetShotDeleteEventEnable",
        "arguments": [
            {
                "name": "eventtype",
                "type": "const"
            },
            {
                "name": "register",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether the bullet deletion event is allowed to occur.",
        "notes": "Event types are:\n\nEV_DELETE_SHOT_IMMEDIATE (event will delete the shot immediately)\n\nEV_DELETE_SHOT_FADE (event will fade out the shot)\n\nDefault is false for both event types."
    },
    {
        "name": "ClosePackage",
        "arguments": [],
        "return": {},
        "description": "Ends the package script.",
        "notes": ""
    },
    {
        "name": "InitializeStageScene",
        "arguments": [],
        "return": {},
        "description": "Performs the initial processing for the stage script.",
        "notes": "Called only once before the start of a stage script."
    },
    {
        "name": "FinalizeStageScene",
        "arguments": [],
        "return": {},
        "description": "Terminates processing of the stage script.",
        "notes": "Called only once at the end of a stage script.\n\nDefines the end point of replays.\n\nThrows an error if the stage script is not yet closed."
    },
    {
        "name": "StartStageScene",
        "arguments": [],
        "return": {},
        "description": "Starts the stage script.",
        "notes": ""
    },
    {
        "name": "SetStageIndex",
        "arguments": [
            {
                "name": "stageindex",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Defines the index of the stage to be started next.",
        "notes": "The value does not need to be sequential.\n\nSpecifying an already specified index results in an error."
    },
    {
        "name": "SetStageMainScript",
        "arguments": [
            {
                "name": "scriptpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Defines the stage script to be started next.",
        "notes": ""
    },
    {
        "name": "SetStagePlayerScript",
        "arguments": [
            {
                "name": "scriptpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Defines the player script to be used in the stage.",
        "notes": "This player must have been declared in the #Player header of the package.\n\nIf #Player is empty, you can specify all players under /script/player/folder."
    },
    {
        "name": "SetStageReplayFile",
        "arguments": [
            {
                "name": "scriptpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Runs the stage script once with the replay replaying all virtual key presses (including player shots, movement, etc).",
        "notes": "Can only be called after InitializeStageScene.\n\nSince the replay file holds information for each stage, in a multi-stage replay, you can begin playback from a middle stage without having to start from the first stage."
    },
    {
        "name": "GetStageSceneState",
        "arguments": [
            {
                "name": "infotype",
                "type": "const"
            }
        ],
        "return": {
            "name": "results of query",
            "type": "bool"
        },
        "description": "Returns status information about the currently running stage script.",
        "notes": "Only available infotype is STAGE_STATE_FINISHED (returns true if the stage is finished)."
    },
    {
        "name": "GetStageSceneResult",
        "arguments": [],
        "return": {
            "name": "reason why stage finished",
            "type": "const"
        },
        "description": "Returns the reason why the stage script finished.",
        "notes": "Available return values are:\n\nSTAGE_RESULT_CLEARED (stage was cleared)\n\nSTAGE_RESULT_PLAYER_DOWN (player ran out of lives)\n\nSTAGE_RESULT_BREAK_OFF (stage ended prematurely; was terminated by player)"
    },
    {
        "name": "PauseStageScene",
        "arguments": [
            {
                "name": "pause",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Pauses or resumes the stage script.",
        "notes": ""
    },
    {
        "name": "TerminateStageScene",
        "arguments": [],
        "return": {},
        "description": "Exits out of the currently running stage script.",
        "notes": ""
    },
    {
        "name": "GetLoadFreePlayerScriptList",
        "arguments": [],
        "return": {
            "name": "list of available player scripts",
            "type": "string (path) []"
        },
        "description": "Returns a list of the player scripts available in the /script/player/ folder.",
        "notes": ""
    },
    {
        "name": "GetFreePlayerScriptCount",
        "arguments": [],
        "return": {
            "name": "number of player scripts available",
            "type": "number (int)"
        },
        "description": "Returns the number of player scripts available in the /script/player/ folder.",
        "notes": ""
    },
    {
        "name": "GetFreePlayerScriptInfo",
        "arguments": [
            {
                "name": "playerscriptindex",
                "type": "number (int)"
            },
            {
                "name": "infotype",
                "type": "const"
            }
        ],
        "return": {
            "name": "results of query",
            "type": "string"
        },
        "description": "Returns various information from the header of the player script with the given index.",
        "notes": "Available infotypes are\n\nINFO_SCRIPT_PATH (player script path)\n\nINFO_SCRIPT_ID (player script's #ID)\n\nINFO_SCRIPT_TITLE (player script's #Title)\n\nINFO_SCRIPT_TEXT (player script's #Text)\n\nINFO_SCRIPT_IMAGE (player script's #Image)\n\nINFO_SCRIPT_REPLAY_NAME (player script's #ReplayName)"
    },
    {
        "name": "LoadReplayList",
        "arguments": [],
        "return": {},
        "description": "Loads the list of the available replays for the current script.",
        "notes": ""
    },
    {
        "name": "GetValidReplayIndices",
        "arguments": [],
        "return": {
            "name": "list of indices for current script's available replays",
            "type": "number (int) []"
        },
        "description": "Loads a list of indices for the current script's available replays.",
        "notes": ""
    },
    {
        "name": "IsValidReplayIndex",
        "arguments": [
            {
                "name": "replayindex",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "true if valid replay index; false otherwise",
            "type": "bool"
        },
        "description": "Returns true or false depending on the index chosen is valid to be used in GetReplayInfo.",
        "notes": ""
    },
    {
        "name": "GetReplayInfo",
        "arguments": [
            {
                "name": "replayindex",
                "type": "number (int)"
            },
            {
                "name": "infotype",
                "type": "const"
            }
        ],
        "return": {
            "name": "results of query",
            "type": "varies"
        },
        "description": "Returns various information about the replay with the given index.",
        "notes": "Available infotypes are\n\nREPLAY_FILE_PATH (replay file path)\n\nREPLAY_DATE_TIME (date and time at which the replay was saved)\n\nREPLAY_USER_NAME (player's name)\n\nREPLAY_TOTAL_SCORE (final score)\n\nREPLAY_FPS_AVERAGE (average framerate)\n\nREPLAY_PLAYER_NAME (player script name)\n\nREPLAY_STAGE_INDEX_LIST (list of stage indices that the replay used)\n\nREPLAY_STAGE_START_SCORE_LIST (List of score indices at the start of each stage (the order of the stage indices is from REPLAY_STAGE_INDEX_LIST))\n\nREPLAY_STAGE_LAST_SCORE_LIST (List of score indices at the end of each stage (the order of the stage indices is from REPLAY_STAGE_INDEX_LIST))\n\nREPLAY_COMMENT (comment set arbitrarily using SetReplayInfo)"
    },
    {
        "name": "SetReplayInfo",
        "arguments": [
            {
                "name": "infotype",
                "type": "const"
            },
            {
                "name": "data",
                "type": "free"
            }
        ],
        "return": {},
        "description": "Sets replay information",
        "notes": "Only possible infotype is REPLAY_COMMENT, which takes a string.\n\nIt is recommended to use delimited strings to save information that can be retrieved with SplitString."
    },
    {
        "name": "SaveReplay",
        "arguments": [
            {
                "name": "replayfileindex",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Saves a replay to the specified replay index.",
        "notes": ""
    },
    {
        "name": "add",
        "arguments": [
            {
                "name": "value1",
                "type": "number"
            },
            {
                "name": "value2",
                "type": "number"
            }
        ],
        "return": {
            "name": "sum of value1 and value2",
            "type": "number"
        },
        "description": "Adds the two values and returns the sum.",
        "notes": "Long form for value1 + value2.\n\nIf using add()/+ operator with strings, the result is incompatible with ordinary strings and requires ToString() to be called on it in order to be used with regular strings."
    },
    {
        "name": "subtract",
        "arguments": [
            {
                "name": "value1",
                "type": "number"
            },
            {
                "name": "value2",
                "type": "number"
            }
        ],
        "return": {
            "name": "difference of value1 and value2",
            "type": "number"
        },
        "description": "Subtracts the two values and returns the difference.",
        "notes": "value1 - value2.\n\nIf using subtract()/- operator with strings, the result is incompatible with ordinary strings and requires ToString() to be called on it in order to be used with regular strings."
    },
    {
        "name": "multiply",
        "arguments": [
            {
                "name": "value1",
                "type": "number"
            },
            {
                "name": "value2",
                "type": "number"
            }
        ],
        "return": {
            "name": "product of value1 and value2",
            "type": "number"
        },
        "description": "Multiplies the two values and returns the product.",
        "notes": "Long form for value1 * value2"
    },
    {
        "name": "divide",
        "arguments": [
            {
                "name": "value1",
                "type": "number"
            },
            {
                "name": "value2",
                "type": "number"
            }
        ],
        "return": {
            "name": "quotient of value1 and value2",
            "type": "number"
        },
        "description": "Divides the two values and returns the quotient (as a decimal).",
        "notes": "Long form for value1 / value2"
    },
    {
        "name": "remainder",
        "arguments": [
            {
                "name": "dividend",
                "type": "number"
            },
            {
                "name": "divisor",
                "type": "number"
            }
        ],
        "return": {
            "name": "modulo (remainder of a quotient) of two values",
            "type": "number"
        },
        "description": "Divides the two values and returns the remainder.",
        "notes": "Long form for dividend % divisor.\n\nRemainder or % will always return a value with the same sign as the divisor.\n\nFor example, -7 % 4 equals 1 and 7 % -4 equals -1."
    },
    {
        "name": "power",
        "arguments": [
            {
                "name": "base",
                "type": "number"
            },
            {
                "name": "exponent",
                "type": "number"
            }
        ],
        "return": {
            "name": "base raised to the power of the exponent",
            "type": "number"
        },
        "description": "Raises the base to the power of the exponent and returns the result.",
        "notes": "Long form for base ^ exponent"
    },
    {
        "name": "min",
        "arguments": [
            {
                "name": "value1",
                "type": "number"
            },
            {
                "name": "value2",
                "type": "number"
            }
        ],
        "return": {
            "name": "lesser of value1 and value2",
            "type": "number"
        },
        "description": "Returns the lesser of value1 and value2.",
        "notes": ""
    },
    {
        "name": "max",
        "arguments": [
            {
                "name": "value1",
                "type": "number"
            },
            {
                "name": "value2",
                "type": "number"
            }
        ],
        "return": {
            "name": "greater of value1 and value2",
            "type": "number"
        },
        "description": "Returns the greater of value1 and value2.",
        "notes": ""
    },
    {
        "name": "log",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "natural log (base e) of value",
            "type": "number"
        },
        "description": "Returns the natural log of the value.",
        "notes": ""
    },
    {
        "name": "log10",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "common log (base 10) of value",
            "type": "number"
        },
        "description": "Returns the common log of the value.",
        "notes": ""
    },
    {
        "name": "cos",
        "arguments": [
            {
                "name": "angle",
                "type": "number (degrees)"
            }
        ],
        "return": {
            "name": "cosine of angle",
            "type": "number"
        },
        "description": "Returns the cosine of the angle (in degrees).",
        "notes": "Cosine is a value between -1 and 1 that corresponds to the x-value in a coordinate plane."
    },
    {
        "name": "sin",
        "arguments": [
            {
                "name": "angle",
                "type": "number (degrees)"
            }
        ],
        "return": {
            "name": "sine of angle",
            "type": "number"
        },
        "description": "Returns the sine of the angle (in degrees).",
        "notes": "Sine is a value between -1 and 1 that corresponds to the y-value in a coordinate plane."
    },
    {
        "name": "tan",
        "arguments": [
            {
                "name": "angle",
                "type": "number (degrees)"
            }
        ],
        "return": {
            "name": "tangent of angle",
            "type": "number"
        },
        "description": "Returns the tangent of the angle (in degrees).",
        "notes": "Tangent is the slope of the line created by the angle (x/y)."
    },
    {
        "name": "acos",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "arccosine of value",
            "type": "number"
        },
        "description": "Returns the arccosine of the value.",
        "notes": "Argument must be in range [-1, 1].\n\nacos(cos(x)) = x, if x is between 0 and 180."
    },
    {
        "name": "asin",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "arcsine of value",
            "type": "number"
        },
        "description": "Returns the arcsine of the value.",
        "notes": "Argument must be in range [-1, 1].\n\nasin(sin(x)) = x, if x is between -90 and 90."
    },
    {
        "name": "atan",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "arctangent of value",
            "type": "number"
        },
        "description": "Returns the arctangent of the value.",
        "notes": "atan(tan(x)) = x, if x is between -90 and 90."
    },
    {
        "name": "atan2",
        "arguments": [
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "xcoord",
                "type": "number"
            }
        ],
        "return": {
            "name": "arctangent of y/x, which is the angle from (0, 0) to (x, y)",
            "type": "number"
        },
        "description": "Returns the arctangent of y/x.",
        "notes": "The angle will be in the range -180 < a <= 180, where a is the returned value.\n\nUseful for getting the angle from one point to another point.\n\nFor example, the angle from the boss to the player is atan2(player y - boss y, player x - boss x)."
    },
    {
        "name": "rand",
        "arguments": [
            {
                "name": "min",
                "type": "number"
            },
            {
                "name": "max",
                "type": "number"
            }
        ],
        "return": {
            "name": "random floating point value in range (min, max)",
            "type": "number"
        },
        "description": "Returns a random floating point between min and max.",
        "notes": "This function has an extremely low chance of returning the actual min and max as-is."
    },
    {
        "name": "round",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "value as an integer",
            "type": "number (int)"
        },
        "description": "Rounds the value up or down to the nearest integer using standard conventions and returns the new value.",
        "notes": "Values of 0.5 or greater are rounded up; otherwise they are rounded down."
    },
    {
        "name": "truncate",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "value with decimal component removed",
            "type": "number (int)"
        },
        "description": "Returns the value with the decimal component truncated.",
        "notes": "Example: truncate(1.123) -> 1\n\nThe shortened name trunc can also be used to refer to this function."
    },
    {
        "name": "ceil",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "value rounded up to next integer",
            "type": "number (int)"
        },
        "description": "Returns the value rounded up to the next integer.",
        "notes": ""
    },
    {
        "name": "floor",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "value rounded down to next integer",
            "type": "number (int)"
        },
        "description": "Returns the value rounded down to the previous integer.",
        "notes": ""
    },
    {
        "name": "absolute",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "absolute value of value",
            "type": "number"
        },
        "description": "Returns the absolute value of the value (IE makes negative values positive).",
        "notes": ""
    },
    {
        "name": "modc",
        "arguments": [
            {
                "name": "value1",
                "type": "number"
            },
            {
                "name": "value2",
                "type": "number"
            }
        ],
        "return": {
            "name": "modulus of value1",
            "type": "number"
        },
        "description": "Returns the modulus of value1 with respect to value2.",
        "notes": "Unlike remainder, modc returns a value with the same sign as the dividend.\n\nExample: modc(-7, 4) equals -3 and modc(7, -4) equals 3."
    },
    {
        "name": "pi",
        "arguments": [],
        "return": {
            "name": "value of pi",
            "type": "number"
        },
        "description": "Returns the constant pi.",
        "notes": ""
    },
    {
        "name": "successor",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "value + 1",
            "type": "number"
        },
        "description": "Adds 1 to the value, then returns it.",
        "notes": "value++"
    },
    {
        "name": "predecessor",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "value - 1",
            "type": "number"
        },
        "description": "Subtracts 1 from the value, then returns it.",
        "notes": "Long form for value--"
    },
    {
        "name": "negative",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "value * -1",
            "type": "number"
        },
        "description": "Multiplies -1 to the value, then returns it.",
        "notes": "Long form for -value"
    },
    {
        "name": "InstallFont",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "true if loading succeeded, false otherwise",
            "type": "bool"
        },
        "description": "Loads the given font specified with the file path and returns true on success, false otherwise.",
        "notes": "This function can be used with ObjText_SetFontType, allowing for usage of fonts that are not installed on the player's computer."
    },
    {
        "name": "ToString",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "value as a string",
            "type": "string"
        },
        "description": "Returns the value as a string.",
        "notes": "Example: ToString(1) -> '1.000000'\n\nExample: ToString('Cat' ~ ToString(1.5)) -> 'Cat1.500000'"
    },
    {
        "name": "IntToString",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "value as a string",
            "type": "string"
        },
        "description": "Returns the value as a string.",
        "notes": "Omits any decimal places if a floating point value is provided.\n\nExample: IntToString(1) -> '1'"
    },
    {
        "name": "itoa",
        "arguments": [
            {
                "name": "value",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "value as an array",
            "type": "string"
        },
        "description": "Converts an integer value to an string form and returns the string, but leaves out decimal places.",
        "notes": "Example: rtoa(12.34) -> ['1', '2']\n\nThis function might behave identically to IntToString."
    },
    {
        "name": "rtoa",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "value as an array",
            "type": "string"
        },
        "description": "Converts any real number to an string form and returns the string.",
        "notes": "Example: rtoa(12.34) -> ['1', '2', '.', '3', '4']"
    },
    {
        "name": "rtos",
        "arguments": [
            {
                "name": "format",
                "type": "string"
            },
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "value as a string, with filtering options",
            "type": "string"
        },
        "description": "Converts the value to a string form with the provided filtering options and then returns the string.",
        "notes": "The format is presented as a string that determines how many digits will be shown.\n\nIt can contain any combination of the following three characters: 0, ., #.\n\n0 is a slot for a digit.\n\n. represents the decimal place in the string.\n\n# creates a space in the string.\n\nExample: rtos('000.000', 1.23) = '001.230', and rtos('#00', 1.23) = ' 01'."
    },
    {
        "name": "vtos",
        "arguments": [
            {
                "name": "format",
                "type": "string"
            },
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "value as a string, with filtering options",
            "type": "string"
        },
        "description": "Converts the value to a string form with the provided formatting options and then returns the string.",
        "notes": "The format is presented as a string.\n\nFormat String: First, the number of digits on each side of the decimal are specified (000.00 is 3.2 in the format string).\n\nUnused digits will be filled with spaces.\n\nIf preceded by a '-', the digits will be right-justified, adding blank spaces to the right instead of the left.\n\nIf preceded by a '0', all digits not occupied by the value will be filled by zeroes.\n\nIf ended with a 'd', the value will be presented as an integer.\n\nIf ended with an 'f', the value will be presented as a real/floating point number.\n\nIf ended with an 's', this indicates the value given was in the form of a string.\n\nExample: vtos('03d', 1.23) = '001', vtos('3d', 1.23) = '　1', vtos('-3d', 1.23) = '1　', and vtos('03.5f', 1.23) = '001.23000'."
    },
    {
        "name": "atoi",
        "arguments": [
            {
                "name": "value",
                "type": "string"
            }
        ],
        "return": {
            "name": "value as an integer",
            "type": "number (int)"
        },
        "description": "Parses the string to an integer, truncating decimal components, and returns the integer.",
        "notes": "If the string does not represent a valid number, then 0 will be returned.\n\nOnly works within limits of an int32 - for arbitrarily large numbers, use ator()"
    },
    {
        "name": "ator",
        "arguments": [
            {
                "name": "value",
                "type": "string"
            }
        ],
        "return": {
            "name": "value as an real/floating point",
            "type": "number (float)"
        },
        "description": "Parses the string to a floating point number, and returns the number.",
        "notes": "If the string does not represent a valid number, then 0 will be returned."
    },
    {
        "name": "TrimString",
        "arguments": [
            {
                "name": "value",
                "type": "string"
            }
        ],
        "return": {
            "name": "value without preceding and trailing whitespace",
            "type": "string"
        },
        "description": "Returns the string without preceding and trailing whitespace.",
        "notes": "Example: TrimString(' ABC ') will return 'ABC'."
    },
    {
        "name": "SplitString",
        "arguments": [
            {
                "name": "value",
                "type": "string"
            },
            {
                "name": "delimiter",
                "type": "string"
            }
        ],
        "return": {
            "name": "Array consisting of value split by delimiter",
            "type": "string []"
        },
        "description": "Splits the string via the delimiter and returns the array of delimited substrings.",
        "notes": "Example: SplitString('A/123/BCD', '/') will return ['A', '123', 'BCD']."
    },
    {
        "name": "GetFileDirectory",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "directory of the specified file path",
            "type": "string (path)"
        },
        "description": "Returns the input string up to the rightmost forward slash, with backslashes removed.",
        "notes": ""
    },
    {
        "name": "GetFilePathList",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "array of files in the directory of the specified file/directory path",
            "type": "string (path) []"
        },
        "description": "Returns an array of files in the directory of the specified file/directory path.",
        "notes": ""
    },
    {
        "name": "GetDirectoryList",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "array of the directories available within the directory of the specified path",
            "type": "string (path) []"
        },
        "description": "Returns an array of the directories available within the directory of the specified path.",
        "notes": ""
    },
    {
        "name": "GetModuleDirectory",
        "arguments": [],
        "return": {
            "name": "the directory containing the running th_dnh.exe file",
            "type": "string (path)"
        },
        "description": "Returns the directory containing the running th_dnh.exe file.",
        "notes": ""
    },
    {
        "name": "GetMainStgScriptPath",
        "arguments": [],
        "return": {
            "name": "the path to the current running stage script",
            "type": "string (path)"
        },
        "description": "Returns the path to the current running stage script.",
        "notes": ""
    },
    {
        "name": "GetMainPackageScriptPath",
        "arguments": [],
        "return": {
            "name": "the path to the current running package script",
            "type": "string (path)"
        },
        "description": "Returns the path to the current running package script.",
        "notes": ""
    },
    {
        "name": "GetMainStgScriptDirectory",
        "arguments": [],
        "return": {
            "name": "the directory of the current running stage script",
            "type": "string (path)"
        },
        "description": "Returns the directory of the current running stage script.",
        "notes": ""
    },
    {
        "name": "GetCurrentScriptDirectory",
        "arguments": [],
        "return": {
            "name": "the directory of the current running script",
            "type": "string (path)"
        },
        "description": "Returns the directory of the current running script (the file in which this function was called).",
        "notes": ""
    },
    {
        "name": "GetScriptPathList",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            },
            {
                "name": "scripttype",
                "type": "number (const)"
            }
        ],
        "return": {
            "name": "array of paths to available scripts of the specified type within the directory of the specified path",
            "type": "string (path) []"
        },
        "description": "Returns an array of paths to available (selectable at selection screen) scripts of the specified type within the directory of the specified path.",
        "notes": "Script type is TYPE_SCRIPT_* where * is one of the following: ALL, PLAYER, SINGLE, PLURAL, STAGE, or PACKAGE."
    },
    {
        "name": "GetCurrentDateTimeS",
        "arguments": [],
        "return": {
            "name": "string containing the current date and time",
            "type": "string (date)"
        },
        "description": "Returns a string containing the current date and time.",
        "notes": "Example: If the current date is 2012/09/16 12:34:56, then '20120916123456' will be returned.\n\nTo convert to a number use atoi like so: `let year = atoi(GetCurrentDateTimeS()[0..4]);`"
    },
    {
        "name": "GetStageTime",
        "arguments": [],
        "return": {
            "name": "amount of time that has elapsed since the start of the main script in milliseconds",
            "type": "number (int)"
        },
        "description": "Returns the amount of time that has elapsed since the start of the main script in milliseconds.",
        "notes": ""
    },
    {
        "name": "GetPackageTime",
        "arguments": [],
        "return": {
            "name": "amount of time that has elapsed since the start of the main package in milliseconds",
            "type": "number (int)"
        },
        "description": "Returns the amount of time that has elapsed since the start of the main package in milliseconds",
        "notes": ""
    },
    {
        "name": "GetCurrentFps",
        "arguments": [],
        "return": {
            "name": "current FPS",
            "type": "number (float)"
        },
        "description": "Returns the current FPS.",
        "notes": ""
    },
    {
        "name": "GetReplayFps",
        "arguments": [],
        "return": {
            "name": "replay FPS at the current time point",
            "type": "number (int)"
        },
        "description": "Returns the replay FPS at the current time point.",
        "notes": "This value refreshes as a much slower rate than GetCurrentFps."
    },
    {
        "name": "RaiseError",
        "arguments": [
            {
                "name": "err",
                "type": "string"
            }
        ],
        "return": {},
        "description": "Creates an error box with the specified err string.",
        "notes": "Execution of the script is stopped, closing the script."
    },
    {
        "name": "assert",
        "arguments": [
            {
                "name": "condition",
                "type": "bool"
            },
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {},
        "description": "Raises an error with the specified value and terminates the script if the condition is false.",
        "notes": ""
    },
    {
        "name": "SetCommonData",
        "arguments": [
            {
                "name": "key",
                "type": "string"
            },
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {},
        "description": "Maps the given key to the given value in common data.",
        "notes": "Uses the default common data area.\n\nThe value can be returned by using GetCommonData with the corresponding key."
    },
    {
        "name": "GetCommonData",
        "arguments": [
            {
                "name": "key",
                "type": "string"
            },
            {
                "name": "defaultvalue",
                "type": "free"
            }
        ],
        "return": {
            "name": "the value associated with the given key in the default common data area, or defaultvalue if no mapping exists",
            "type": "free"
        },
        "description": "Returns the value associated with the given key in the default common data area, or defaultvalue if no mapping exists.",
        "notes": ""
    },
    {
        "name": "ClearCommonData",
        "arguments": [],
        "return": {},
        "description": "Removes all of the common data in the default common data area.",
        "notes": ""
    },
    {
        "name": "DeleteCommonData",
        "arguments": [
            {
                "name": "key",
                "type": "string"
            }
        ],
        "return": {},
        "description": "Removes the common data mapping with the specified key from the default common data area.",
        "notes": ""
    },
    {
        "name": "SetAreaCommonData",
        "arguments": [
            {
                "name": "area",
                "type": "string"
            },
            {
                "name": "key",
                "type": "string"
            },
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {},
        "description": "Maps the given key to the given value in common data.",
        "notes": "Uses the specified common data area.\n\nThe value can be returned by using GetAreaCommonData with the corresponding area key."
    },
    {
        "name": "ClearAreaCommonData",
        "arguments": [
            {
                "name": "area",
                "type": "string"
            }
        ],
        "return": {},
        "description": "Removes all of the common data in the specified common data area.",
        "notes": ""
    },
    {
        "name": "DeleteAreaCommonData",
        "arguments": [
            {
                "name": "area",
                "type": "string"
            },
            {
                "name": "key",
                "type": "string"
            }
        ],
        "return": {},
        "description": "Removes the common data mapping with the specified key from the specified common data area.",
        "notes": ""
    },
    {
        "name": "CreateCommonDataArea",
        "arguments": [
            {
                "name": "area",
                "type": "string"
            }
        ],
        "return": {},
        "description": "Creates a common data area with the provided area name, in which various common data can be stored.",
        "notes": ""
    },
    {
        "name": "IsCommonDataAreaExists",
        "arguments": [
            {
                "name": "area",
                "type": "string"
            }
        ],
        "return": {
            "name": "true if the area name corresponds to an existing common data area; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the area name corresponds to an existing common data area; false otherwise",
        "notes": ""
    },
    {
        "name": "CopyCommonDataArea",
        "arguments": [
            {
                "name": "destarea",
                "type": "string"
            },
            {
                "name": "sourcearea",
                "type": "string"
            }
        ],
        "return": {},
        "description": "Copies the common data in the source area to the destination area.",
        "notes": "If the source common data area is invalid, nothing will happen."
    },
    {
        "name": "GetCommonDataAreaKeyList",
        "arguments": [],
        "return": {
            "name": "array of all common data area names",
            "type": "string []"
        },
        "description": "Returns an array of all common data area names.",
        "notes": ""
    },
    {
        "name": "GetCommonDataValueKeyList",
        "arguments": [
            {
                "name": "area",
                "type": "string"
            }
        ],
        "return": {
            "name": "array of the keys in the specified common data area",
            "type": "string []"
        },
        "description": "Returns an array of the keys in the specified common data area",
        "notes": ""
    },
    {
        "name": "SaveCommonDataAreaA1",
        "arguments": [
            {
                "name": "area",
                "type": "string"
            }
        ],
        "return": {
            "name": "true if successful; false otherwise",
            "type": "bool"
        },
        "description": "Saves everything in the specified common data area to a data file.",
        "notes": ""
    },
    {
        "name": "LoadCommonDataAreaA1",
        "arguments": [
            {
                "name": "area",
                "type": "string"
            }
        ],
        "return": {
            "name": "true if successful; false otherwise",
            "type": "bool"
        },
        "description": "Loads everything in the specified common data area from the saved data file.",
        "notes": ""
    },
    {
        "name": "SaveCommonDataAreaA2",
        "arguments": [
            {
                "name": "area",
                "type": "string"
            },
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "true if successful; false otherwise",
            "type": "bool"
        },
        "description": "Saves everything in the specified common data area to a data file at the specified path.",
        "notes": ""
    },
    {
        "name": "LoadCommonDataAreaA2",
        "arguments": [
            {
                "name": "area",
                "type": "string"
            },
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "true if successful; false otherwise",
            "type": "bool"
        },
        "description": "Loads everything in the specified common data area from the saved data file at the specified path.",
        "notes": ""
    },
    {
        "name": "SaveCommonDataAreaToReplayFile",
        "arguments": [
            {
                "name": "area",
                "type": "string"
            }
        ],
        "return": {
            "name": "true if successful; false otherwise",
            "type": "bool"
        },
        "description": "Saves the specified common data area to the replay file.",
        "notes": "Do not call this function during a replay."
    },
    {
        "name": "LoadCommonDataAreaFromReplayFile",
        "arguments": [
            {
                "name": "area",
                "type": "string"
            }
        ],
        "return": {
            "name": "true if successful; false otherwise",
            "type": "bool"
        },
        "description": "Loads everything in the specified common data area from the replay file.",
        "notes": "An error will occur if this function is executed in a mode other than replay."
    },
    {
        "name": "LoadSound",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Loads specified sound file.",
        "notes": "Required before using PlayBGM or PlaySE in the same script as these two functions are called on the respective paths."
    },
    {
        "name": "RemoveSound",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Unloads specified sound file.",
        "notes": ""
    },
    {
        "name": "PlayBGM",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            },
            {
                "name": "loopstart",
                "type": "number (seconds)"
            },
            {
                "name": "loopend",
                "type": "number (seconds)"
            }
        ],
        "return": {},
        "description": "Plays the specified sound file as a looping BGM.",
        "notes": "You can be more precise by using decimals.\n\nBGM will play from start until end of track or loopend, whichever is first, and then play from loopstart."
    },
    {
        "name": "PlaySE",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Plays the specified sound file as a sound effect.",
        "notes": ""
    },
    {
        "name": "StopSound",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Stops playing of specified sound file.",
        "notes": ""
    },
    {
        "name": "GetVirtualKeyState",
        "arguments": [
            {
                "name": "vkname",
                "type": "string"
            }
        ],
        "return": {
            "name": "key state of specified virtual key",
            "type": "number (const)"
        },
        "description": "Returns the key state of the specified virtual key.",
        "notes": ""
    },
    {
        "name": "SetVirtualKeyState",
        "arguments": [
            {
                "name": "vkname",
                "type": "string"
            },
            {
                "name": "state",
                "type": "number (const)"
            }
        ],
        "return": {},
        "description": "Sets the given virtual key to the given state.",
        "notes": "The virtual key will be restored to its true state a frame after you stop calling this function.\n\nKeep in mind that if you set it to KEY_HOLD it will not go to KEY_PULL or KEY_PUSH."
    },
    {
        "name": "AddVirtualKey",
        "arguments": [
            {
                "name": "vkname",
                "type": "string"
            },
            {
                "name": "keyname",
                "type": "number (const)"
            },
            {
                "name": "padkey",
                "type": "number (const)"
            }
        ],
        "return": {},
        "description": "Registers the given virtual key with the given key.",
        "notes": "You may map any number of virtual keys to a single key, but virtual keys may only be mapped to a single key.\n\nUse KEY_INVALID if you do not want pad input.\n\nNote that this function OVERWRITES any existing mappings.\n\nIE: If you were to use `AddVirtualKey(VK_SHOT, KEY_UP, KEY_INVALID);`, whenever you press the up arrow key, the virtual shot key will be pressed.\n\nHowever, you will no longer be able to move up, so to fix this, you add AddVirtualKey(VK_UP, KEY_UP, KEY_INVALID);. You will now shoot and move up at the same time."
    },
    {
        "name": "AddReplayTargetVirtualKey",
        "arguments": [
            {
                "name": "vkname",
                "type": "string"
            }
        ],
        "return": {},
        "description": "Registers the given key id to the replay file.",
        "notes": "This key id should be one that you have already registered with AddVirtualKey."
    },
    {
        "name": "GetKeyState",
        "arguments": [
            {
                "name": "keyname",
                "type": "number (const)"
            }
        ],
        "return": {
            "name": "key state of specified key",
            "type": "number (const)"
        },
        "description": "Returns the key state of the specified key.",
        "notes": ""
    },
    {
        "name": "GetMouseState",
        "arguments": [
            {
                "name": "mousebutton",
                "type": "number (const)"
            }
        ],
        "return": {
            "name": "state of specified mouse button",
            "type": "number (const)"
        },
        "description": "Returns the state of the specified mouse button.",
        "notes": "Use MOUSE_LEFT, MOUSE_RIGHT, and MOUSE_MIDDLE for the argument."
    },
    {
        "name": "GetMouseX",
        "arguments": [],
        "return": {
            "name": "mouse x position",
            "type": "number"
        },
        "description": "Returns the current mouse x position.",
        "notes": "The origin for the mouse coordinates is the upper left of the Danmakufu window (0, 0).\n\nMouse coordinates will be properly adjusted according to the resizing of Danmakufu's window."
    },
    {
        "name": "GetMouseY",
        "arguments": [],
        "return": {
            "name": "mouse y position",
            "type": "number"
        },
        "description": "Returns the current mouse y position.",
        "notes": "The origin for the mouse coordinates is the upper left of the Danmakufu window (0, 0).\n\nMouse coordinates will be properly adjusted according to the resizing of Danmakufu's window."
    },
    {
        "name": "GetMouseMoveZ",
        "arguments": [],
        "return": {
            "name": "amount of change that has occurred to the mouse's Z axis",
            "type": "number"
        },
        "description": "Returns the amount of change that has occurred to the mouse's Z axis.",
        "notes": "The Z axis is normally the middle mouse wheel. If there is no mouse wheel, the value will be 0.\n\nThe value returned will be negative if the wheel was moved back, and positive if the wheel moved forward."
    },
    {
        "name": "SetSkipModeKey",
        "arguments": [
            {
                "name": "keyname",
                "type": "number (const)"
            }
        ],
        "return": {},
        "description": "Specifies the key to use for fast playback mode.",
        "notes": "The default key is KEY_LCONTROL.\n\nSpecify KEY_INVALID if you do not wish to enable fast playback."
    },
    {
        "name": "LoadTexture",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Loads specified image file to Danmakufu as a texture.",
        "notes": ""
    },
    {
        "name": "LoadTextureInLoadThread",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Loads specified image file to Danmakufu as a texture in a separate thread.",
        "notes": "Using this function inside @Loading is the same as using LoadTexture.\n\nWhen using large images, the script will freeze until the image has finished loading."
    },
    {
        "name": "RemoveTexture",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Removes specified texture file from Danmakufu.",
        "notes": ""
    },
    {
        "name": "GetTextureWidth",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "width of image file",
            "type": "number (int)"
        },
        "description": "Returns the width of the specified image file.",
        "notes": ""
    },
    {
        "name": "GetTextureHeight",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "height of image file",
            "type": "number (int)"
        },
        "description": "Returns the height of the specified image file.",
        "notes": ""
    },
    {
        "name": "SetFogEnable",
        "arguments": [
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Enables or disables fog.",
        "notes": ""
    },
    {
        "name": "SetFogParam",
        "arguments": [
            {
                "name": "start",
                "type": "number"
            },
            {
                "name": "end",
                "type": "number"
            },
            {
                "name": "red",
                "type": "number (int)"
            },
            {
                "name": "green",
                "type": "number (int)"
            },
            {
                "name": "blue",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the fog parameters with the start and end distances from the player and the rgb values.",
        "notes": "RGB on 0-255 scale.\n\nTo turn the screen dark around the player, for example, you can use SetFogParam(250, 700, 0, 0, 0)."
    },
    {
        "name": "ClearInvalidRenderPriority",
        "arguments": [],
        "return": {},
        "description": "Clear invalid render priorities set with SetInvalidRenderPriorityA1.",
        "notes": ""
    },
    {
        "name": "SetInvalidRenderPriorityA1",
        "arguments": [
            {
                "name": "start",
                "type": "number (int)"
            },
            {
                "name": "end",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets invalid render priority between start and end render priorities.",
        "notes": "Drawing within the specified range is disabled by this function."
    },
    {
        "name": "GetReservedRenderTargetName",
        "arguments": [
            {
                "name": "index",
                "type": "number"
            }
        ],
        "return": {
            "name": "render target texture name",
            "type": "string"
        },
        "description": "Returns the name of the render target texture set at the time of Danmakufu startup.",
        "notes": "Index in range 0-2.\n\nThere is always a texture that can be obtained with this function."
    },
    {
        "name": "CreateRenderTarget",
        "arguments": [
            {
                "name": "targetname",
                "type": "string"
            }
        ],
        "return": {
            "name": "true if successfully created; false otherwise",
            "type": "bool"
        },
        "description": "Creates a custom render target outside of the reserved ones.",
        "notes": "To use, ObjPrim_SetTexture must have the name of the render target as a string.\n\nTextures created with this function can be used for RenderToTextureA1 and other similar functions."
    },
    {
        "name": "RenderToTextureA1",
        "arguments": [
            {
                "name": "targetname",
                "type": "string"
            },
            {
                "name": "start",
                "type": "number"
            },
            {
                "name": "end",
                "type": "number"
            },
            {
                "name": "rendertargetclear",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Renders the specified range of invalid render priority drawings to a texture.\n\nSet rendertargetclear to true in order to clear the render target after each frame. If set to false, the render target will remain into the next frame.",
        "notes": ""
    },
    {
        "name": "RenderToTextureB1",
        "arguments": [
            {
                "name": "targetname",
                "type": "string"
            },
            {
                "name": "obj",
                "type": "number (Object ID)"
            },
            {
                "name": "rendertargetclear",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Renders the specified object to texture.\n\nSet rendertargetclear to true in order to clear the render target after each frame. If set to false, the render target will remain into the next frame.",
        "notes": ""
    },
    {
        "name": "SaveRenderedTextureA1",
        "arguments": [
            {
                "name": "targetname",
                "type": "string"
            },
            {
                "name": "filename",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Saves rendered texture to file.",
        "notes": "The image file created by this function can be used immediately after its execution."
    },
    {
        "name": "SaveRenderedTextureA2",
        "arguments": [
            {
                "name": "targetname",
                "type": "string"
            },
            {
                "name": "filename",
                "type": "string (path)"
            },
            {
                "name": "x1",
                "type": "number"
            },
            {
                "name": "y1",
                "type": "number"
            },
            {
                "name": "x2",
                "type": "number"
            },
            {
                "name": "y2",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Saves rendered texture to file, given x1/y1/x2/y2 bounds of the region to capture.",
        "notes": "The image file created by this function can be used immediately after its execution."
    },
    {
        "name": "SaveSnapShotA1",
        "arguments": [
            {
                "name": "filename",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Saves a picture of the game to file.",
        "notes": "The image file created by this function can be used immediately after its execution."
    },
    {
        "name": "SaveSnapShotA2",
        "arguments": [
            {
                "name": "filename",
                "type": "string (path)"
            },
            {
                "name": "x1",
                "type": "number"
            },
            {
                "name": "y1",
                "type": "number"
            },
            {
                "name": "x2",
                "type": "number"
            },
            {
                "name": "y2",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Saves a picture of the game to file, given x1/y1/x2/y2 bounds of the region to capture.",
        "notes": "The image file created by this function can be used immediately after its execution."
    },
    {
        "name": "IsPixelShaderSupported",
        "arguments": [
            {
                "name": "majorversion",
                "type": "number (int)"
            },
            {
                "name": "minorversion",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "true if supported; false otherwise",
            "type": "bool"
        },
        "description": "Checks your whether or not your GPU supports the specified pixel shader version and returns true if supported.",
        "notes": "Example: `IsPixelShaderSupported(3,0);` checks for Pixel Shader version 3.0."
    },
    {
        "name": "SetShader",
        "arguments": [
            {
                "name": "objshader",
                "type": "number (Object ID)"
            },
            {
                "name": "rpriority1",
                "type": "number"
            },
            {
                "name": "rpriority2",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the shader object associated with objshader to affect render priorities between rpriority1 and rpriority2.",
        "notes": "Render priorities are on a 0-1 scale."
    },
    {
        "name": "SetShaderI",
        "arguments": [
            {
                "name": "objshader",
                "type": "number (Object ID)"
            },
            {
                "name": "rpriority1",
                "type": "number"
            },
            {
                "name": "rpriority2",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the shader object associated with objshader to affect render priorities between rpriority1 and rpriority2.",
        "notes": "Render priorities are on a 0-100 scale."
    },
    {
        "name": "ResetShader",
        "arguments": [
            {
                "name": "rpriority1",
                "type": "number"
            },
            {
                "name": "rpriority2",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the shader object associated with objshader to stop affecting render priorities between rpriority1 and rpriority2.",
        "notes": "Render priorities are on a 0-1 scale."
    },
    {
        "name": "ResetShaderI",
        "arguments": [
            {
                "name": "rpriority1",
                "type": "number"
            },
            {
                "name": "rpriority2",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the shader object associated with objshader to stop affecting render priorities between rpriority1 and rpriority2.",
        "notes": "Render priorities are on a 0-100 scale."
    },
    {
        "name": "SetCameraFocusX",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the x coordinate of the camera focus.",
        "notes": ""
    },
    {
        "name": "SetCameraFocusY",
        "arguments": [
            {
                "name": "ycoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the y coordinate of the camera focus.",
        "notes": ""
    },
    {
        "name": "SetCameraFocusZ",
        "arguments": [
            {
                "name": "zcoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the z coordinate of the camera focus.",
        "notes": ""
    },
    {
        "name": "SetCameraFocusXYZ",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "zcoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the x, y, and z coordinates of the camera focus.",
        "notes": ""
    },
    {
        "name": "SetCameraRadius",
        "arguments": [
            {
                "name": "distance",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the distance of the camera to the focus point.",
        "notes": ""
    },
    {
        "name": "SetCameraAzimuthAngle",
        "arguments": [
            {
                "name": "azimuth",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "Sets the azimuth angle from the focus point.",
        "notes": ""
    },
    {
        "name": "SetCameraElevationAngle",
        "arguments": [
            {
                "name": "elevation",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "Sets the elevation angle from the focus point.",
        "notes": ""
    },
    {
        "name": "SetCameraYaw",
        "arguments": [
            {
                "name": "yaw",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the horizontal Yaw angle of the camera.",
        "notes": ""
    },
    {
        "name": "SetCameraPitch",
        "arguments": [
            {
                "name": "pitch",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the vertical Pitch angle of the camera.",
        "notes": ""
    },
    {
        "name": "SetCameraRoll",
        "arguments": [
            {
                "name": "roll",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the rotational Roll angle of the camera.",
        "notes": ""
    },
    {
        "name": "GetCameraX",
        "arguments": [],
        "return": {
            "name": "camera x coordinate",
            "type": "number"
        },
        "description": "Returns the x coordinate of the camera.",
        "notes": "Defaults to 341.506348"
    },
    {
        "name": "GetCameraY",
        "arguments": [],
        "return": {
            "name": "camera y coordinate",
            "type": "number"
        },
        "description": "Returns the y coordinate of the camera.",
        "notes": "Defaults to 353.553375"
    },
    {
        "name": "GetCameraZ",
        "arguments": [],
        "return": {
            "name": "camera z coordinate",
            "type": "number"
        },
        "description": "Returns the z coordinate of the camera.",
        "notes": "Default to 91.506348"
    },
    {
        "name": "GetCameraFocusX",
        "arguments": [],
        "return": {
            "name": "camera focus x coordinate",
            "type": "number"
        },
        "description": "Returns the x coordinate of the camera focus point.",
        "notes": "Defaults to 0"
    },
    {
        "name": "GetCameraFocusY",
        "arguments": [],
        "return": {
            "name": "camera focus y coordinate",
            "type": "number"
        },
        "description": "Returns the y coordinate of the camera focus point.",
        "notes": "Defaults to 0"
    },
    {
        "name": "GetCameraFocusZ",
        "arguments": [],
        "return": {
            "name": "camera focus z coordinate",
            "type": "number"
        },
        "description": "Returns the z coordinate of the camera focus point.",
        "notes": "Defaults to 0"
    },
    {
        "name": "GetCameraRadius",
        "arguments": [],
        "return": {
            "name": "distance from focus point to camera",
            "type": "number"
        },
        "description": "Returns the distance from the focus point to the camera.",
        "notes": "Defaults to 500"
    },
    {
        "name": "GetCameraAzimuthAngle",
        "arguments": [],
        "return": {
            "name": "azimuth angle from focus point to camera",
            "type": "number (degrees)"
        },
        "description": "Returns the azimuth angle from the focus point to the camera.",
        "notes": "Defaults to 15"
    },
    {
        "name": "GetCameraElevationAngle",
        "arguments": [],
        "return": {
            "name": "elevation angle from focus point to camera",
            "type": "number (degrees)"
        },
        "description": "Returns the elevation angle from the focus point to the camera.",
        "notes": "Defaults to 45"
    },
    {
        "name": "GetCameraYaw",
        "arguments": [],
        "return": {
            "name": "camera yaw angle",
            "type": "number"
        },
        "description": "Returns the horizontal Yaw angle of the camera.",
        "notes": "Defaults to 0"
    },
    {
        "name": "GetCameraPitch",
        "arguments": [],
        "return": {
            "name": "camera pitch angle",
            "type": "number"
        },
        "description": "Returns the vertical Pitch angle of the camera.",
        "notes": "Defaults to 0"
    },
    {
        "name": "GetCameraRoll",
        "arguments": [],
        "return": {
            "name": "camera roll angle",
            "type": "number"
        },
        "description": "Returns the rotational Roll angle of the camera.",
        "notes": "Defaults to 0"
    },
    {
        "name": "SetCameraPerspectiveClip",
        "arguments": [
            {
                "name": "nearclip",
                "type": "number"
            },
            {
                "name": "farclip",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets camera clipping distances.\n\nObjects that are further or nearer than the clipping distance will not be drawn.",
        "notes": ""
    },
    {
        "name": "Set2DCameraFocusX",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the x coordinate of the focus point.",
        "notes": "Defaults to center of the playing field."
    },
    {
        "name": "Set2DCameraFocusY",
        "arguments": [
            {
                "name": "ycoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the x coordinate of the focus point.",
        "notes": "Defaults to center of the playing field."
    },
    {
        "name": "Set2DCameraAngleZ",
        "arguments": [
            {
                "name": "rotation",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "Sets the z angle (rotation) of the 2D Camera.",
        "notes": ""
    },
    {
        "name": "Set2DCameraRatio",
        "arguments": [
            {
                "name": "zoom",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the zoom of the camera (centered on the focus point).",
        "notes": "Defaults to 1."
    },
    {
        "name": "Set2DCameraRatioX",
        "arguments": [
            {
                "name": "xzoom",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the magnification of the x axis of the 2D camera (centered on the focus point).",
        "notes": "For example, if you set this value to 2, the x axis will be doubled in size.\n\nDefaults to 1.\n\nIf you specify a negative value, the x axis will be flipped."
    },
    {
        "name": "Set2DCameraRatioY",
        "arguments": [
            {
                "name": "yzoom",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the magnification of the y axis of the 2D camera (centered on the focus point).",
        "notes": "For example, if you set this value to 2, the y axis will be doubled in size.\n\nDefaults to 1.\n\nIf you specify a negative value, the y axis will be flipped."
    },
    {
        "name": "Reset2DCamera",
        "arguments": [],
        "return": {},
        "description": "Resets both the focus point and the zoom ratio, respectively, to the center of the screen and 1.",
        "notes": ""
    },
    {
        "name": "Get2DCameraX",
        "arguments": [],
        "return": {
            "name": "camera x coordinate",
            "type": "number"
        },
        "description": "Returns the x coordinate of the camera.",
        "notes": ""
    },
    {
        "name": "Get2DCameraY",
        "arguments": [],
        "return": {
            "name": "camera y coordinate",
            "type": "number"
        },
        "description": "Returns the y coordinate of the camera.",
        "notes": ""
    },
    {
        "name": "Get2DCameraAngleZ",
        "arguments": [],
        "return": {
            "name": "camera rotation angle",
            "type": "number (degrees)"
        },
        "description": "Returns the z angle (rotation) of the camera.",
        "notes": ""
    },
    {
        "name": "Get2DCameraRatio",
        "arguments": [],
        "return": {
            "name": "zoom ratio",
            "type": "number"
        },
        "description": "Returns the zoom ratio of the camera.",
        "notes": ""
    },
    {
        "name": "Get2DCameraRatioX",
        "arguments": [],
        "return": {
            "name": "x zoom ratio",
            "type": "number"
        },
        "description": "Returns the x zoom ratio of the camera.",
        "notes": ""
    },
    {
        "name": "Get2DCameraRatioY",
        "arguments": [],
        "return": {
            "name": "y zoom ratio",
            "type": "number"
        },
        "description": "Returns the y zoom ratio of the camera.",
        "notes": ""
    },
    {
        "name": "LoadScript",
        "arguments": [
            {
                "name": "scriptpath",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "script ID of loaded script",
            "type": "number (Script ID)"
        },
        "description": "Loads and compiles the specified script, and returns its script ID.\n\nAlso calls @Loading and initializes global variables in the script.",
        "notes": ""
    },
    {
        "name": "LoadScriptInThread",
        "arguments": [
            {
                "name": "scriptpath",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "script ID of loaded script",
            "type": "number (Script ID)"
        },
        "description": "Loads and compiles the specified script in a different thread, and returns its script ID.\n\nAlso calls @Loading and initializes global variables in the script.",
        "notes": ""
    },
    {
        "name": "CloseScript",
        "arguments": [
            {
                "name": "scriptID",
                "type": "number (Script ID)"
            }
        ],
        "return": {},
        "description": "Stops the specified script.",
        "notes": "Until this function is called, the script will continue to run."
    },
    {
        "name": "IsCloseScript",
        "arguments": [
            {
                "name": "scriptID",
                "type": "number (Script ID)"
            }
        ],
        "return": {
            "name": "true if script associated with scriptID is not running; false otherwise",
            "type": "bool"
        },
        "description": "Returns whether the specified script has been stopped.\n\nReturns true if the script is not running.",
        "notes": ""
    },
    {
        "name": "SetScriptArgument",
        "arguments": [
            {
                "name": "scriptID",
                "type": "number (Script ID)"
            },
            {
                "name": "argindex",
                "type": "number"
            },
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {},
        "description": "Before starting the given script with StartScript, sets a value that is to be passed to the given script upon starting.",
        "notes": "This value can be retrieved in the started script with GetScriptArgument."
    },
    {
        "name": "GetScriptArgument",
        "arguments": [
            {
                "name": "argindex",
                "type": "number"
            }
        ],
        "return": {
            "name": "script value associated with argument index",
            "type": "free"
        },
        "description": "Returns the value of the specified argument, previously set by SetScriptArgument before the script was started.",
        "notes": ""
    },
    {
        "name": "GetScriptArgumentCount",
        "arguments": [],
        "return": {
            "name": "number of script arguments",
            "type": "number (int)"
        },
        "description": "Returns the number of arguments set by SetScriptArgument before the script was started.",
        "notes": ""
    },
    {
        "name": "CloseStgScene",
        "arguments": [],
        "return": {},
        "description": "Ends the current scene (returns to script selection screen).",
        "notes": ""
    },
    {
        "name": "GetOwnScriptID",
        "arguments": [],
        "return": {
            "name": "ID of script the function is called in",
            "type": "number (Script ID)"
        },
        "description": "Returns the script's own ID.",
        "notes": ""
    },
    {
        "name": "GetEventType",
        "arguments": [],
        "return": {
            "name": "event type",
            "type": "const"
        },
        "description": "Returns the event type currently triggered in @Event.",
        "notes": ""
    },
    {
        "name": "GetEventArgument",
        "arguments": [
            {
                "name": "argindex",
                "type": "number"
            }
        ],
        "return": {
            "name": "event argument of event currently triggered in @Event",
            "type": "free"
        },
        "description": "Returns the argument of the event currently triggered in @Event.",
        "notes": "Can be an arbitrary value."
    },
    {
        "name": "SetScriptResult",
        "arguments": [
            {
                "name": "result",
                "type": "free"
            }
        ],
        "return": {},
        "description": "Sets the result of the event in @Event, which can then be retrieved by GetScriptResult.",
        "notes": ""
    },
    {
        "name": "GetScriptResult",
        "arguments": [
            {
                "name": "scriptID",
                "type": "number (Script ID)"
            }
        ],
        "return": {
            "name": "event result",
            "type": "free"
        },
        "description": "Returns the event result from SetScriptResult.",
        "notes": "Can be an arbitrary value."
    },
    {
        "name": "SetAutoDeleteObject",
        "arguments": [
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether to delete all existing objects that were created in the current script at its termination.",
        "notes": "If set to true, the current script's objects will be deleted.\n\nThe default value is false."
    },
    {
        "name": "GetScriptInfoA1",
        "arguments": [
            {
                "name": "scriptpath",
                "type": "string (path)"
            },
            {
                "name": "infotype",
                "type": "const"
            }
        ],
        "return": {
            "name": "results of query",
            "type": "varies"
        },
        "description": "Parses and returns information from the script file's header.",
        "notes": "Constants for infotype are as follows:\n\nINFO_SCRIPT_TYPE: Returns the script type (const): one of TYPE_SCRIPT_PLAYER: Player script, TYPE_SCRIPT_SINGLE: Single script, TYPE_SCRIPT_PLURAL: Plural script, TYPE_SCRIPT_STAGE: Stage script, or TYPE_SCRIPT_PACKAGE: Package script.\n\nINFO_SCRIPT_PATH: Returns the script path (string).\n\nINFO_SCRIPT_ID: Returns the script #ID (int).\n\nINFO_SCRIPT_TITLE: Returns the script #Title (string).\n\nINFO_SCRIPT_TEXT: Returns the script #Text (string).\n\nINFO_SCRIPT_IMAGE: Returns the script #Image (string).\n\nINFO_SCRIPT_REPLAY_NAME: Returns the script #ReplayName (string)."
    },
    {
        "name": "GetScore",
        "arguments": [],
        "return": {
            "name": "current score",
            "type": "number"
        },
        "description": "Returns the current score.",
        "notes": ""
    },
    {
        "name": "AddScore",
        "arguments": [
            {
                "name": "score",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Adds the given value to the score.",
        "notes": ""
    },
    {
        "name": "GetGraze",
        "arguments": [],
        "return": {
            "name": "current graze",
            "type": "number"
        },
        "description": "Returns the current amount of graze.",
        "notes": ""
    },
    {
        "name": "AddGraze",
        "arguments": [
            {
                "name": "graze",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Adds the given value to the graze count.",
        "notes": ""
    },
    {
        "name": "GetPoint",
        "arguments": [],
        "return": {
            "name": "current amount of collected point items",
            "type": "number"
        },
        "description": "Returns the current amount of point items collected",
        "notes": ""
    },
    {
        "name": "AddPoint",
        "arguments": [
            {
                "name": "point",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Adds the given value to the point count.",
        "notes": ""
    },
    {
        "name": "SetItemRenderPriorityI",
        "arguments": [
            {
                "name": "rpriority",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the render priority for items, on a 0 to 100 scale.",
        "notes": "Default is 60."
    },
    {
        "name": "SetShotRenderPriorityI",
        "arguments": [
            {
                "name": "rpriority",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the render priority for bullets, on a 0 to 100 scale.",
        "notes": "Default is 50."
    },
    {
        "name": "GetStgFrameRenderPriorityMinI",
        "arguments": [],
        "return": {
            "name": "minimum render priority for STG frame",
            "type": "number (int)"
        },
        "description": "Returns the lowest render priority for the STG frame, on a 0 to 100 scale.",
        "notes": "Default is 20."
    },
    {
        "name": "GetStgFrameRenderPriorityMaxI",
        "arguments": [],
        "return": {
            "name": "maximum render priority for STG frame",
            "type": "number (int)"
        },
        "description": "Returns the highest render priority for the STG frame, on a 0 to 100 scale.",
        "notes": "Default is 80."
    },
    {
        "name": "GetItemRenderPriorityI",
        "arguments": [],
        "return": {
            "name": "render priority for items",
            "type": "number (int)"
        },
        "description": "Returns the render priority for items, on a 0 to 100 scale.",
        "notes": ""
    },
    {
        "name": "GetShotRenderPriorityI",
        "arguments": [],
        "return": {
            "name": "render priority for shots",
            "type": "number (int)"
        },
        "description": "Returns the render priority for shots, on a 0 to 100 scale.",
        "notes": ""
    },
    {
        "name": "GetPlayerRenderPriorityI",
        "arguments": [],
        "return": {
            "name": "render priority for the player",
            "type": "number (int)"
        },
        "description": "Returns the render priority for the player, on a 0 to 100 scale.",
        "notes": ""
    },
    {
        "name": "GetCameraFocusPermitPriorityI",
        "arguments": [],
        "return": {
            "name": "max 2D camera render priority",
            "type": "number (int)"
        },
        "description": "Returns the highest render priority the 2D camera can affect, on a 0 to 100 scale.",
        "notes": "Default is 79."
    },
    {
        "name": "GetStgFrameLeft",
        "arguments": [],
        "return": {
            "name": "STG frame left",
            "type": "number (int)"
        },
        "description": "Returns the leftmost coordinate of the STG frame (playing field).",
        "notes": "Default is 32."
    },
    {
        "name": "GetStgFrameTop",
        "arguments": [],
        "return": {
            "name": "STG frame top",
            "type": "number (int)"
        },
        "description": "Returns the topmost coordinate of the STG frame (playing field).",
        "notes": "Default is 16."
    },
    {
        "name": "GetStgFrameWidth",
        "arguments": [],
        "return": {
            "name": "STG frame width",
            "type": "number (int)"
        },
        "description": "Returns the width of the STG frame (playing field).",
        "notes": "Default is 384."
    },
    {
        "name": "GetStgFrameHeight",
        "arguments": [],
        "return": {
            "name": "STG frame height",
            "type": "number (int)"
        },
        "description": "Returns the height of the STG frame (playing field).",
        "notes": "Default is 448."
    },
    {
        "name": "GetScreenWidth",
        "arguments": [],
        "return": {
            "name": "danmakufu window width",
            "type": "number (int)"
        },
        "description": "Returns the width of Danmakufu's window.",
        "notes": "Default is 640 unless overwritten in a .def file."
    },
    {
        "name": "GetScreenHeight",
        "arguments": [],
        "return": {
            "name": "danmakufu window height",
            "type": "number (int)"
        },
        "description": "Returns the height of Danmakufu's window.",
        "notes": "Default is 480 unless overwritten in a .def file."
    },
    {
        "name": "IsReplay",
        "arguments": [],
        "return": {
            "name": "true if called in a replay; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if a replay is playing, false otherwise.",
        "notes": ""
    },
    {
        "name": "GetPlayerObjectID",
        "arguments": [],
        "return": {
            "name": "player object ID",
            "type": "number (Object ID)"
        },
        "description": "Returns Player Object ID.",
        "notes": ""
    },
    {
        "name": "GetPlayerScriptID",
        "arguments": [],
        "return": {
            "name": "player script ID",
            "type": "number (Script ID)"
        },
        "description": "Returns Player Script ID.",
        "notes": ""
    },
    {
        "name": "SetPlayerSpeed",
        "arguments": [
            {
                "name": "normal",
                "type": "number"
            },
            {
                "name": "focus",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the normal speed and focus speed of the player.",
        "notes": ""
    },
    {
        "name": "SetPlayerClip",
        "arguments": [
            {
                "name": "x1",
                "type": "number"
            },
            {
                "name": "y1",
                "type": "number"
            },
            {
                "name": "x2",
                "type": "number"
            },
            {
                "name": "y2",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the area within which the player can move.",
        "notes": ""
    },
    {
        "name": "SetPlayerLife",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets number of lives for the player.",
        "notes": "Can be a non-integer value."
    },
    {
        "name": "SetPlayerSpell",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets number of spells/bombs for the player.",
        "notes": "Can be a non-integer value."
    },
    {
        "name": "SetPlayerPower",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets power value for the player.",
        "notes": "Can be a non-integer value."
    },
    {
        "name": "SetPlayerInvincibilityFrame",
        "arguments": [
            {
                "name": "invulnframe",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the number of frames for player invincibility.",
        "notes": ""
    },
    {
        "name": "SetPlayerDownStateFrame",
        "arguments": [
            {
                "name": "downstateframe",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the number of frames before respawning the player after player death.",
        "notes": ""
    },
    {
        "name": "SetPlayerRebirthFrame",
        "arguments": [
            {
                "name": "rebirthframe",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the number of frames during the player can deathbomb after being hit.",
        "notes": "Default is 15 frames."
    },
    {
        "name": "SetPlayerRebirthLossFrame",
        "arguments": [
            {
                "name": "rebirthlossframe",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the number of deathbomb frames the player loses per deathbomb.",
        "notes": "Default is 3 frames."
    },
    {
        "name": "SetPlayerAutoItemCollectLine",
        "arguments": [
            {
                "name": "ycoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the y coordinate of the auto collect line.",
        "notes": "A negative value removes the line.\n\nDefault is no autocollect line."
    },
    {
        "name": "SetForbidPlayerShot",
        "arguments": [
            {
                "name": "forbid",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "When set to true, the player cannot use normal shots.",
        "notes": ""
    },
    {
        "name": "SetForbidPlayerSpell",
        "arguments": [
            {
                "name": "forbid",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "When set to true, the player cannot use bombs.",
        "notes": ""
    },
    {
        "name": "GetPlayerX",
        "arguments": [],
        "return": {
            "name": "player x",
            "type": "number"
        },
        "description": "Returns the x coordinate of the player.",
        "notes": ""
    },
    {
        "name": "GetPlayerY",
        "arguments": [],
        "return": {
            "name": "player y",
            "type": "number"
        },
        "description": "Returns the y coordinate of the player.",
        "notes": ""
    },
    {
        "name": "GetPlayerState",
        "arguments": [],
        "return": {
            "name": "player state",
            "type": "const"
        },
        "description": "Returns the player state.",
        "notes": "State is one of:\n\nSTATE_NORMAL (player is alive)\n\nSTATE_HIT (after being hit, during counter bomb frames)\n\nSTATE_DOWN (after being hit, before reappearing)\n\nSTATE_END (game over)"
    },
    {
        "name": "GetPlayerSpeed",
        "arguments": [],
        "return": {
            "name": "player speed",
            "type": "number []"
        },
        "description": "Returns the player movement speed as an array.",
        "notes": "Array is [unfocused speed, focused speed]."
    },
    {
        "name": "GetPlayerClip",
        "arguments": [],
        "return": {
            "name": "player clip",
            "type": "number []"
        },
        "description": "Gets the player's clip as an array.",
        "notes": "Array is [left, top, right, bottom]."
    },
    {
        "name": "GetPlayerLife",
        "arguments": [],
        "return": {
            "name": "player lives",
            "type": "number"
        },
        "description": "Returns the number of player lives.",
        "notes": ""
    },
    {
        "name": "GetPlayerSpell",
        "arguments": [],
        "return": {
            "name": "player bombs",
            "type": "number"
        },
        "description": "Returns the number of player bombs.",
        "notes": ""
    },
    {
        "name": "GetPlayerPower",
        "arguments": [],
        "return": {
            "name": "player power",
            "type": "number"
        },
        "description": "Returns the amount of player power.",
        "notes": ""
    },
    {
        "name": "GetPlayerInvincibilityFrame",
        "arguments": [],
        "return": {
            "name": "player invincibility frames",
            "type": "number (int)"
        },
        "description": "Returns the number of frames during which the player is invincible.",
        "notes": ""
    },
    {
        "name": "GetPlayerDownStateFrame",
        "arguments": [],
        "return": {
            "name": "player down state frames",
            "type": "number (int)"
        },
        "description": "Returns the number of frames during which the player is respawning.",
        "notes": ""
    },
    {
        "name": "GetPlayerRebirthFrame",
        "arguments": [],
        "return": {
            "name": "player rebirth frames",
            "type": "number (int)"
        },
        "description": "Returns the number of frames during which the player can deathbomb.",
        "notes": ""
    },
    {
        "name": "GetAngleToPlayer",
        "arguments": [
            {
                "name": "obj",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "angle from obj to player",
            "type": "number (degrees)"
        },
        "description": "Returns the angle from the provided object to the player.",
        "notes": ""
    },
    {
        "name": "IsPermitPlayerShot",
        "arguments": [],
        "return": {
            "name": "true if the player can shoot; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the player can use normal shots, false otherwise.",
        "notes": ""
    },
    {
        "name": "IsPermitPlayerSpell",
        "arguments": [],
        "return": {
            "name": "true if the player can bomb; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the player can use bombs, false otherwise.",
        "notes": "The returned value may differ from a previously set SetForbidPlayerSpell. For instance, it is forced to false during a LastSpell."
    },
    {
        "name": "IsPlayerLastSpellWait",
        "arguments": [],
        "return": {
            "name": "true if the player is currently deathbombing; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the player is deathbombing, false otherwise.",
        "notes": ""
    },
    {
        "name": "IsPlayerSpellActive",
        "arguments": [],
        "return": {
            "name": "true if the player is currently bombing; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the player is utilizing a bomb, false otherwise.",
        "notes": ""
    },
    {
        "name": "GetPlayerID",
        "arguments": [],
        "return": {
            "name": "player script id",
            "type": "string"
        },
        "description": "Returns the system ID of the player script.",
        "notes": "This value is defined inside the player script in the #ID header."
    },
    {
        "name": "GetPlayerReplayName",
        "arguments": [],
        "return": {
            "name": "player script replay name",
            "type": "string"
        },
        "description": "Returns the replay ID of the player.",
        "notes": "This value is defined inside the player script in the #ReplayName header."
    },
    {
        "name": "GetEnemyBossSceneObjectID",
        "arguments": [],
        "return": {
            "name": "boss scene object ID",
            "type": "number (Object ID)"
        },
        "description": "Returns the boss scene object ID or ID_INVALID when not in a boss scene.",
        "notes": ""
    },
    {
        "name": "GetEnemyBossObjectID",
        "arguments": [],
        "return": {
            "name": "array of boss object IDs",
            "type": "number (Object ID) []"
        },
        "description": "Returns an array consisting of the Object ID of the boss present on the screen.",
        "notes": ""
    },
    {
        "name": "GetAllEnemyID",
        "arguments": [],
        "return": {
            "name": "array of enemy object IDs",
            "type": "number (Object ID) []"
        },
        "description": "Returns an array consisting of the Object ID of every enemy present on the screen.",
        "notes": ""
    },
    {
        "name": "GetIntersectionRegistedEnemyID",
        "arguments": [],
        "return": {
            "name": "array of enemy object IDs",
            "type": "number (Object ID) []"
        },
        "description": "Returns an array consisting of the Object ID of all enemies with a registered hitbox to player shots (via ObjEnemy_SetIntersectionCircleToShot()).",
        "notes": ""
    },
    {
        "name": "GetAllEnemyIntersectionPosition",
        "arguments": [],
        "return": {
            "name": "array of enemy positions",
            "type": "number [][]"
        },
        "description": "Returns the position of all enemies for which collision detection is true (currently intersecting) as a 2D array.",
        "notes": "Return format is [index][&lt;x coordinate, y coordinate&gt;]."
    },
    {
        "name": "GetEnemyIntersectionPosition",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "acquisitionvalue",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "array of enemy positions",
            "type": "number [][]"
        },
        "description": "Returns the enemy intersection position around the given position with acquisitionvalue priority as a 2D array.",
        "notes": "Return format is [index][&lt;x coordinate, y coordinate&gt;].\n\nThe first possible acquisition value (index 0) corresponds to the nearest enemy to the provided x and y coordinates."
    },
    {
        "name": "GetEnemyIntersectionPositionByIdA1",
        "arguments": [
            {
                "name": "enemyID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "array of enemy positions",
            "type": "number [][]"
        },
        "description": "Returns all collision detection positions of the specified enemy as a 2D array.",
        "notes": "Return format is [index][&lt;x coordinate, y coordinate&gt;]."
    },
    {
        "name": "GetEnemyIntersectionPositionByIdA2",
        "arguments": [
            {
                "name": "enemyID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            }
        ],
        "return": {
            "name": "array of enemy positions",
            "type": "number [] []"
        },
        "description": "Returns all collision detection positions of the specified enemy as a 2D array.",
        "notes": "Return format is [index][&lt;x coordinate, y coordinate&gt;].\n\nThe first index (index 0) corresponds to the nearest intersection position from the provided x and y coordinates."
    },
    {
        "name": "LoadEnemyShotData",
        "arguments": [
            {
                "name": "filename",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Loads specified shot image file.",
        "notes": "Files with the same name can only be loaded once."
    },
    {
        "name": "ReloadEnemyShotData",
        "arguments": [
            {
                "name": "filename",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Reloads specified shot image file.",
        "notes": "Unlike LoadEnemyShotData, this function can load the same file several times."
    },
    {
        "name": "DeleteShotAll",
        "arguments": [
            {
                "name": "shottype",
                "type": "const"
            },
            {
                "name": "deletetype",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Deletes all shot objects on screen matching the criteria, utilizing the selected deletion type.",
        "notes": "shottype can be:\n\nTYPE_ALL (all shot objects)\n\nTYPE_SHOT (shot objects without spell resistance)\n\nTYPE_CHILD (shot objects fired from the currently running script)\n\ndeletetype can be:\n\nTYPE_IMMEDIATE (immediately delete the bullets)\n\nTYPE_FADE (slowly fade out the bullets)\n\nTYPE_ITEM (turn the bullets into items according to the running item script)\n\nNote: With TYPE_FADE, bullets will still be visible while fading out, but they will not have any collision."
    },
    {
        "name": "DeleteShotInCircle",
        "arguments": [
            {
                "name": "shottype",
                "type": "const"
            },
            {
                "name": "deletetype",
                "type": "const"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "radius",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Deletes all shot objects matching the criteria in the designated circle centered at (xcoord, ycoord) with provided radius, utilizing the selected deletion type.",
        "notes": "type can be:\n\nTYPE_ALL (all shot objects)\n\nTYPE_SHOT (shot objects without spell resistance)\n\nTYPE_CHILD (shot objects fired from the currently running script)\n\ndeletetype can be:\n\nTYPE_IMMEDIATE (immediately delete the bullets)\n\nTYPE_FADE (slowly fade out the bullets)\n\nTYPE_ITEM (turn the bullets into items according to the running item script)\n\nNote: With TYPE_FADE, bullets will still be visible while fading out, but they will not have any collision."
    },
    {
        "name": "CreateShotA1",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "speed",
                "type": "number"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            },
            {
                "name": "delay",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "object ID of new shot",
            "type": "number (Object ID)"
        },
        "description": "Creates a basic bullet that will move at the angle and speed defined.",
        "notes": "graphic is the image the bullet will have, while delay is the time in frames before the bullet will appear.\n\nDuring it's delay, there will be a collisionless cloud that appears where the bullet will spawn.\n\nReturns a void value in a player script if the player is unable to shoot."
    },
    {
        "name": "CreateShotOA1",
        "arguments": [
            {
                "name": "parentobjID",
                "type": "number (Object ID)"
            },
            {
                "name": "speed",
                "type": "number"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            },
            {
                "name": "delay",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "object ID of new shot",
            "type": "number (Object ID)"
        },
        "description": "Creates a bullet that will spawn on the coordinates of the given object id and will move at the angle and speed defined.",
        "notes": "graphic is the image the bullet will have, while delay is the time in frames before the bullet will appear.\n\nDuring it's delay, there will be a collisionless cloud that appears where the bullet will spawn.\n\nReturns a void value in a player script if the player is unable to shoot."
    },
    {
        "name": "CreateShotB1",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "xspeed",
                "type": "number"
            },
            {
                "name": "yspeed",
                "type": "number"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            },
            {
                "name": "delay",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "object ID of new shot",
            "type": "number (Object ID)"
        },
        "description": "Creates a bullet that will move at the specified x and y speeds.",
        "notes": "graphic is the image the bullet will have, while delay is the time in frames before the bullet will appear.\n\nDuring it's delay, there will be a collisionless cloud that appears where the bullet will spawn.\n\nReturns a void value in a player script if the player is unable to shoot."
    },
    {
        "name": "CreateShotB2",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "xspeed",
                "type": "number"
            },
            {
                "name": "yspeed",
                "type": "number"
            },
            {
                "name": "xaccel",
                "type": "number"
            },
            {
                "name": "yaccel",
                "type": "number"
            },
            {
                "name": "xspeedmax",
                "type": "number"
            },
            {
                "name": "yspeedmax",
                "type": "number"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            },
            {
                "name": "delay",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "object ID of new shot",
            "type": "number (Object ID)"
        },
        "description": "Creates a bullet that will move at the specified x and y speeds, incrementing its speed components by the respective acceleration component every frame, capping at the maxspeed for each component.",
        "notes": "graphic is the image the bullet will have, while delay is the time in frames before the bullet will appear.\n\nDuring it's delay, there will be a collisionless cloud that appears where the bullet will spawn.\n\nReturns a void value in a player script if the player is unable to shoot."
    },
    {
        "name": "CreateShotOB1",
        "arguments": [
            {
                "name": "parentobjID",
                "type": "number (Object ID)"
            },
            {
                "name": "xspeed",
                "type": "number"
            },
            {
                "name": "yspeed",
                "type": "number"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            },
            {
                "name": "delay",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "object ID of new shot",
            "type": "number (Object ID)"
        },
        "description": "Creates a bullet that will spawn on the coordinates of the given object id and will move at the specified x and y speeds.",
        "notes": "graphic is the image the bullet will have, while delay is the time in frames before the bullet will appear.\n\nDuring it's delay, there will be a collisionless cloud that appears where the bullet will spawn.\n\nReturns a void value in a player script if the player is unable to shoot."
    },
    {
        "name": "CreateLooseLaserA1",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "speed",
                "type": "number"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            },
            {
                "name": "length",
                "type": "number"
            },
            {
                "name": "width",
                "type": "number"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            },
            {
                "name": "delay",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "object ID of new loose laser",
            "type": "number (Object ID)"
        },
        "description": "Creates a loose (moving) laser that will move at the angle and speed defined, with its size defined by the length (in direction of travel) and width.",
        "notes": "graphic is the image the bullet will have, while delay is the time in frames before the laser will appear.\n\nDuring it's delay, there will be a collisionless cloud that appears where the laser will spawn.\n\nReturns a void value in a player script if the player is unable to shoot.\n\nThis function can be used to create larger bullets."
    },
    {
        "name": "CreateStraightLaserA1",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            },
            {
                "name": "length",
                "type": "number"
            },
            {
                "name": "width",
                "type": "number"
            },
            {
                "name": "deletetime",
                "type": "number (int)"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            },
            {
                "name": "delay",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "object ID of new straight laser",
            "type": "number (Object ID)"
        },
        "description": "Creates a straight laser mounted at the position provided, with its size defined by the length (in direction of travel) and width.",
        "notes": "graphic is the image the bullet will have, while delay is the time in frames before the laser will appear.\n\nThe 'deletetime' argument determines how many frames until the laser disappears.\n\nDuring the delay, the laser will appear as a very thin laser that has no collision (AKA delay laser) in order to give the player a warning.\n\nHaving no delay while using this function is not advisable, as the laser will spawn at full size the moment the delay is over.\n\nReturns a void value in a player script if the player is unable to shoot."
    },
    {
        "name": "CreateCurveLaserA1",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "speed",
                "type": "number"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            },
            {
                "name": "length",
                "type": "number"
            },
            {
                "name": "width",
                "type": "number"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            },
            {
                "name": "delay",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "object ID of new curve laser",
            "type": "number (Object ID)"
        },
        "description": "Creates a curve laser that will move at the angle and speed defined, with its size defined by the length (in direction of travel) and width.",
        "notes": "graphic is the image the bullet will have, while delay is the time in frames before the laser will appear.\n\nDuring it's delay, there will be a collisionless cloud that appears where the laser will spawn.\n\nReturns a void value in a player script if the player is unable to shoot.\n\nUse ObjMove_SetAngularVelocity to adjust the curve of this laser.\n\nThis function is heavy to process, so having many curve lasers on-screen at the same time is not recommended."
    },
    {
        "name": "SetShotIntersectionCircle",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "radius",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Adds a circular player hitbox at the specified position with the provided radius.",
        "notes": "Lasts one frame."
    },
    {
        "name": "SetShotIntersectionLine",
        "arguments": [
            {
                "name": "startxcoord",
                "type": "number"
            },
            {
                "name": "startycoord",
                "type": "number"
            },
            {
                "name": "endxcoord",
                "type": "number"
            },
            {
                "name": "endycoord",
                "type": "number"
            },
            {
                "name": "width",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Adds a linear player hitbox between the two specified positions with the provided width.",
        "notes": "Lasts one frame."
    },
    {
        "name": "GetShotIdInCircleA1",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "radius",
                "type": "number"
            }
        ],
        "return": {
            "name": "bullet object IDs within circle",
            "type": "number (Object ID) []"
        },
        "description": "Returns the object IDs of the bullets inside the given circle in an array.",
        "notes": "Inside a player script, it will only return enemy bullet IDs, and vice versa."
    },
    {
        "name": "GetShotIdInCircleA2",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "radius",
                "type": "number"
            },
            {
                "name": "target",
                "type": "const"
            }
        ],
        "return": {
            "name": "bullet object IDs with specified target type within circle",
            "type": "number (Object ID) []"
        },
        "description": "Returns the object IDs of the bullets inside the given circle with the specified target type in an array.",
        "notes": "Inside a player script, it will only return enemy bullet IDs, and vice versa.\n\ntarget can be:\n\nTARGET_ALL (all shots)\n\nTARGET_ENEMY (enemy shots only)\n\nTARGET_PLAYER (player shots only)"
    },
    {
        "name": "GetShotCount",
        "arguments": [
            {
                "name": "target",
                "type": "const"
            }
        ],
        "return": {
            "name": "number of bullets with specified target type",
            "type": "number (int)"
        },
        "description": "Returns the number of bullets with the specified target type",
        "notes": "target can be:\n\nTARGET_ALL (all shots)\n\nTARGET_ENEMY (enemy shots only)\n\nTARGET_PLAYER (player shots only)"
    },
    {
        "name": "SetShotAutoDeleteClip",
        "arguments": [
            {
                "name": "x1",
                "type": "number"
            },
            {
                "name": "y1",
                "type": "number"
            },
            {
                "name": "x2",
                "type": "number"
            },
            {
                "name": "y2",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets at what point bullets will be automatically deleted when leaving the STG screen.",
        "notes": "To override this auto deletion, use ObjShot_SetAutoDelete on the bullet you want to prevent from auto deleting.\n\nDefault is (64, 64, 64, 64)."
    },
    {
        "name": "StartShotScript",
        "arguments": [
            {
                "name": "scriptpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Starts the specified shot script.",
        "notes": ""
    },
    {
        "name": "CreateItemA1",
        "arguments": [
            {
                "name": "itemtype",
                "type": "const"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "score",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Creates an item of the provided itemtype and score value at the specified x and y coordinates.",
        "notes": "itemtype can be one of the following:\n\nITEM_1UP and ITEM_1UP_S (lives), ITEM_SPELL and ITEM_SPELL_S (bombs), ITEM_POINT and ITEM_POINT_S (points), ITEM_POWER and ITEM_POWER_S (power), or ITEM_USER (user-defined).\n\nThe types ending in '_S' will create a smaller version of the specified item."
    },
    {
        "name": "CreateItemA2",
        "arguments": [
            {
                "name": "itemtype",
                "type": "const"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "xdest",
                "type": "number"
            },
            {
                "name": "ydest",
                "type": "number"
            },
            {
                "name": "score",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Creates an item of the provided itemtype and score value at the specified x and y coordinates that moves to the provided x and y destination coordinates before falling down.",
        "notes": "itemtype can be one of the following:\n\nITEM_1UP and ITEM_1UP_S (lives), ITEM_SPELL and ITEM_SPELL_S (bombs), ITEM_POINT and ITEM_POINT_S (points), ITEM_POWER and ITEM_POWER_S (power), or ITEM_USER (user-defined).\n\nThe types ending in '_S' will create a smaller version of the specified item."
    },
    {
        "name": "CreateItemU1",
        "arguments": [
            {
                "name": "itemID",
                "type": "number (int)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "score",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Creates a user-defined item with the provided item ID and score value at the specified x and y coordinates.",
        "notes": ""
    },
    {
        "name": "CreateItemU2",
        "arguments": [
            {
                "name": "itemtype",
                "type": "const"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "xdest",
                "type": "number"
            },
            {
                "name": "ydest",
                "type": "number"
            },
            {
                "name": "score",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Creates a user-defined item with the provided item ID and score value at the specified x and y coordinates that moves to the provided x and y destination coordinates before falling.",
        "notes": ""
    },
    {
        "name": "CollectAllItems",
        "arguments": [],
        "return": {},
        "description": "Makes all items fly towards the player.",
        "notes": ""
    },
    {
        "name": "CollectItemsByType",
        "arguments": [
            {
                "name": "itemtype",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Makes all items of the specified type fly toward the player.",
        "notes": "itemtype can be one of the following:\n\nITEM_1UP and ITEM_1UP_S (lives), ITEM_SPELL and ITEM_SPELL_S (bombs), ITEM_POINT and ITEM_POINT_S (points), ITEM_POWER and ITEM_POWER_S (power), or ITEM_USER (user-defined)."
    },
    {
        "name": "CollectItemsInCircle",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "radius",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Makes all items within the circle fly toward the player.",
        "notes": ""
    },
    {
        "name": "CancelCollectItems",
        "arguments": [],
        "return": {},
        "description": "Cancels any items that were currently moving to the player for collection.",
        "notes": "This function only works for items collected by the player auto item collection line (SetPlayerAutoItemCollectLine)."
    },
    {
        "name": "StartItemScript",
        "arguments": [
            {
                "name": "scriptpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Starts the script at the provided path for processing user-defined items.",
        "notes": ""
    },
    {
        "name": "SetDefaultBonusItemEnable",
        "arguments": [
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether or not to create the default autocollected bullet delete items when bullets are deleted to items.",
        "notes": "True will create the items, false will not.\n\nThe default value is true."
    },
    {
        "name": "LoadItemData",
        "arguments": [
            {
                "name": "scriptpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Loads the specified item data.",
        "notes": "Can be called any amount of times, but currently existing IDs will be replaced by new ones of the same value.\n\nYou may not use the same file twice in this function; to do so, see ReloadItemData."
    },
    {
        "name": "ReloadItemData",
        "arguments": [
            {
                "name": "scriptpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Reloads the specified item data.",
        "notes": "Can be called any amount of times, but currently existing IDs will be replaced by new ones of the same value.\n\nYou do not need to use LoadItemData before using this function."
    },
    {
        "name": "StartSlow",
        "arguments": [
            {
                "name": "slowtarget",
                "type": "const"
            },
            {
                "name": "fpsvalue",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Creates a pseudo slow effect by forcing Danmakufu to run at the specified FPS value.",
        "notes": "There is currently only one target available, TARGET_ALL.\n\nUse StopSlow to stop this effect."
    },
    {
        "name": "StopSlow",
        "arguments": [
            {
                "name": "slowtarget",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Removes the pseudo slow from StartSlow, and restores Danmakufu to normal FPS.",
        "notes": "There is currently only one target available, TARGET_ALL."
    },
    {
        "name": "IsIntersected_Line_Circle",
        "arguments": [
            {
                "name": "startx",
                "type": "number"
            },
            {
                "name": "starty",
                "type": "number"
            },
            {
                "name": "endx",
                "type": "number"
            },
            {
                "name": "endy",
                "type": "number"
            },
            {
                "name": "width",
                "type": "number"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "radius",
                "type": "number"
            }
        ],
        "return": {
            "name": "true if the line and circle collide; false otherwise",
            "type": "bool"
        },
        "description": "Checks if the given line with given width is colliding with the given circle of given radius.\n\nReturns true if there is a collision; if there is no collision, it returns false.",
        "notes": ""
    },
    {
        "name": "GetObject2dPosition",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "2D coordinates of a 3D object projected onto the 2D window",
            "type": "number []"
        },
        "description": "Returns the 2D coordinates of a 3D object projected onto the 2D window.",
        "notes": "The array is returned as [X, Y]."
    },
    {
        "name": "Get2dPosition",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "zcoord",
                "type": "number"
            }
        ],
        "return": {
            "name": "2D location of the provided 3D coordinates projected onto the 2D window",
            "type": "number []"
        },
        "description": "Returns the 2D coordinates of the given 3D coordinates projected onto the 2D window.",
        "notes": "The array is returned as [X, Y]."
    },
    {
        "name": "erase",
        "arguments": [
            {
                "name": "array",
                "type": "free []"
            },
            {
                "name": "index",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "Array with element at index removed",
            "type": ""
        },
        "description": "Returns a new array with the element at the given index in the provided array removed.",
        "notes": ""
    },
    {
        "name": "length",
        "arguments": [
            {
                "name": "array",
                "type": "free []"
            }
        ],
        "return": {
            "name": "size of array",
            "type": "number (int)"
        },
        "description": "Returns the size of an array.",
        "notes": ""
    },
    {
        "name": "concatenate",
        "arguments": [
            {
                "name": "array1",
                "type": "free []"
            },
            {
                "name": "array2",
                "type": "free []"
            }
        ],
        "return": {
            "name": "merged array",
            "type": "free []"
        },
        "description": "Concatenates the two provided arrays (of same type) and returns the new array.",
        "notes": "Long form for ~.\n\nWorks on strings, as they are character arrays."
    },
    {
        "name": "slice",
        "arguments": [
            {
                "name": "array",
                "type": "free []"
            },
            {
                "name": "startcutoff",
                "type": "number (int)"
            },
            {
                "name": "endcutoff",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "indices in between the cutoff values",
            "type": "free []"
        },
        "description": "Cuts out a specific portion of an array.",
        "notes": "Long form for Array[startcutoff..endcutoff].\n\nSliced portion includes startcutoff but not endcutoff."
    },
    {
        "name": "not",
        "arguments": [
            {
                "name": "boolexpr",
                "type": "bool"
            }
        ],
        "return": {
            "name": "logical negation of boolexpr",
            "type": "bool"
        },
        "description": "Returns the logical negation of the provided boolean expressing.",
        "notes": "Long form for !."
    },
    {
        "name": "Obj_Delete",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Deletes object associated with objID.",
        "notes": ""
    },
    {
        "name": "Obj_IsDeleted",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "true if object associated with objID has been deleted, false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the object ID is not mapped to an object instance.",
        "notes": ""
    },
    {
        "name": "Obj_SetVisible",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "visible",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets visibility of object associated with objID.",
        "notes": "If visible is set to false, the object will not be drawn."
    },
    {
        "name": "Obj_IsVisible",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "true if object associated with objID is visible; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the specified object is visible.",
        "notes": ""
    },
    {
        "name": "Obj_SetRenderPriority",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "rpriority",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the object's render priority on a 0.0-1.0 scale.",
        "notes": ""
    },
    {
        "name": "Obj_SetRenderPriorityI",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "rpriority",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the object's render priority on a 0-100 scale.",
        "notes": ""
    },
    {
        "name": "Obj_GetRenderPriority",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "render priority of object associated with objID",
            "type": "number"
        },
        "description": "Returns the object's render priority as an integer on a 0.0-1.0 scale.",
        "notes": ""
    },
    {
        "name": "Obj_GetRenderPriorityI",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "render priority of object associated with objID",
            "type": "number (int)"
        },
        "description": "Returns the object's render priority as an integer on a 0-100 scale.",
        "notes": ""
    },
    {
        "name": "Obj_GetValue",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "key",
                "type": "string"
            }
        ],
        "return": {
            "name": "value for associated key in object's values",
            "type": "free"
        },
        "description": "Returns the value associated with the given key for the given object, previously set by Obj_SetValue.",
        "notes": "If the key-value pair does not exist or was deleted, attempting to access it will crash the program."
    },
    {
        "name": "Obj_GetValueD",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "key",
                "type": "string"
            },
            {
                "name": "default",
                "type": "free"
            }
        ],
        "return": {
            "name": "value for associated key in object's values",
            "type": "free"
        },
        "description": "Returns the value associated with the given key for the given object, previously set by Obj_SetValue.",
        "notes": "If the key-value pair does not exist or was deleted, returns the provided default instead."
    },
    {
        "name": "Obj_SetValue",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "key",
                "type": "string"
            },
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {},
        "description": "For the given object, maps the given key to the given value.",
        "notes": "The value can be returned by using Obj_GetValue with the corresponding key."
    },
    {
        "name": "Obj_DeleteValue",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "key",
                "type": "string"
            }
        ],
        "return": {},
        "description": "Deletes the key-value pair previously set by Obj_SetValue.",
        "notes": ""
    },
    {
        "name": "Obj_IsValueExists",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "key",
                "type": "string"
            }
        ],
        "return": {
            "name": "true if for the given object, the given is mapped; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the object has a key-value pair for the given key.",
        "notes": ""
    },
    {
        "name": "Obj_GetType",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "object type",
            "type": "const"
        },
        "description": "Retrieves the type of object.",
        "notes": "Return type is one of the following:\n\nOBJ_PRIMITIVE_2D, OBJ_SPRITE_2D, OBJ_SPRITE_LIST_2D, OBJ_PRIMITIVE_3D, OBJ_SPRITE_3D, OBJ_MESH, OBJ_TEXT, OBJ_SOUND, OBJ_FILE_TEXT, OBJ_FILE_BINARY, OBJ_PLAYER, OBJ_SPELL, OBJ_ENEMY, OBJ_ENEMY_BOSS_SCENE, OBJ_SHOT, OBJ_LOOSE_LASER, OBJ_STRAIGHT_LASER, OBJ_CURVE_LASER, or OBJ_ITEM."
    },
    {
        "name": "ObjRender_SetX",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the x coordinate of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_SetY",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "ycoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the y coordinate of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_SetZ",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "zcoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the z coordinate of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_SetPosition",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "zcoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the x, y, and z coordinates of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_SetAngleX",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xangle",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "Sets the x angle of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_SetAngleY",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "yangle",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "Sets the y angle of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_SetAngleZ",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "zangle",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "Sets the z angle of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_SetAngleXYZ",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xangle",
                "type": "number (degrees)"
            },
            {
                "name": "yangle",
                "type": "number (degrees)"
            },
            {
                "name": "zangle",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "Sets the x, y, and z angles of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_SetScaleX",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xscale",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the x scale of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_SetScaleY",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "zscale",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the y scale of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_SetScaleZ",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "zscale",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the z scale of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_SetColorHSV",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "hue",
                "type": "number"
            },
            {
                "name": "saturation",
                "type": "number"
            },
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the Hue (0-359 scale), Saturation (0-255 scale), and Value (0-255 scale) of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_SetAlpha",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "alpha",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the alpha value of the object associated with objID.",
        "notes": "A value of 0 will make the object invisible.\n\nA value of 255 will give the object full opacity.\n\nThis function has no effect on an object using BLEND_ADD_RGB - use BLEND_ADD_ARGB instead."
    },
    {
        "name": "ObjRender_GetX",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "x coordinate of the object associated with objID",
            "type": "number"
        },
        "description": "Returns the x coordinate of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_GetY",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "y coordinate of the object associated with objID",
            "type": "number"
        },
        "description": "Returns the y coordinate of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_GetZ",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "z coordinate of the object associated with objID",
            "type": "number"
        },
        "description": "Returns the z coordinate of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_GetAngleX",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "x angle of the object associated with objID",
            "type": "number"
        },
        "description": "Returns the x angle of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_GetAngleY",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "y angle of the object associated with objID",
            "type": "number"
        },
        "description": "Returns the y angle of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_GetAngleZ",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "z angle of the object associated with objID",
            "type": "number"
        },
        "description": "Returns the z angle of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_GetScaleX",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "x scale of the object associated with objID",
            "type": "number"
        },
        "description": "Returns the x scale of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_GetScaleY",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "y scale of the object associated with objID",
            "type": "number"
        },
        "description": "Returns the y scale of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_GetScaleZ",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "z scale of the object associated with objID",
            "type": "number"
        },
        "description": "Returns the z scale of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjRender_GetBlendType",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "blend type of the object associated with objID",
            "type": "number"
        },
        "description": "Returns the blend type of the object associated with objID.",
        "notes": "Available blend types are:\n\nBLEND_ALPHA, BLEND_ADD_RGB, BLEND_MULTIPLY, BLEND_SUBTRACT, BLEND_ADD_ARGB, BLEND_INV_DESTRGB, and BLEND_SHADOW (undocumented)"
    },
    {
        "name": "ObjRender_SetZWrite",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "zwrite",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Allows or prevents the object associated with objID from writing in the Z-buffer.",
        "notes": ""
    },
    {
        "name": "ObjRender_SetZTest",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "ztest",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether or not the object associated with objID uses the Z-buffer.",
        "notes": ""
    },
    {
        "name": "ObjRender_SetFogEnable",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "fogenable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Allows or prevents the object associated with objID from being affected by the fog.",
        "notes": "Defaults to true."
    },
    {
        "name": "ObjRender_SetPermitCamera",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "permitcamera",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Determines whether the object associated with objID is affected by the 2D camera.",
        "notes": "If set to false, the object will not be affected by the camera regardless of render priority."
    },
    {
        "name": "ObjPrim_Create",
        "arguments": [
            {
                "name": "objtype",
                "type": "const"
            }
        ],
        "return": {
            "name": "object ID of new primitive object",
            "type": "number (Object ID)"
        },
        "description": "Creates a Primitive object and returns its ID.",
        "notes": "Object types are:\n\nOBJ_PRIMITIVE_2D (primitive (triangle) in the 2D space)\n\nOBJ_SPRITE_2D (rectangle in the 2D space (usable by the ObjSprite2D_ functions))\n\nOBJ_SPRITE_LIST_2D (list of rectangles in the 2D space (usable by the ObjSpriteList2D_ functions))\n\nOBJ_PRIMITIVE_3D (primitive (triangle) in the 3D space)\n\nOBJ_SPRITE_3D (rectangle in the 3D space (usable by the ObjSprite3D_ functions))"
    },
    {
        "name": "ObjPrim_SetPrimitiveType",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "primitivetype",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets the vertex layout for the object associated with objID.",
        "notes": "Primitive Types are:\n\nPRIMITIVE_TRIANGLELIST, PRIMITIVE_TRIANGLESTRIP, PRIMITIVE_TRIANGLEFAN, PRIMITIVE_LINELIST (undocumented), PRIMITIVE_LINESTRIP (undocumented), and PRIMITIVE_POINT_LIST (undocumented)."
    },
    {
        "name": "ObjPrim_SetVertexCount",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "vertexcount",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the number of vertices the object associated with objID contains.",
        "notes": ""
    },
    {
        "name": "ObjPrim_GetVertexCount",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "the number of vertices the object associated with objID contains",
            "type": "number (int)"
        },
        "description": "Returns the number of vertices the object associated with objID contains.",
        "notes": ""
    },
    {
        "name": "ObjPrim_SetTexture",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "texpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Sets the specified texture on the object associated with objID.",
        "notes": "Loads the texture file if it has not already been loaded."
    },
    {
        "name": "ObjPrim_SetVertexPosition",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "vertexindex",
                "type": "number (int)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "zcoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the position of the specified vertex for the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjPrim_GetVertexPosition",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "vertexindex",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "coordinates of the specified vertex",
            "type": "number []"
        },
        "description": "Returns the position of the specified vertex in an array",
        "notes": "Return format is [x, y, z]."
    },
    {
        "name": "ObjPrim_SetVertexUV",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "vertexindex",
                "type": "number (int)"
            },
            {
                "name": "texturex",
                "type": "number"
            },
            {
                "name": "texturey",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the UV coordinates for the specified vertex for the object associated with objID.",
        "notes": "The value for the coordinates must be in the range (0.0-1.0).\n\nFor instance, if you want a vertex to be at the center-top of a 512*512 texture, you have to set x to 0.5 and y to 1.0.\n\nAs it may be troublesome to convert pixels into a 0.0-1.0 value, ObjPrim_SetVertexUVT is recommended."
    },
    {
        "name": "ObjPrim_SetVertexUVT",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "vertexindex",
                "type": "number (int)"
            },
            {
                "name": "texturex",
                "type": "number"
            },
            {
                "name": "texturey",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the UV coordinates for the specified vertex for the object associated with objID.",
        "notes": "You must set the object's texture using ObjPrim_SetTexture beforehand."
    },
    {
        "name": "ObjPrim_SetVertexAlpha",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "vertexindex",
                "type": "number (int)"
            },
            {
                "name": "alpha",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the alpha of the specified vertex on a 0-255 scale.",
        "notes": ""
    },
    {
        "name": "ObjSprite2D_SetSourceRect",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "texleftcoord",
                "type": "number"
            },
            {
                "name": "textopcoord",
                "type": "number"
            },
            {
                "name": "texrightcoord",
                "type": "number"
            },
            {
                "name": "texbottomcoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the texture rectangle for the sprite. This is the rectangle on the original texture from which the sprite will be drawn.",
        "notes": ""
    },
    {
        "name": "ObjSprite2D_SetDestCenter",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Sets the drawing rectangle for the sprite by mapping the center of the source rectangle to (0, 0).",
        "notes": "For instance, if the rectangle set with ObjSprite2D_SetSourceRect is (24, 32, 48, 46) (which is 24 wide and 14 high), the destination rectangle becomes (-12, -7, 12, 7)."
    },
    {
        "name": "ObjSpriteList2D_SetDestCenter",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Sets the drawing rectangle for the next sprite to be added by mapping the center of the source rectangle to (0, 0).",
        "notes": "For instance, if the rectangle set with ObjSprite2D_SetSourceRect is (24, 32, 48, 46) (which is 24 wide and 14 high), the destination rectangle becomes (-12, -7, 12, 7)."
    },
    {
        "name": "ObjSpriteList2D_AddVertex",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Adds a sprite vertex to the specified object; the current sprite is finalized and added to the list to be drawn.",
        "notes": "After using this function, using functions to modify the 2D sprite list object will target the next sprite to be added."
    },
    {
        "name": "ObjSpriteList2D_CloseVertex",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Finalizes the object by preventing more sprites from being added to the list to be drawn.",
        "notes": "After using this function, using ObjRender_ functions to transform coordinates (e.g. position, angle, scale, etc) will affect all added sprites in the 2D sprite list as a group."
    },
    {
        "name": "ObjSpriteList2D_ClearVertexCount",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Clears the sprite vertices for the specified object; removes all of the sprites previously added.",
        "notes": ""
    },
    {
        "name": "ObjSprite3D_SetBillboard",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "billboard",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets the billboard toggle for the sprite.",
        "notes": "If set to true, the object associated with objID will always be facing the camera."
    },
    {
        "name": "ObjMesh_Create",
        "arguments": [],
        "return": {
            "name": "object ID of new mesh object",
            "type": "number (Object ID)"
        },
        "description": "Creates a 3D mesh object and returns its ID.",
        "notes": ""
    },
    {
        "name": "ObjMesh_Load",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "meshpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Loads a 3D mesh file into the mesh object associated with objID.",
        "notes": "Supported Mesh file types are either .mqo (Metasequoia) or .elem (Elfreina)."
    },
    {
        "name": "ObjMesh_SetAlpha",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "alpha",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the alpha of the mesh object associated with objID on a 0-255 scale.",
        "notes": ""
    },
    {
        "name": "ObjMesh_SetAnimation",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "animname",
                "type": "string"
            },
            {
                "name": "animframe",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the animation of the mesh object associated with objID.\n\nThe animation frame of the specified animation name is drawn.",
        "notes": ""
    },
    {
        "name": "ObjMesh_SetCoordinate2D",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "2dcoord",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "When set to true, allows the mesh object associated with objID to be positioned using 2D coordinates.",
        "notes": ""
    },
    {
        "name": "ObjText_Create",
        "arguments": [],
        "return": {
            "name": "object ID of new text object",
            "type": "number (Object ID)"
        },
        "description": "Creates a text object and returns its ID.",
        "notes": ""
    },
    {
        "name": "ObjText_SetText",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "text",
                "type": "string"
            }
        ],
        "return": {},
        "description": "Assigns the provided text string to the text object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjText_SetFontType",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "fontname",
                "type": "string"
            }
        ],
        "return": {},
        "description": "Sets the font associated with the fontname to the text object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjText_SetFontSize",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "fontsize",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the size of the font for the text object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjText_SetFontBold",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "bold",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "If set to true, the text will be displayed in bold characters.",
        "notes": ""
    },
    {
        "name": "ObjText_SetFontBorderWidth",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "borderwidth",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the width of the font border for the text object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjText_SetFontBorderType",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "bordertype",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the type of the font border for the text object associated with objID.",
        "notes": "Border types are:\n\nBORDER_NONE (no border)\n\nBORDER_FULL (full border)\n\nBORDER_SHADOW (shadow at bottom right of text)"
    },
    {
        "name": "ObjText_SetMaxWidth",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "maxwidth",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the maximum width of the text object associated with objID.",
        "notes": "The text will automatically create a new line whenever needed.\n\nNote that font width changes depending on the rendering system, and that fonts will render differently on different platforms."
    },
    {
        "name": "ObjText_SetMaxHeight",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "maxheight",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the maximum height of the text object associated with objID.",
        "notes": "Any part of the text exceeding this height will not be drawn."
    },
    {
        "name": "ObjText_SetLinePitch",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "linepitch",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the line pitch (space between lines) of the text object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjText_SetSidePitch",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "sidepitch",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the side pitch (space between characters) of the text object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjText_SetTransCenter",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the given coordinates as the transformation center of the text object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjText_SetAutoTransCenter",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "autocenter",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "When true, sets the center of the text object associated with objID as its transformation center.",
        "notes": "Default is true."
    },
    {
        "name": "ObjText_SetHorizontalAlignment",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "alignment",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the alignment of the text object associated with objID.",
        "notes": "Defaults to ALIGNMENT_LEFT.\n\nHorizontal Alignments are:\n\nALIGNMENT_LEFT, ALIGNMENT_CENTER, and ALIGNMENT_RIGHT.\n\nTo use center or right aligned text, you have to set the maximum width using ObjText_SetMaxWidth (in order to know where the right border is)."
    },
    {
        "name": "ObjText_SetSyntacticAnalysis",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enabled",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Allows or prevents checking for the existence of bracket tags (such as line break or ruby text) within the text for the text object associated with objID.",
        "notes": "Defaults to true"
    },
    {
        "name": "ObjText_GetTextLength",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "text length",
            "type": "number"
        },
        "description": "Returns the length of the specified text object associated with objID.",
        "notes": "When using Japanese characters, a half-width character counts as 1 and a full-width character counts as 2 characters."
    },
    {
        "name": "ObjText_GetTextLengthCU",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "text length",
            "type": "number"
        },
        "description": "Returns the length of the specified text object associated with objID.",
        "notes": "Newlines and ruby text are not counted when using this function, unlike with ObjText_GetTextLength.\n\nWhen using Japanese characters, a half-width character counts as 1 and a full-width character counts as 2 characters."
    },
    {
        "name": "ObjText_GetTextLengthCUL",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "array of text lengths",
            "type": "number []"
        },
        "description": "Returns an array of the lengths of each line of the specified text object associated with objID.",
        "notes": "Newlines and ruby text are not counted when using this function.\n\nWhen using Japanese characters, a half-width character counts as 1 and a full-width character counts as 2 characters."
    },
    {
        "name": "ObjText_GetTotalWidth",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "width of rendered text",
            "type": "number"
        },
        "description": "Returns the overall width of all lines of the text object associated with objID.",
        "notes": "Platform dependent."
    },
    {
        "name": "ObjText_GetTotalHeight",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "height of rendered text",
            "type": "number"
        },
        "description": "Returns the combined height of all lines of the text object associated with objID.",
        "notes": "This function's behavior appears to depend only on the number of newlines, as opposed to the number of lines actually displayed with word wrapping taken into account."
    },
    {
        "name": "ObjShader_Create",
        "arguments": [],
        "return": {
            "name": "object ID of new shader object",
            "type": "number (Object ID)"
        },
        "description": "Creates a shader object and returns its ID.",
        "notes": ""
    },
    {
        "name": "ObjShader_SetShaderF",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "shaderfile",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "true if successly set; false otherwise",
            "type": "bool"
        },
        "description": "Sets the path to the HLSL source for the shader object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjShader_SetShaderO",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "shaderID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "true if successly set; false otherwise",
            "type": "bool"
        },
        "description": "Applies the shader linked to the shader object associated with shaderID to the render object associated with objID.",
        "notes": "Does not work with text objects, but you can render one to a render target."
    },
    {
        "name": "ObjShader_ResetShader",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Terminates application of all shaders to the render object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjShader_SetTechnique",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "technique",
                "type": "string"
            }
        ],
        "return": {},
        "description": "Sets the technique that you want to run on the shader linked to the shader object associated with shaderID.",
        "notes": ""
    },
    {
        "name": "ObjShader_SetVector",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "paramID",
                "type": "string"
            },
            {
                "name": "float4x",
                "type": "number"
            },
            {
                "name": "float4y",
                "type": "number"
            },
            {
                "name": "float4z",
                "type": "number"
            },
            {
                "name": "float4w",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets a float4 parameter in the shader linked to the shader object associated with shaderID.",
        "notes": ""
    },
    {
        "name": "ObjShader_SetFloat",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "paramID",
                "type": "string"
            },
            {
                "name": "floatval",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets a float parameter in the shader linked to the shader object associated with shaderID.",
        "notes": ""
    },
    {
        "name": "ObjShader_SetFloatArray",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "paramID",
                "type": "string"
            },
            {
                "name": "floatarr",
                "type": "number []"
            }
        ],
        "return": {},
        "description": "Sets a float array parameter in the shader linked to the shader object associated with shaderID.",
        "notes": ""
    },
    {
        "name": "ObjShader_SetTexture",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "paramID",
                "type": "string"
            },
            {
                "name": "filepath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Sets a texture parameter, using the path to the appropriate image, in the shader linked to the shader object associated with shaderID.",
        "notes": "You can call multiple textures."
    },
    {
        "name": "ObjSound_Create",
        "arguments": [],
        "return": {
            "name": "object ID of new sound object",
            "type": "number (Object ID)"
        },
        "description": "Creates a sound object and returns its ID.",
        "notes": ""
    },
    {
        "name": "ObjSound_Load",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "filepath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Loads the specified sound file and associates it with the sound object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjSound_Play",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Plays the sound file associated with the sound object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjSound_Stop",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Stops the sound file associated with the sound object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjSound_SetVolumeRate",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "volume",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the volume of the sound object associated with objID, on a 0-100 scale.",
        "notes": ""
    },
    {
        "name": "ObjSound_SetPanRate",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "panvolume",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the pan volume of the sound object associated with objID, on a -100-100 scale.",
        "notes": "0 is neutral, -100 is left-side only, 100 is right-side only."
    },
    {
        "name": "ObjSound_SetFade",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "fade",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the fade time of the sound object associated with objID.",
        "notes": "Fade value is how much the volume will decrease per second."
    },
    {
        "name": "ObjSound_SetLoopEnable",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether the sound object associated with objID will loop.",
        "notes": ""
    },
    {
        "name": "ObjSound_SetLoopTime",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "loopstart",
                "type": "number"
            },
            {
                "name": "loopend",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the timing of the loop of the sound object associated with objID, in seconds.",
        "notes": "Sound Object will play to end of track or loopend, whichever comes first, then loop back to loopstart."
    },
    {
        "name": "ObjSound_SetLoopSampleCount",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "loopsamplestart",
                "type": "number"
            },
            {
                "name": "loopsampleend",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the timing of the loop of the sound object associated with objID, using the sample count.",
        "notes": "Sound Object will play to end of track or loopsampleend, whichever comes first, then loop back to loopsamplestart."
    },
    {
        "name": "ObjSound_SetRestartEnable",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "When set to true, allows the sound object associated with objID to continue where it left off instead of restarting every time ObjSound_Play is called.",
        "notes": "This function is renamed top ObjSound_SetResumeEnable in ph3sx, leaving this name defunct in that engine. Only use this variant in vanilla ph3."
    },
    {
        "name": "ObjSound_SetSoundDivision",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "soundtype",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Specifies whether the sound object associated with objID is a BGM or Sound Effect.",
        "notes": "Values for soundtype are SOUND_BGM and SOUND_SE."
    },
    {
        "name": "ObjSound_IsPlaying",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "true if currently playing; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the sound object associated with objID is playing its associated sound file.",
        "notes": ""
    },
    {
        "name": "ObjSound_GetVolumeRate",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "volume rate of sound object associated with objID",
            "type": "number"
        },
        "description": "Returns the volume of the sound object associated with objID, on a 0-100 scale.",
        "notes": ""
    },
    {
        "name": "ObjFile_Create",
        "arguments": [
            {
                "name": "objtype",
                "type": "const"
            }
        ],
        "return": {
            "name": "object ID of new file object",
            "type": "number (Object ID)"
        },
        "description": "Creates a file object and returns its ID.",
        "notes": "File Object types are OBJ_FILE_TEXT for text files and OBJ_FILE_BINARY for binary files."
    },
    {
        "name": "ObjFile_Open",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "filepath",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "true on success; false otherwise",
            "type": "bool"
        },
        "description": "Opens a file for reading with the specified file path and binds the file object associated with objID to the opened file.",
        "notes": "If this function is used for another file or the object is deleted, the file specified in the filepath is closed."
    },
    {
        "name": "ObjFile_OpenNW",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "filepath",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "true on success; false otherwise",
            "type": "bool"
        },
        "description": "Opens a file for reading and writing with the specified file path and binds the file object associated with objID to the opened file.",
        "notes": "If this function is used for another file or the object is deleted, the file specified in the filepath is closed.\n\nIf the directory of the specified path does not exist, it will be created.\n\nThe only paths that can be specified are those under the th_dnh.exe directory."
    },
    {
        "name": "ObjFile_Store",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Saves a file previously opened with ObjFile_OpenNW.",
        "notes": "Must be called once after writing the data."
    },
    {
        "name": "ObjFile_GetSize",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "file size of specified file object",
            "type": "number"
        },
        "description": "Returns the file size of specified file object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjFileT_GetLineCount",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "number of lines in the text file",
            "type": "number"
        },
        "description": "Returns the number of lines in the text file bound to the file object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjFileT_GetLineText",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "lineindex",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "contents of specified line",
            "type": "string"
        },
        "description": "Returns the character string of the specified line in the text file.",
        "notes": "Lines are 1-indexed rather than 0-indexed."
    },
    {
        "name": "ObjFileT_AddLine",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "linetoadd",
                "type": "string"
            }
        ],
        "return": {},
        "description": "Prepare to write the specified linetoadd character string as one line at the end of the text file.",
        "notes": "Must use ObjFile_Store to actually write to the file on disk; this function only writes to the file object."
    },
    {
        "name": "ObjFileT_ClearLine",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Clear the line added by ObjFileT_AddLine.",
        "notes": "TODO: Does this clear the last line added or ALL lines added but not yet written to disk?"
    },
    {
        "name": "ObjFileT_SplitLineText",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "lineindex",
                "type": "number (int)"
            },
            {
                "name": "delimiter",
                "type": "string"
            }
        ],
        "return": {
            "name": "specified line in file delimited by delimiter",
            "type": "string []"
        },
        "description": "Returns a character string array obtained by dividing the specified line of the text file by the specified delimiter character.",
        "notes": "Lines are 1-indexed rather than 0-indexed."
    },
    {
        "name": "ObjFileB_SetByteOrder",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "byteorder",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the Byte Order of the file bound to the file object associated with objID.",
        "notes": "Defaults to ENDIAN_LITTLE.\n\nPossible byteorder values are ENDIAN_LITTLE for Little Endian and ENDIAN_BIG for Big Endian."
    },
    {
        "name": "ObjFileB_SetCharacterCode",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "charcode",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the Character Code of the file bound to the file object associated with objID.",
        "notes": "Necessary for reading file contents with ObjFileB_ReadString.\n\nDefaults to CODE_ACP.\n\nPossible character codes supported by Danmakufu are:\n\nCODE_ACP (ANSI/Shift-JIS), CODE_UTF8 (UTF-8), CODE_UTF16LE (UTF-16 Little Endian), and CODE_UTF16BE (UTF-16 Big Endian)."
    },
    {
        "name": "ObjFileB_GetPointer",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "position of current file pointer",
            "type": "number (int)"
        },
        "description": "Returns the position of the current file pointer.",
        "notes": ""
    },
    {
        "name": "ObjFileB_Seek",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "filepointer",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the position of the current file pointer.",
        "notes": ""
    },
    {
        "name": "ObjFileB_ReadString",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "bytestoread",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "next bytestoread bytes",
            "type": "string"
        },
        "description": "Given a specified number of bytes to read, reads a string from file and returns the string.",
        "notes": "The file pointer advances by the specified number of bytestoread.\n\nDue to a bug, this function will never return any characters outside of Shift-JIS."
    },
    {
        "name": "ObjMove_SetX",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the x coordinate of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjMove_SetY",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "ycoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the y coordinate of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjMove_SetPosition",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the x and y coordinates of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjMove_SetDestAtSpeed",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "speed",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Moves the object associated with objID towards the given coordinates at the speed specified.",
        "notes": ""
    },
    {
        "name": "ObjMove_SetDestAtWeight",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "weight",
                "type": "number"
            },
            {
                "name": "maxspeed",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Moves the object associated with objID towards the given coordinates. It will slow down near the end of the movement based on the weight specified.",
        "notes": ""
    },
    {
        "name": "ObjMove_AddPatternA1",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            },
            {
                "name": "speed",
                "type": "number"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "After the specified number of frames, changes the speed and angle of the object associated with objID.",
        "notes": "NO_CHANGE can be used to preserve the original speed or angle."
    },
    {
        "name": "ObjMove_AddPatternB1",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            },
            {
                "name": "xspeed",
                "type": "number"
            },
            {
                "name": "yspeed",
                "type": "number"
            }
        ],
        "return": {},
        "description": "After the specified number of frames, changes the x and y speeds of the object associated with objID.",
        "notes": "NO_CHANGE can be used to preserve the original x or y speeds."
    },
    {
        "name": "ObjMove_AddPatternB2",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            },
            {
                "name": "xspeed",
                "type": "number"
            },
            {
                "name": "yspeed",
                "type": "number"
            },
            {
                "name": "xaccel",
                "type": "number"
            },
            {
                "name": "yaccel",
                "type": "number"
            },
            {
                "name": "xspeedmax",
                "type": "number"
            },
            {
                "name": "yspeedmax",
                "type": "number"
            }
        ],
        "return": {},
        "description": "After the specified number of frames, changes the x and y speeds, accelerations, and maximum/minimum speeds of the object associated with objID.",
        "notes": "NO_CHANGE can be used to preserve the original x or y speeds, accelerations, and maximum/minimum speeds."
    },
    {
        "name": "ObjMove_AddPatternB3",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            },
            {
                "name": "xspeed",
                "type": "number"
            },
            {
                "name": "yspeed",
                "type": "number"
            },
            {
                "name": "xaccel",
                "type": "number"
            },
            {
                "name": "yaccel",
                "type": "number"
            },
            {
                "name": "xspeedmax",
                "type": "number"
            },
            {
                "name": "yspeedmax",
                "type": "number"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "After the specified number of frames, changes the x and y speeds, accelerations, maximum/minimum speeds, and bullet graphic of the object associated with objID.",
        "notes": "NO_CHANGE can be used to preserve the original x or y speeds, accelerations, maximum/minimum speeds, and bullet graphic."
    },
    {
        "name": "ObjMove_GetX",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "x coordinate of the object associated with objID",
            "type": "number"
        },
        "description": "Returns the x coordinate of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjMove_GetY",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "y coordinate of the object associated with objID",
            "type": "number"
        },
        "description": "Returns the y coordinate of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjMove_GetSpeed",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "speed of the object associated with objID",
            "type": "number"
        },
        "description": "Returns the speed of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjMove_GetAngle",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "angle of the object associated with objID",
            "type": "number (degrees)"
        },
        "description": "Returns the angle of the object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjEnemy_Create",
        "arguments": [
            {
                "name": "objtype",
                "type": "const"
            }
        ],
        "return": {
            "name": "object ID of new enemy object",
            "type": "number (Object ID)"
        },
        "description": "Creates an enemy object and returns its ID.",
        "notes": "Enemy Object types are OBJ_ENEMY for standard enemies and OBJ_ENEMY_BOSS for boss enemies.\n\nIn order to draw the enemy object and have it listed as an existing enemy, you have to register it using ObjEnemy_Regist.\n\nIf you want to create a boss enemy object, you have to create a boss scene object first."
    },
    {
        "name": "ObjEnemy_Regist",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Activates the enemy object associated with objID.",
        "notes": "Required to utilize created enemy objects."
    },
    {
        "name": "ObjEnemy_SetLife",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "life",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the life points of the enemy object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjEnemy_AddLife",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "life",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Adds the provided life points to the life points of the enemy object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjEnemy_SetDamageRate",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "shotrate",
                "type": "number"
            },
            {
                "name": "bombrate",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the damage rate of player attacks against the enemy object associated with objID.",
        "notes": "Setting to 0 will cause the enemy to take no damage\n\nDefaults to 100 (100%).\n\nValues above 100 are possible.\n\nValues below 0 are also possible, but may cause the boss health to overflow."
    },
    {
        "name": "ObjEnemy_SetIntersectionCircleToShot",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "radius",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the position and radius of the player shot collision hitbox of the enemy object associated with objID.",
        "notes": "Any attack from the player colliding with the circle will damage the enemy."
    },
    {
        "name": "ObjEnemy_SetIntersectionCircleToPlayer",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "radius",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the position and radius of the player collision hitbox of the enemy object associated with objID.",
        "notes": "Any collision with the circle will kill the character."
    },
    {
        "name": "ObjEnemyBossScene_Create",
        "arguments": [],
        "return": {
            "name": "object ID of new boss scene object",
            "type": "number (Object ID)"
        },
        "description": "Creates a boss scene object and returns its ID.",
        "notes": ""
    },
    {
        "name": "ObjEnemyBossScene_Regist",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Starts the boss scene object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjEnemyBossScene_Add",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "phasestep",
                "type": "number (int)"
            },
            {
                "name": "scriptpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Adds the specific Single script to the boss scene object associated with objID at the specified phase step.",
        "notes": "Phase steps are 0 indexed."
    },
    {
        "name": "ObjEnemyBossScene_LoadInThread",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Compiles all the enemy scripts in the boss scene object associated with objID and initializes global variables.",
        "notes": "As the length of compile time cannot be guaranteed, initialize all global variables besides constants in @Initialize."
    },
    {
        "name": "ObjEnemyBossScene_SetSpellTimer",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "timer",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the spell timer in the boss scene object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjEnemyBossScene_StartSpell",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Starts a boss spell card in the boss scene object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjShot_Create",
        "arguments": [
            {
                "name": "objtype",
                "type": "const"
            }
        ],
        "return": {
            "name": "object ID of new shot object",
            "type": "number (Object ID)"
        },
        "description": "Creates a shot object and returns its ID.",
        "notes": "Shot Object types are: OBJ_SHOT, OBJ_LOOSE_LASER, OBJ_STRAIGHT_LASER, and OBJ_CURVE_LASER.\n\nIn order to draw and fire the shot object and have it listed as an existing bullet, you have to register it using ObjShot_Regist."
    },
    {
        "name": "ObjShot_Regist",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Activates the shot object associated with objID, firing it.",
        "notes": ""
    },
    {
        "name": "ObjShot_SetAutoDelete",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "autodelete",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Enables or disables auto-deletion of the shot object associated with objID when outside of the screen boundaries.",
        "notes": "Defaults to true."
    },
    {
        "name": "ObjShot_FadeDelete",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Fades out the shot object associated with objID and deletes it.",
        "notes": ""
    },
    {
        "name": "ObjShot_SetDeleteFrame",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frames",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Deletes the shot object associated with objID after the specified number of frames.",
        "notes": ""
    },
    {
        "name": "ObjShot_SetDelay",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frames",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Delays the shot object associated with objID, firing it after the specified number of frames.",
        "notes": "Bullets will glow to announce delay; lasers will be shown very thin."
    },
    {
        "name": "ObjShot_SetSpellResist",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "spellresist",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "When set to true, the shot object associated with objID will not be deleted by the player's bomb.",
        "notes": "Defaults to false"
    },
    {
        "name": "ObjShot_SetGraphic",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Gives the shot object associated with objID the specified graphic.",
        "notes": ""
    },
    {
        "name": "ObjShot_SetSourceBlendType",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "blendtype",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Gives the shot object associated with objID the specified blend type.",
        "notes": "Available blend types are:\n\nBLEND_ALPHA, BLEND_ADD_RGB, BLEND_MULTIPLY, BLEND_SUBTRACT, BLEND_ADD_ARGB, BLEND_INV_DESTRGB, and BLEND_SHADOW (undocumented)."
    },
    {
        "name": "ObjShot_SetDamage",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "damage",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the damage of the shot object associated with objID.",
        "notes": "Player shots only."
    },
    {
        "name": "ObjShot_SetPenetration",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "penetration",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the penetration of the shot object associated with objID.",
        "notes": "The shot object can hit enemies as many times as the penetration value before being deleted.\n\nPlayer shots only."
    },
    {
        "name": "ObjShot_SetEraseShot",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "erase",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Enables/disables the ability to erase enemy shots when the shot object associated with objID comes into contact with it.",
        "notes": "Each time a shot is erased, the penetration of the shot object will go down by 1.\n\nPlayer shots only."
    },
    {
        "name": "ObjShot_SetSpellFactor",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether or not to use the spell damage factor for the shot object associated with objID.",
        "notes": "Player shots only."
    },
    {
        "name": "ObjShot_ToItem",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Turns the shot object associated with objID into an item.",
        "notes": ""
    },
    {
        "name": "ObjShot_AddShotA1",
        "arguments": [
            {
                "name": "sourceID",
                "type": "number (Object ID)"
            },
            {
                "name": "targetID",
                "type": "number (Object ID)"
            },
            {
                "name": "addframe",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "At the specified frame, spawns the target shot object at the source shot object's position.",
        "notes": ""
    },
    {
        "name": "ObjShot_AddShotA2",
        "arguments": [
            {
                "name": "sourceID",
                "type": "number (Object ID)"
            },
            {
                "name": "targetID",
                "type": "number (Object ID)"
            },
            {
                "name": "addframe",
                "type": "number (int)"
            },
            {
                "name": "distance",
                "type": "number"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "At the specified frame, spawns the target shot object at the specified distance and angle from the source shot object's position.",
        "notes": ""
    },
    {
        "name": "ObjShot_SetIntersectionCircleA1",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "radius",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Creates a hitbox of specified radius for collision detection of the shot object associated with objID.",
        "notes": "In order to maintain the hitbox, it must be set every frame.\n\nThere can be multiple hitboxes set for one shot object."
    },
    {
        "name": "ObjShot_SetIntersectionCircleA2",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "radius",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Creates a hitbox of specified radius for collision detection of the shot object associated with objID at the specified position on the screen.",
        "notes": "In order to maintain the hitbox, it must be set every frame.\n\nThere can be multiple hitboxes set for one shot object."
    },
    {
        "name": "ObjShot_SetIntersectionLine",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "startxcoord",
                "type": "number"
            },
            {
                "name": "startycoord",
                "type": "number"
            },
            {
                "name": "endxcoord",
                "type": "number"
            },
            {
                "name": "endycoord",
                "type": "number"
            },
            {
                "name": "width",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Creates a line segment hitbox between the specified coordinates for collision detection of the shot object associated with objID.",
        "notes": "In order to maintain the hitbox, it must be set every frame.\n\nThere can be multiple hitboxes set for one shot object."
    },
    {
        "name": "ObjShot_SetIntersectionEnable",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether collision detection of the shot object associated with objID will be checked.",
        "notes": "If set to false, the shot object will have no collision detection.\n\nDefaults to true."
    },
    {
        "name": "ObjShot_SetItemChange",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether the shot object associated with objID will turn into an item when deleted.",
        "notes": "If set to false, the shot object will not turn into an item.\n\nDefaults to true."
    },
    {
        "name": "ObjShot_GetDamage",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "damage of shot object associated with objID",
            "type": "number"
        },
        "description": "Returns the damage of the shot object associated with objID.",
        "notes": "Player shots only."
    },
    {
        "name": "ObjShot_GetPenetration",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "penetration of shot object associated with objID",
            "type": "number (int)"
        },
        "description": "Returns the penetration of the shot object associated with objID.",
        "notes": "Player shots only."
    },
    {
        "name": "ObjShot_GetDelay",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "delay of shot object associated with objID",
            "type": "number (int)"
        },
        "description": "Returns the delay of the shot object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjShot_IsSpellResist",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "true if shot object associated with objID is spell resistant; false otherwise",
            "type": "bool"
        },
        "description": "Returns whether the shot object associated with objID can be deleted by a player bomb.",
        "notes": ""
    },
    {
        "name": "ObjShot_GetImageID",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "graphic ID of shot object associated with objID",
            "type": "bool"
        },
        "description": "Returns the graphic ID of the shot object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjLaser_SetLength",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "length",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the length of the laser object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjLaser_SetRenderWidth",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "width",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the render width of the laser object associated with objID.",
        "notes": "This value is different from the intersection width."
    },
    {
        "name": "ObjLaser_SetIntersectionWidth",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "width",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the intersection (collision) width of the laser object associated with objID.",
        "notes": "This value is different from the render width.\n\nThis can be set to be larger than the laser object's render width."
    },
    {
        "name": "ObjLaser_SetGrazeInvalidFrame",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "ginvframe",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Specify the number of frames after a graze where graze is not counted for the laser object associated with objID.",
        "notes": "If you specify 0, the laser object can be grazed only once.\n\nThe default value is 20 frames (3 graze/second)."
    },
    {
        "name": "ObjLaser_SetItemDistance",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "interval",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the item occurrence interval when the laser object associated with objID is deleted and changed into items.",
        "notes": ""
    },
    {
        "name": "ObjLaser_GetLength",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "length of laser object associated with objID",
            "type": "number"
        },
        "description": "Returns the length of the laser object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjLaser_GetRenderWidth",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "render width of laser object associated with objID",
            "type": "number"
        },
        "description": "Returns the render width of the laser object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjLaser_GetIntersectionWidth",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "intersection width of laser object associated with objID",
            "type": "number"
        },
        "description": "Returns the intersection width of the laser object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjStLaser_SetAngle",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "Sets the angle at which the straight laser object associated with objID will point.",
        "notes": "This value is different from the movement angle."
    },
    {
        "name": "ObjStLaser_GetAngle",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "angle of straight laser object associated with objID",
            "type": "number"
        },
        "description": "Returns the angle of the straight laser object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjStLaser_SetSource",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether the light source at the base of the straight laser object associated with objID is drawn.",
        "notes": "Defaults to true."
    },
    {
        "name": "ObjCrLaser_SetTipDecrement",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "reductionrate",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the transparency reduction rate at the tip of the curve laser object associated with objID.",
        "notes": "Default is 1.0 (tip of laser is invisible)."
    },
    {
        "name": "ObjItem_SetItemID",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "itemID",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the ID of the item object associated with objID, as defined in the item definition script.",
        "notes": ""
    },
    {
        "name": "ObjItem_SetRenderScoreEnable",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether a score indicator will be displayed when the item object associated with objID is collected.",
        "notes": "This is the score given as argument to the CreateItem() functions."
    },
    {
        "name": "ObjItem_SetAutoCollectEnable",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether the item object associated with objID will be pulled towards the player when the player moves past the point of auto-collection.",
        "notes": ""
    },
    {
        "name": "ObjItem_SetDefinedMovePatternA1",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "movetype",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the movement type of the item object associated with objID.",
        "notes": "Defaults to flying upwards and then coming down.\n\nMovement types are ITEM_MOVE_DOWN (immediately drops down) and ITEM_MOVE_TOPLAYER (automatically flies towards the player)."
    },
    {
        "name": "ObjPlayer_AddIntersectionCircleA1",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "hitboxradius",
                "type": "number"
            },
            {
                "name": "grazeradius",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Creates a hitbox of specified radius for collision detection of the player object associated with objID.",
        "notes": "Coordinates are relative to player object associated with objID.\n\nThe graze area extends the specified radius around the hitbox (the true graze radius is the sum of the two).\n\nThe hitbox will remain valid for every frame once created."
    },
    {
        "name": "ObjPlayer_AddIntersectionCircleA2",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "grazeradius",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Creates a grazebox of specified radius for the player object associated with objID.",
        "notes": "Coordinates are relative to player object associated with objID.\n\nThe grazebox will remain valid for every frame once created."
    },
    {
        "name": "ObjPlayer_ClearIntersection",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Deletes all hitboxes of the player object associated with objID.",
        "notes": ""
    },
    {
        "name": "ObjCol_IsIntersected",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "true if object associated with objID is currently intersecting with another object; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the object associated with objID is currently intersecting with another object.",
        "notes": ""
    },
    {
        "name": "ObjCol_GetListOfIntersectedEnemyID",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "array of all enemy object IDs that the object associated with objID is currently intersecting",
            "type": "number (Object ID) []"
        },
        "description": "Returns an array of all enemy object IDs that the object associated with objID is currently intersecting with.",
        "notes": ""
    },
    {
        "name": "ObjCol_GetIntersectedCount",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "number of times the object associated with objID intersected with other objects during previous frame",
            "type": "number (int)"
        },
        "description": "Returns the number of times the object associated with objID intersected with other objects during the previous frame.",
        "notes": "This can be used to determine how many player shots have collided with an enemy."
    },


    {
        "name": "__DEBUG_BREAK",
        "arguments": [],
        "return": {},
        "description": "Triggers a debug break. For developers.",
        "notes": "ph3sx function."
    },
    {
        "name": "wait",
        "arguments": [
            {
                "name": "frame",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Pauses the execution for the given amount of frames.",
        "notes": "ph3sx function.\n\nMuch faster than loop(n){yield;}"
    },
    {
        "name": "typeof",
        "arguments": [
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {
            "name": "type of value",
            "type": "type (int)"
        },
        "description": "Returns the type of the given value.",
        "notes": "ph3sx function.\n\nExample:\n-60i -> VAR_INT\n920 -> VAR_FLOAT\nfalse -> VAR_BOOL\n\"str\" -> VAR_STRING\n[8, 0, 2] -> VAR_ARRAY"
    },
    {
        "name": "ftypeof",
        "arguments": [
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {
            "name": "root type of value",
            "type": "type (int)"
        },
        "description": "Returns the root type of the given value.",
        "notes": "ph3sx function.\n\nExample:\n920 -> VAR_FLOAT\nfalse -> VAR_BOOL\n\"str\" -> VAR_CHAR\n[8, 0, 2] -> VAR_FLOAT\n[[[\"a\"]]] -> VAR_CHAR"
    },
    {
        "name": "resize",
        "arguments": [
            {
                "name": "array",
                "type": "free []"
            },
            {
                "name": "newsize",
                "type": "number (int)"
            },
            {
                "name": "fillvalue",
                "type": "free (optional overload)"
            }
        ],
        "return": {
            "name": "resized array",
            "type": "free []"
        },
        "description": "Resizes the given array.",
        "notes": "ph3sx function.\n\nThe array must not be a null array.\n\nIf the new size is larger than the old size, newly inserted elements will be assigned the fill value.\nUnless the array is a null array, the fill value's type must be convertible to the array's element type."
    },
    {
        "name": "insert",
        "arguments": [
            {
                "name": "array",
                "type": "free []"
            },
            {
                "name": "insertposition",
                "type": "number (int)"
            },
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {
            "name": "array with the given value inserted at the specified insertposition",
            "type": "free []"
        },
        "description": "Inserts the given value into the given position of the array.",
        "notes": "ph3sx function.\n\nInsertion method is \"insert-before\"."
    },
    {
        "name": "contains",
        "arguments": [
            {
                "name": "array",
                "type": "free []"
            },
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {
            "name": "true of value exists in array; false otherwise",
            "type": "bool"
        },
        "description": "Checks if the given value is present as an element of the given array.",
        "notes": "ph3sx function."
    },
    {
        "name": "replace",
        "arguments": [
            {
                "name": "array",
                "type": "free []"
            },
            {
                "name": "value",
                "type": "free"
            },
            {
                "name": "newvalue",
                "type": "free"
            }
        ],
        "return": {
            "name": "array with all occurences of the specified value replaced with newvalue",
            "type": "free []"
        },
        "description": "Replaces all occurences of the given element with the other in the array.",
        "notes": "ph3sx function."
    },
    {
        "name": "remove",
        "arguments": [
            {
                "name": "array",
                "type": "free []"
            },
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {
            "name": "array with all occurences of the specified value removed",
            "type": "free []"
        },
        "description": "Removes all occurences of the given element in the array.",
        "notes": "ph3sx function."
    },
    
    {
        "name": "as_int",
        "arguments": [
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {
            "name": "value as an integer",
            "type": "number (int)"
        },
        "description": "Returns the given value casted to an int value.",
        "notes": "ph3sx function."
    },
    {
        "name": "as_float",
        "arguments": [
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {
            "name": "value as a float",
            "type": "number (float)"
        },
        "description": "Returns the given value casted to a float value.",
        "notes": "ph3sx function."
    },
    {
        "name": "as_bool",
        "arguments": [
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {
            "name": "value as a boolean",
            "type": "bool"
        },
        "description": "Returns the given value casted to a bool value.",
        "notes": "ph3sx function."
    },
    {
        "name": "as_char",
        "arguments": [
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {
            "name": "value as a character",
            "type": "char"
        },
        "description": "Returns the given value casted to a char value.",
        "notes": "ph3sx function."
    },
    {
        "name": "as_int_array",
        "arguments": [
            {
                "name": "array",
                "type": "free []"
            }
        ],
        "return": {
            "name": "array with all elements converted to integers",
            "type": "number (int) []"
        },
        "description": "Casts array elements to ints, then returns the result.",
        "notes": "ph3sx function.\n\nCasting is recursive.\n\nExample:\nas_int_array([[true, true], [false, true]]); -> [[1, 1], [0, 1]]"
    },
    {
        "name": "as_float_array",
        "arguments": [
            {
                "name": "array",
                "type": "free []"
            }
        ],
        "return": {
            "name": "array with all elements converted to floats",
            "type": "number (float) []"
        },
        "description": "Casts array elements to floats, then returns the result.",
        "notes": "ph3sx function.\n\nCasting is recursive."
    },
    {
        "name": "as_bool_array",
        "arguments": [
            {
                "name": "array",
                "type": "free []"
            }
        ],
        "return": {
            "name": "array with all elements converted to booleans",
            "type": "bool []"
        },
        "description": "Casts array elements to bools, then returns the result.",
        "notes": "ph3sx function.\n\nCasting is recursive."
    },
    {
        "name": "as_char_array",
        "arguments": [
            {
                "name": "array",
                "type": "free []"
            }
        ],
        "return": {
            "name": "array with all elements converted to characters",
            "type": "char []"
        },
        "description": "Casts array elements to chars, then returns the result.",
        "notes": "ph3sx function.\n\nCasting is recursive.\nNot an alias of ToString."
    },
    {
        "name": "as_x_array",
        "arguments": [
            {
                "name": "array",
                "type": "free []"
            },
            {
                "name": "type",
                "type": "const"
            }
        ],
        "return": {
            "name": "array with all elements converted to the specified type",
            "type": "(type) []"
        },
        "description": "Casts array elements to the given type, then returns the result.",
        "notes": "ph3sx function.\n\nSupported types:\nVAR_INT\nVAR_FLOAT\nVAR_BOOL\nVAR_CHAR\nCasting is recursive."
    },

    {
        "name": "bit_not",
        "arguments": [
            {
                "name": "value",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "integer after bitwise NOT operation",
            "type": "number (int)"
        },
        "description": "Performs a bitwise NOT operation.",
        "notes": "ph3sx function."
    },
    {
        "name": "bit_and",
        "arguments": [
            {
                "name": "value1",
                "type": "number (int)"
            },
            {
                "name": "value2",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "integer after bitwise AND operation",
            "type": "number (int)"
        },
        "description": "Performs a bitwise AND operation.",
        "notes": "ph3sx function."
    },
    {
        "name": "bit_or",
        "arguments": [
            {
                "name": "value1",
                "type": "number (int)"
            },
            {
                "name": "value2",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "integer after bitwise OR operation",
            "type": "number (int)"
        },
        "description": "Performs a bitwise OR operation.",
        "notes": "ph3sx function."
    },
    {
        "name": "bit_xor",
        "arguments": [
            {
                "name": "value1",
                "type": "number (int)"
            },
            {
                "name": "value2",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "integer after bitwise XOR operation",
            "type": "number (int)"
        },
        "description": "Performs a bitwise XOR operation.",
        "notes": "ph3sx function."
    },
    {
        "name": "bit_left",
        "arguments": [
            {
                "name": "value",
                "type": "number (int)"
            },
            {
                "name": "shiftfactor",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "integer after bitwise left shift operation",
            "type": "number (int)"
        },
        "description": "Performs a bitwise left shift operation.",
        "notes": "ph3sx function."
    },
    {
        "name": "bit_right",
        "arguments": [
            {
                "name": "value",
                "type": "number (int)"
            },
            {
                "name": "shiftfactor",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "integer after bitwise right shift operation",
            "type": "number (int)"
        },
        "description": "Performs a bitwise right shift operation.",
        "notes": "ph3sx function."
    },

    {
        "name": "Float_Classify",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "classification for specified float value as a constant",
            "type": "const"
        },
        "description": "Classifies the given float value.",
        "notes": "ph3sx function.\n\nPossible return values:\n- FLOAT_TYPE_ZERO ; Value is either +0 or -0.\n- FLOAT_TYPE_NORMAL ; Value is a normal float.\n- FLOAT_TYPE_SUBNORMAL ; Value is a subnormal float. (https://en.wikipedia.org/wiki/Subnormal_number)\n- FLOAT_TYPE_INFINITY ; Value is either +infinity or -infinity.\n- FLOAT_TYPE_NAN ; Value is not-a-number."
    },
    {
        "name": "Float_IsNan",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "true if specified float value is NaN; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given float is NaN.",
        "notes": "ph3sx function."
    },
    {
        "name": "Float_IsInf",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "true if specified float value is +infinity or -infinity; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given float is +infinity or -infinity.",
        "notes": "ph3sx function."
    },
    {
        "name": "Float_GetSign",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "sign of the specified float value",
            "type": "number (float)"
        },
        "description": "Returns +1.0 if the given float is positive, and -1.0 if the given float is negative.",
        "notes": "ph3sx function."
    },
    {
        "name": "Float_CopySign",
        "arguments": [
            {
                "name": "value1",
                "type": "number"
            },
            {
                "name": "value2",
                "type": "number)"
            }
        ],
        "return": {
            "name": "sign of value2 after value1's sign was copied to it",
            "type": "number (float)"
        },
        "description": "Copies the sign of value1 to value2, and returns the result.",
        "notes": "ph3sx function."
    },

    {
        "name": "clamp",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            },
            {
                "name": "lowerbound",
                "type": "number"
            },
            {
                "name": "upperbound",
                "type": "number"
            }
        ],
        "return": {
            "name": "value after being clamped between lowerbound and upperbound",
            "type": "number (float)"
        },
        "description": "Returns the specified value clamped between lowerbound and upperbound.",
        "notes": "ph3sx function."
    },
    {
        "name": "log2",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "value after base-2 logarithmic calculation",
            "type": "number"
        },
        "description": "Returns base-2 logarithm of the specified value.",
        "notes": "ph3sx function."
    },
    {
        "name": "logn",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            },
            {
                "name": "base",
                "type": "number"
            }
        ],
        "return": {
            "name": "value after base-n logarithmic calculation",
            "type": "number (float)"
        },
        "description": "Returns base-n logarithm of the specified value.",
        "notes": "ph3sx function."
    },
    {
        "name": "erf",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "error function value of the specified value",
            "type": "number (float)"
        },
        "description": "Returns the error function value of the specified value.",
        "notes": "ph3sx function.\n\nerf(x) = (2/sqrt(pi)) * integral(0, x, \"e^(-t^2) dt\")"
    },
    {
        "name": "gamma",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "gamma function value of the specified value",
            "type": "number (float)"
        },
        "description": "Returns the gamma function value of the specified value.",
        "notes": "ph3sx function.\n\ngamma(z + 1) = integral(0, infinity, \"(x^z)(e^(-x)) dx\")"
    },
    {
        "name": "exp",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "Euler's number raised to the power of the specified value",
            "type": "number (float)"
        },
        "description": "Returns e (Euler's number) raised to the power of the specified value.",
        "notes": "ph3sx function."
    },
    {
        "name": "sqrt",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "square root of the specified value",
            "type": "number (float)"
        },
        "description": "Returns the square root of the specified value.",
        "notes": "ph3sx function.\n\nMuch faster than pow(x, 0.5)."
    },
    {
        "name": "cbrt",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "cubic root of the specified value",
            "type": "number (float)"
        },
        "description": "Returns the cube root of the specified value.",
        "notes": "ph3sx function.\n\nEquivalent to (x ^ (1/3))."
    },
    {
        "name": "nroot",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            },
            {
                "name": "root",
                "type": "number"
            }
        ],
        "return": {
            "name": "nth root of the specified value",
            "type": "number (float)"
        },
        "description": "Returns the nth root of the specified value.",
        "notes": "ph3sx function.\n\nEquivalent to pow(x, 1 / root)."
    },
    {
        "name": "hypot",
        "arguments": [
            {
                "name": "point1",
                "type": "number"
            },
            {
                "name": "point2",
                "type": "number"
            }
        ],
        "return": {
            "name": "hypotenuse from given point1 and point2",
            "type": "number (float)"
        },
        "description": "Returns the hypotenuse of the triangle formed by the two given values.",
        "notes": "ph3sx function.\n\nhypot(a, b) = sqrt(a * a + b * b)"
    },
    {
        "name": "distance",
        "arguments": [
            {
                "name": "x1",
                "type": "number"
            },
            {
                "name": "y1",
                "type": "number"
            },
            {
                "name": "x2",
                "type": "number"
            },
            {
                "name": "y2",
                "type": "number"
            }
        ],
        "return": {
            "name": "square of distance between (x1,y1) and (x2,y2)",
            "type": "number (float)"
        },
        "description": "Returns square of the distance between the given two points.",
        "notes": "ph3sx function.\n\ndistancesq(x1, y1, x2, y2) = (x1 - x2)^2 + (y1 - y2)^2"
    },
    {
        "name": "dottheta",
        "arguments": [
            {
                "name": "x1",
                "type": "number"
            },
            {
                "name": "y1",
                "type": "number"
            },
            {
                "name": "x2",
                "type": "number"
            },
            {
                "name": "y2",
                "type": "number"
            }
        ],
        "return": {
            "name": "angle (in degrees) between (x1,y1) and (x2,y2)",
            "type": "number (float)"
        },
        "description": "Returns angle (in degrees) between the given two points.",
        "notes": "ph3sx function.\n\ndottheta(x1, y1, x2, y2) = atan2(y2 - y1, x2 - x1)"
    },
    {
        "name": "rdottheta",
        "arguments": [
            {
                "name": "x1",
                "type": "number"
            },
            {
                "name": "y1",
                "type": "number"
            },
            {
                "name": "x2",
                "type": "number"
            },
            {
                "name": "y2",
                "type": "number"
            }
        ],
        "return": {
            "name": "angle (in radians) between (x1,y1) and (x2,y2)",
            "type": "number (float)"
        },
        "description": "Returns angle (in radians) between the given two points.",
        "notes": "ph3sx function.\n\nrdottheta(x1, y1, x2, y2) = ratan2(y2 - y1, x2 - x1)"
    },

    {
        "name": "sincos",
        "arguments": [
            {
                "name": "angle",
                "type": "number"
            }
        ],
        "return": {
            "name": "float array containing sin and cos as [sin(angle),cos(angle)]",
            "type": "number (float) []"
        },
        "description": "Returns float array with sine in [0] element and cosine in [1] element",
        "notes": "ph3sx function."
    },
    {
        "name": "rsin",
        "arguments": [
            {
                "name": "angle",
                "type": "number"
            }
        ],
        "return": {
            "name": "sin calculation of radian input",
            "type": "number (float)"
        },
        "description": "sin() for radians input.",
        "notes": "ph3sx function."
    },
    {
        "name": "rcos",
        "arguments": [
            {
                "name": "angle",
                "type": "number"
            }
        ],
        "return": {
            "name": "cos calculation of radian input",
            "type": "number (float)"
        },
        "description": "cos() for radians input.",
        "notes": "ph3sx function."
    },
    {
        "name": "rtan",
        "arguments": [
            {
                "name": "angle",
                "type": "number"
            }
        ],
        "return": {
            "name": "tan calculation of radian input",
            "type": "number (float)"
        },
        "description": "tan() for radians input.",
        "notes": "ph3sx function."
    },
    {
        "name": "rsincos",
        "arguments": [
            {
                "name": "angle",
                "type": "number"
            }
        ],
        "return": {
            "name": "float array containing sin and cos as [sin(angle),cos(angle)]",
            "type": "number (float) []"
        },
        "description": "Returns float array with sine in [0] element and cosine in [1] element (from radians input)",
        "notes": "ph3sx function."
    },
    {
        "name": "rasin",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "asin calculation in radians",
            "type": "number (float)"
        },
        "description": "asin() for radian output.",
        "notes": "ph3sx function."
    },
    {
        "name": "racos",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "acos calculation in radians",
            "type": "number (float)"
        },
        "description": "acos() for radian output.",
        "notes": "ph3sx function."
    },
    {
        "name": "ratan",
        "arguments": [
            {
                "name": "valuey",
                "type": "number"
            },
            {
                "name": "valuex",
                "type": "number"
            }
        ],
        "return": {
            "name": "atan calculation in radians",
            "type": "number (float)"
        },
        "description": "atan() for radian output.",
        "notes": "ph3sx function."
    },
    {
        "name": "ratan2",
        "arguments": [
            {
                "name": "value",
                "type": "number"
            }
        ],
        "return": {
            "name": "atan2 calculation in radians",
            "type": "number (float)"
        },
        "description": "atan2() for radian output.",
        "notes": "ph3sx function."
    },
    {
        "name": "ToDegrees",
        "arguments": [
            {
                "name": "angle",
                "type": "number"
            }
        ],
        "return": {
            "name": "given angle converted to degrees",
            "type": "number (float)"
        },
        "description": "Converts the given angle to degrees.",
        "notes": "ph3sx function."
    },
    {
        "name": "ToRadians",
        "arguments": [
            {
                "name": "angle",
                "type": "number"
            }
        ],
        "return": {
            "name": "given angle converted to radians",
            "type": "number (float)"
        },
        "description": "Converts the given angle to radians.",
        "notes": "ph3sx function."
    },
    {
        "name": "NormalizeAngle",
        "arguments": [
            {
                "name": "angle_degrees",
                "type": "number (degrees)"
            }
        ],
        "return": {
            "name": "normalization of the given angle in degrees",
            "type": "number (float)"
        },
        "description": "Normalizes the given angle.",
        "notes": "ph3sx function.\n\nInput must be in degrees. For radians, use NormalizeAngleR.\n\nRange = [0, 360]"
    },
    {
        "name": "NormalizeAngleR",
        "arguments": [
            {
                "name": "angle",
                "type": "number (radians)"
            }
        ],
        "return": {
            "name": "normalization of the given angle in radians",
            "type": "number (float)"
        },
        "description": "Normalizes the given angle.",
        "notes": "ph3sx function.\n\nInput must be in radians. For degrees, use NormalizeAngle.\n\nRange = [0, 2pi]"
    },
    {
        "name": "AngularDistance",
        "arguments": [
            {
                "name": "anglefrom",
                "type": "number (degrees)"
            },
            {
                "name": "angleto",
                "type": "number (degrees)"
            }
        ],
        "return": {
            "name": "angular distance between anglefrom and angleto in degrees",
            "type": "number (float)"
        },
        "description": "Calculates the shortest angular distance between the given angles.",
        "notes": "ph3sx function.\n\nInputs must be in degrees. For radians, use AngularDistanceR.\n\nRange = [-180, 180]"
    },
    {
        "name": "AngularDistanceR",
        "arguments": [
            {
                "name": "anglefrom",
                "type": "number (radians)"
            },
            {
                "name": "angleto",
                "type": "number (radians)"
            }
        ],
        "return": {
            "name": "angular distance between anglefrom and angleto in radians",
            "type": "number (float)"
        },
        "description": "Calculates the shortest angular distance between the given angles.",
        "notes": "ph3sx function.\n\nInputs must be in radians. For degrees, use AngularDistance.\n\nRange = [-pi, pi]"
    },
    {
        "name": "ReflectAngle",
        "arguments": [
            {
                "name": "rayangle",
                "type": "number (degrees)"
            },
            {
                "name": "surfaceangle",
                "type": "number (degrees)"
            }
        ],
        "return": {
            "name": "reflection angle from rayangle upon surfaceangle in degrees",
            "type": "number (float)"
        },
        "description": "Calculates the given ray's angle of reflection upon a surface of the given angle.",
        "notes": "ph3sx function.\n\nInputs must be in degrees. For radians, use ReflectAngleR.\n\nRange = [0, 360]"
    },
    {
        "name": "ReflectAngleR",
        "arguments": [
            {
                "name": "rayangle",
                "type": "number (radians)"
            },
            {
                "name": "surfaceangle",
                "type": "number (radians)"
            }
        ],
        "return": {
            "name": "reflection angle from rayangle upon surfaceangle in radians",
            "type": "number (float)"
        },
        "description": "Calculates the given ray's angle of reflection upon a surface of the given angle.",
        "notes": "ph3sx function.\n\nInputs must be in radians. For degrees, use ReflectAngle.\n\nRange = [0, 2pi]"
    },
    {
        "name": "Interpolate_Linear",
        "arguments": [
            {
                "name": "a",
                "type": "number"
            },
            {
                "name": "b",
                "type": "number"
            },
            {
                "name": "xcoord",
                "type": "number"
            }
        ],
        "return": {
            "name": "result of interpolation between a and b using x as interpolation value",
            "type": "IF ARRAY: number (float) [], IF NOT ARRAY: number (float)"
        },
        "description": "Returns the result of interpolation between a and b, using x as the interpolation value.",
        "notes": "ph3sx function.\n\nInterpolation method is linear.\nDirect formula is (a + (b - a) * (x))\n\nRepresented by the red graph here:\nhttps://www.desmos.com/calculator/m8dnz348cq \n\nWhen interpolating between two arrays, they must be of the same size."
    },
    {
        "name": "Interpolate_Smooth",
        "arguments": [
            {
                "name": "a",
                "type": "number"
            },
            {
                "name": "b",
                "type": "number"
            },
            {
                "name": "xcoord",
                "type": "number"
            }
        ],
        "return": {
            "name": "result of interpolation between a and b using x as interpolation value",
            "type": "IF ARRAY: number (float) [], IF NOT ARRAY: number (float)"
        },
        "description": "Returns the result of interpolation between a and b, using x as the interpolation value.",
        "notes": "ph3sx function.\n\nInterpolation method is first-order smoothstep curve.\nDirect formula is (a + (b - a) * (x^2 * (3 - 2 * x)))\n\nRepresented by the blue graph here:\nhttps://www.desmos.com/calculator/m8dnz348cq \n\nWhen interpolating between two arrays, they must be of the same size."
    },
    {
        "name": "Interpolate_Smoother",
        "arguments": [
            {
                "name": "a",
                "type": "number"
            },
            {
                "name": "b",
                "type": "number"
            },
            {
                "name": "xcoord",
                "type": "number"
            }
        ],
        "return": {
            "name": "result of interpolation between a and b using x as interpolation value",
            "type": "IF ARRAY: number (float) [], IF NOT ARRAY: number (float)"
        },
        "description": "Returns the result of interpolation between a and b, using x as the interpolation value.",
        "notes": "ph3sx function.\n\nInterpolation method is second-order smoothstep curve.\nDirect formula is (a + (b - a) * (x^3 * (x * (x * 6 - 15) + 10)))\n\nRepresented by the green graph here:\nhttps://www.desmos.com/calculator/m8dnz348cq \n\nWhen interpolating between two arrays, they must be of the same size."
    },
    {
        "name": "Interpolate_Accelerate",
        "arguments": [
            {
                "name": "a",
                "type": "number"
            },
            {
                "name": "b",
                "type": "number"
            },
            {
                "name": "xcoord",
                "type": "number"
            }
        ],
        "return": {
            "name": "result of interpolation between a and b using x as interpolation value",
            "type": "IF ARRAY: number (float) [], IF NOT ARRAY: number (float)"
        },
        "description": "Returns the result of interpolation between a and b, using x as the interpolation value.",
        "notes": "ph3sx function.\n\nInterpolation method is parabolic.\nDirect formula is (a + (b - a) * (x^2))\n\nRepresented by the purple graph here:\nhttps://www.desmos.com/calculator/m8dnz348cq \n\nWhen interpolating between two arrays, they must be of the same size."
    },
    {
        "name": "Interpolate_Decelerate",
        "arguments": [
            {
                "name": "a",
                "type": "number"
            },
            {
                "name": "b",
                "type": "number"
            },
            {
                "name": "xcoord",
                "type": "number"
            }
        ],
        "return": {
            "name": "result of interpolation between a and b using x as interpolation value",
            "type": "IF ARRAY: number (float) [], IF NOT ARRAY: number (float)"
        },
        "description": "Returns the result of interpolation between a and b, using x as the interpolation value.",
        "notes": "ph3sx function.\n\nInterpolation method is inverse parabolic.\nDirect formula is (a + (b - a) * (1 - (1 - x)^2))\n\nRepresented by the black graph here:\nhttps://www.desmos.com/calculator/m8dnz348cq \n\nWhen interpolating between two arrays, they must be of the same size."
    },
    {
        "name": "Interpolate_Modulate",
        "arguments": [
            {
                "name": "a",
                "type": "number"
            },
            {
                "name": "b",
                "type": "number"
            },
            {
                "name": "c",
                "type": "number"
            },
            {
                "name": "xcoord",
                "type": "number"
            }
        ],
        "return": {
            "name": "result of interpolation between a and b using x as interpolation value",
            "type": "number (float)"
        },
        "description": "Returns the result of interpolation between a and b, using x as the interpolation value.",
        "notes": "ph3sx function.\n\nInterpolation method is sine.\nDirect formula is (a + (b - a) * (x + (rsin(2pi * x) / (2pi)) * c))\n\nRepresented by the dotted red graph here:\nhttps://www.desmos.com/calculator/m8dnz348cq "
    },
    {
        "name": "Interpolate_Overshoot",
        "arguments": [
            {
                "name": "a",
                "type": "number"
            },
            {
                "name": "b",
                "type": "number"
            },
            {
                "name": "c",
                "type": "number"
            },
            {
                "name": "xcoord",
                "type": "number"
            }
        ],
        "return": {
            "name": "result of interpolation between a and b using x as interpolation value",
            "type": "number (float)"
        },
        "description": "Returns the result of interpolation between a and b, using x as the interpolation value.",
        "notes": "ph3sx function.\n\nInterpolation method is half sine.\nDirect formula is (a + (b - a) * (x + (rsin(pi * x) / pi) * c))\n\nRepresented by the dotted blue graph here:\nhttps://www.desmos.com/calculator/m8dnz348cq "
    },
    {
        "name": "Interpolate_QuadraticBezier",
        "arguments": [
            {
                "name": "a",
                "type": "number"
            },
            {
                "name": "b",
                "type": "number"
            },
            {
                "name": "c1",
                "type": "number"
            },
            {
                "name": "c2",
                "type": "number"
            },
            {
                "name": "xcoord",
                "type": "number"
            }
        ],
        "return": {
            "name": "coordinate component of a quadratic Bezier curve",
            "type": "number (float)"
        },
        "description": "Calculates a coordinate component of a quadratic Bezier curve.",
        "notes": "ph3sx function.\n\nDirect formula is ((a * (1 - x)^2) + (2 * c * x * (1 - x)) + (b * x^2))\n\nRepresented by the red graph here:\nhttps://www.desmos.com/calculator/q1uptzx8ti "
    },
    {
        "name": "Interpolate_CubicBezier",
        "arguments": [
            {
                "name": "a",
                "type": "number"
            },
            {
                "name": "b",
                "type": "number"
            },
            {
                "name": "c1",
                "type": "number"
            },
            {
                "name": "c2",
                "type": "number"
            },
            {
                "name": "xcoord",
                "type": "number"
            }
        ],
        "return": {
            "name": "coordinate component of a cubic Bezier curve",
            "type": "number (float)"
        },
        "description": "Calculates a coordinate component of a cubic Bezier curve.",
        "notes": "ph3sx function.\n\nDirect formula is ((a * (1 - x)^3) + (3 * c1 * x * (1 - x)^2) + (3 * c2 * x^2 * (1 - x)) + (b * x^3))\n\nRepresented by the red graph here:\nhttps://www.desmos.com/calculator/q1uptzx8ti "
    },
    {
        "name": "Interpolate_Hermite",
        "arguments": [
            {
                "name": "startx",
                "type": "number"
            },
            {
                "name": "starty",
                "type": "number"
            },
            {
                "name": "endx",
                "type": "number"
            },
            {
                "name": "endy",
                "type": "number"
            },
            {
                "name": "startpoint_tanvector_magnitude",
                "type": "number"
            },
            {
                "name": "startpoint_tanvector_angle",
                "type": "number (degrees)"
            },
            {
                "name": "endpoint_tanvector_magnitude",
                "type": "number"
            },
            {
                "name": "endpoint_tanvector_angle",
                "type": "number (degrees)"
            },
            {
                "name": "xcoord",
                "type": "number"
            }
        ],
        "return": {
            "name": "position along given curve as [x, y]",
            "type": "number (float) []"
        },
        "description": "Calculates the position along the given cubic Hermite spline curve.",
        "notes": "ph3sx function.\n\nhttps://en.wikipedia.org/wiki/Cubic_Hermite_spline "
    },
    {
        "name": "Interpolate_X",
        "arguments": [
            {
                "name": "a",
                "type": "number"
            },
            {
                "name": "b",
                "type": "number"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "interptype",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "result of interpolation between a and b using x as interpolation value and specified interptype constant/integer",
            "type": "IF ARRAY: number (float) [], IF NOT ARRAY: number (float)"
        },
        "description": "Interpolates between a and b using x with the given interpolation type.",
        "notes": "ph3sx function.\n\nAvailable interpolation types:\nLERP_LINEAR = Interpolate_Linear\nLERP_SMOOTH = Interpolate_Smooth\nLERP_SMOOTHER = Interpolate_Smoother\nLERP_ACCELERATE = Interpolate_Accelerate\nLERP_DECELERATE = Interpolate_Decelerate"
    },
    {
        "name": "Interpolate_X_PackedInt",
        "arguments": [
            {
                "name": "a",
                "type": "number (int)"
            },
            {
                "name": "b",
                "type": "number (int)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "interptype",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "recombined result of interpolation of the 8-byte integers a and b as an integer array",
            "type": "number (int) []"
        },
        "description": "Divides a and b (both 8-byte ints) into eight 1-byte chunks, performs interpolation on each pair, and recombines them to return the result.",
        "notes": "ph3sx function.\n\nExample:\nInterpolate_X_PackedInt(0x37ff4040, 0xaa001010, 0.5, LERP_LINEAR);\nresult = 0x707f2828"
    },
    {
        "name": "Interpolate_X_Angle",
        "arguments": [
            {
                "name": "a",
                "type": "number (degrees)"
            },
            {
                "name": "b",
                "type": "number (degrees)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "interptype",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "result of interpolation between a and b using x as interpolation value (degrees)",
            "type": "number (float)"
        },
        "description": "Interpolates between angles a and b using x with the given interpolation type.",
        "notes": "ph3sx function.\n\nInputs a and b must be in degrees. For radians, use Interpolate_X_AngleR.\nEquivalent to: NormalizeAngle(a + Interpolate_X(0, AngularDistance(a, b), x, type));"
    },
    {
        "name": "Interpolate_X_AngleR",
        "arguments": [
            {
                "name": "a",
                "type": "number (radians)"
            },
            {
                "name": "b",
                "type": "number (radians)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "interptype",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "result of interpolation between a and b using x as interpolation value (radians)",
            "type": "number (float)"
        },
        "description": "Interpolates between angles a and b using x with the given interpolation type.",
        "notes": "ph3sx function.\n\nInputs a and b must be in radians. For degrees, use Interpolate_X_Angle.\nEquivalent to: NormalizeAngleR(a + Interpolate_X(0, AngularDistanceR(a, b), x, type));"
    },
    {
        "name": "Interpolate_X_AngleR",
        "arguments": [
            {
                "name": "array",
                "type": "number []"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "interptype",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "interpolation between array elements",
            "type": "number (float)"
        },
        "description": "Interpolates between multiple elements of the array.",
        "notes": "ph3sx function.\n\nExamples:\nInterpolate_X_Array([a, b, c, d], 0.2, LERP_LINEAR); = Interpolate_X(a, b, 0.2, LERP_LINEAR);\nInterpolate_X_Array([a, b, c, d], 1.5, LERP_LINEAR); = Interpolate_X(b, c, 0.5, LERP_LINEAR);\nInterpolate_X_Array([a, b, c, d], 2.9, LERP_LINEAR); = Interpolate_X(c, d, 0.9, LERP_LINEAR);"
    },
    
    {
        "name": "rand_int",
        "arguments": [
            {
                "name": "min",
                "type": "number (int)"
            },
            {
                "name": "max",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "random integer",
            "type": "number (int)"
        },
        "description": "Returns a random integer within the range [a, b].",
        "notes": "ph3sx function.\n\nrand_int(a, b) = as_int(rand(a, b + 0.99999))"
    },
    {
        "name": "prand",
        "arguments": [
            {
                "name": "min",
                "type": "number"
            },
            {
                "name": "max",
                "type": "number"
            }
        ],
        "return": {
            "name": "random value",
            "type": "number (int)"
        },
        "description": "Exactly like rand(), but the seed of which doesn't get saved to replays, and does not affect the state of rand().",
        "notes": "ph3sx function."
    },
    {
        "name": "prand_int",
        "arguments": [
            {
                "name": "min",
                "type": "number (int)"
            },
            {
                "name": "max",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "random integer",
            "type": "number (int)"
        },
        "description": "Returns a random integer within the range [a, b] using the prand() function.",
        "notes": "ph3sx function.\n\nprand_int(a, b) = as_int(prand(as_int(a), as_int(b) + 0.99999))"
    },
    {
        "name": "psrand",
        "arguments": [
            {
                "name": "seed",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the seed for prand and prand_int.",
        "notes": "ph3sx function."
    },
    {
        "name": "count_rand",
        "arguments": [],
        "return": {
            "name": "count of rand and rand_int calls",
            "type": "number (int)"
        },
        "description": "Returns the amount of rand or rand_int functions that have been used.",
        "notes": "ph3sx function.\n\nResets when restarting the game or exiting to the script select menu."
    },
    {
        "name": "count_prand",
        "arguments": [],
        "return": {
            "name": "count of prand and prand_int calls",
            "type": "number (int)"
        },
        "description": "Returns the amount of prand or prand_int functions that have been used.",
        "notes": "ph3sx function.\n\nResets when restarting the game or exiting to the script select menu."
    },
    {
        "name": "reset_count_rand",
        "arguments": [],
        "return": {},
        "description": "Sets the rand count to 0..",
        "notes": "ph3sx function."
    },
    {
        "name": "reset_count_prand",
        "arguments": [],
        "return": {},
        "description": "Sets the rand count to 0..",
        "notes": "ph3sx function."
    },
    
    {
        "name": "Rotate2D",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            },
            {
                "name": "originx",
                "type": "number (optional overload)"
            },
            {
                "name": "originy",
                "type": "number (optional overload)"
            }
        ],
        "return": {
            "name": "rotation of given (x, y) as [x, y]",
            "type": "number (float) []"
        },
        "description": "Rotates the given (x, y) point around the origin (0, 0) or the given origin (originx, originy) if defined.",
        "notes": "ph3sx function.\n\nDirect formula with no given origin point is:\nx = x * cos(angle) - y * sin(angle)\ny = x * sin(angle) + y * cos(angle)\n\nDirect formula with defined origin point is:\n_x = x - ox\n_y = y - oy\nx = ox + (_x * cos(angle) - _y * sin(angle))\ny = oy + (_x * sin(angle) + _y * cos(angle))"
    },
    {
        "name": "Rotate3D",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "zcoord",
                "type": "number"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            },
            {
                "name": "originx",
                "type": "number (optional overload)"
            },
            {
                "name": "originy",
                "type": "number (optional overload)"
            },
            {
                "name": "originz",
                "type": "number (optional overload)"
            }
        ],
        "return": {
            "name": "rotation of given (x, y, z) as [x, y, z]",
            "type": "number (float) []"
        },
        "description": "Rotates the given (x, y, z) point around the origin (0, 0, 0) or the given origin (originx, originy, originz) if defined.",
        "notes": "ph3sx function.\n\nDirect formula with no given origin point is:\nx = x * (cos(angY) * cos(angZ) - sin(angX) * sin(angY) * sin(angZ)) + y * (-cos(angX) * sin(angZ)) + z * (sin(angY) * cos(angZ) + sin(angX) * cos(angY) * sin(angZ))\ny = x * (cos(angY) * sin(angZ) + sin(angX) * sin(angY) * cos(angZ)) + y * (cos(angX) * cos(angZ)) + z * (sin(angY) * sin(angZ) - sin(angX) * cos(angY) * cos(angZ))\nz = x * (-cos(angX) * sin(angY)) + y * (sin(angX)) + z * (cos(angX) * cos(angY))\n\nDirect formula with defined origin point is:\nx = ox + (_x * (cos(angY) * cos(angZ) - sin(angX) * sin(angY) * sin(angZ)) + _y * (-cos(angX) * sin(angZ)) + _z * (sin(angY) * cos(angZ) + sin(angX) * cos(angY) * sin(angZ)))\ny = oy + (_x * (cos(angY) * sin(angZ) + sin(angX) * sin(angY) * cos(angZ)) + _y * (cos(angX) * cos(angZ)) + _z * (sin(angY) * sin(angZ) - sin(angX) * cos(angY) * cos(angZ)))\nz = oz + (_x * (-cos(angX) * sin(angY)) + _y * (sin(angX)) + _z * (cos(angX) * cos(angY)))"
    },

    {
        "name": "atoi",
        "arguments": [
            {
                "name": "value",
                "type": "string"
            },
            {
                "name": "base",
                "type": "number (int, optional overload)"
            }
        ],
        "return": {
            "name": "string as number with no decimals with specified base, if provided",
            "type": "number (int)"
        },
        "description": "Parses the string to an integer, truncating decimal components, and returns the integer.\n\nIf base is included, the string is converted into an integer with the specified base.",
        "notes": "ph3sx function.\n\nIf the string does not represent a valid number, then 0 will be returned.\n\nOnly works within limits of an int32 - for arbitrarily large numbers, use ator()\n\nOverload Examples:\natoi(\"3511\", 10) = 3511\natoi(\"3511\", 16) = 13585\natoi(\"0x7f3\", 16) = 2035"
    },
    {
        "name": "SplitString2",
        "arguments": [
            {
                "name": "sourcestring",
                "type": "string"
            },
            {
                "name": "pattern",
                "type": "string"
            }
        ],
        "return": {
            "name": "array of strings in sourcesting that were split by the given pattern",
            "type": "string []"
        },
        "description": "Splits the string at the given pattern.",
        "notes": "ph3sx function.\n\nExamples:\n\nSplitString2(\"ab3cd3ef3g\", \"3\");\n//Result: [\"ab\", \"cd\", \"ef\", \"g\"]\n\nSplitString2(\"1b23abc45a6abc789c\", \"abc\");\n//Result: [\"1b23\", \"45a6\", \"789c\"]\n\nSplitString(\"1b23abc45a6abc789c\", \"abc\");\n//Result: [\"1\", \"23\", \"\", \"\", \"45\", \"6\", \"\", \"\", \"789\", \"\"]"
    },
    {
        "name": "StringFormat",
        "arguments": [
            {
                "name": "sourcestring",
                "type": "string"
            },
            {
                "name": "argumenttypes",
                "type": "string"
            },
            {
                "name": "formatarguments",
                "type": "string"
            }
        ],
        "return": {
            "name": "formatted string",
            "type": "string"
        },
        "description": "Formats the string in the style of sprintf.",
        "notes": "ph3sx function.\n\nThere can be an indefinite amount of format arguments. The number of format arguments must match the number of argument types.\n\nMake sure that the amount of format arguments match the formatting tokens in the source string,\nThe game may crash if the formatting token count exceeds the format argument count.\n\nAvailable argument types:\n- d: Argument is passed a 32-bit integer (int).\n- l: Argument is passed a 64-bit integer (long int).\n- f: Argument is passed a floating point number (double).\n- s: Argument is passed a string (wstring).\n\nExample:\nStringFormat(\"This is a %s\", \"s\", \"string.\");\n//Result: This is a string.\n\nStringFormat(\"The value is %s\", \"s\", 32);\n//Result: The value is 32.000000\n\nStringFormat(\"%f + %d = %.2f\", \"fdf\", 1.15836, 2.12, 3.27836);\n//Result: 1.158360 + 2 = 3.28\n\nStringFormat(\"0x%08x is %d\", \"ll\", 8023465, 8023465);\n//Result: 0x007a6da9 is 8023465\n\nStringFormat(\"0x%016llx %s %lld\", \"lsl\", 2275101568023465, \"is\", 2275101568023465);\n//Result: 0x000815315cca3ba9 is 2275101568023465"
    },
    {
        "name": "RegexMatch",
        "arguments": [
            {
                "name": "sourcestring",
                "type": "string"
            },
            {
                "name": "pattern",
                "type": "string"
            }
        ],
        "return": {
            "name": "array of strings in sourcesting that matched the given pattern",
            "type": "string []"
        },
        "description": "Uses regular expression to match patterns in a given string. Returns a string array of matches.",
        "notes": "ph3sx function.\n\nExample:\nRegexMatch(\"Voyage 1969\", \"[0-9]+\");\n//Result: [\"1969\"]\n\nRegexMatch(\"S231 A001 S101 S000\", \"S([0-9]{3})\");\n//Result: \"S231\", \"231\"]"
    },
    {
        "name": "RegexMatchRepeated",
        "arguments": [
            {
                "name": "sourcestring",
                "type": "string"
            },
            {
                "name": "pattern",
                "type": "string"
            }
        ],
        "return": {
            "name": "array containing nested arrays of strings in sourcesting that matched the given pattern",
            "type": "string [] []"
        },
        "description": "Behaves like RegexMatch, but returns all matches in the string rather than only the first match.",
        "notes": "ph3sx function.\n\nExample:\nRegexMatchRepeated(\"Voyage 1969\", \"[0-9]+\");\n//Result: [[\"1969\"]]\n\nRegexMatchRepeated(\"S231 A001 S101 S0040\", \"S([0-9]{3})\");\n//Result: [[\"S231\", \"231\"], [\"S101\", \"101\"], [\"S004\", \"004\"]]"
    },
    {
        "name": "RegexReplace",
        "arguments": [
            {
                "name": "sourcestring",
                "type": "string"
            },
            {
                "name": "pattern",
                "type": "string"
            },
            {
                "name": "replacingstring",
                "type": "string"
            }
        ],
        "return": {
            "name": "sourcestring with all instances of the given pattern replaced with replacingstring",
            "type": "string"
        },
        "description": "Uses regular expression to replace patterns in a given string. Returns the pattern-replaced string.",
        "notes": "ph3sx function.\n\nExample:\nRegexReplace(\"Voyage 1969\", \"[0-9]+\", \"1970\");\n//Result: \"Voyage 1970\"\n\nRegexReplace(\"Example String\", \"(a|e|i)\", \"*\");\n//Result: \"Ex*mpl* Str*ng\"\n\nRegexReplace(\"Red, Green, and Blue\", \"[A-Z]+[a-zA-Z]*\", \"'$&'\");\n//Result: \"'Red', 'Green', and 'Blue'\""
    },

    {
        "name": "GetArchiveFilePathList",
        "arguments": [
            {
                "name": "archivepath",
                "type": "string (path)"
            },
            {
                "name": "printfullpath",
                "type": "bool"
            }
        ],
        "return": {
            "name": "array of file names of the archive's stored entries",
            "type": "string []"
        },
        "description": "Returns an array of all filepaths stored inside the specified archive.",
        "notes": "ph3sx function.\n\nThe archive must have already been loaded with AddArchiveFile, otherwise an empty array will be returned."
    },
    {
        "name": "GetWorkingDirectory",
        "arguments": [],
        "return": {
            "name": "the working directory of Danmakufu",
            "type": "string (path)"
        },
        "description": "Returns the working directory of the engine.",
        "notes": "ph3sx function.\n\nThe working directory is the directory in which the engine is operating in,and will always be in the same directory as the exe's if the engine was started normally.\nBut there are some cases where the working directory won't necessary be the same as the exe's, such as when the game is started via Steam."
    },
    {
        "name": "GetModuleName",
        "arguments": [],
        "return": {
            "name": "the module name of Danmakufu",
            "type": "string"
        },
        "description": "Returns the file name of the engine, without the extension.",
        "notes": "ph3sx function."
    },
    {
        "name": "GetFileDirectoryFromModule",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "the given path with the engine directory and its parents truncated",
            "type": "string (path)"
        },
        "description": "Returns the directory of the given file path, without the directory of the engine.",
        "notes": "ph3sx function.\n\nThe given path does not need to actually exist."
    },
    {
        "name": "GetFileTopDirectory",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "the given path with everything except the topmost directory truncated",
            "type": "string (path)"
        },
        "description": "Returns the topmost directory of the given file path.",
        "notes": "ph3sx function.\n\nThe given path does not need to actually exist."
    },
    {
        "name": "GetFileName",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "the given path with everything except the file name and its extension truncated",
            "type": "string (path)"
        },
        "description": "Returns the file name of the given file path.",
        "notes": "ph3sx function.\n\nThe given path does not need to actually exist."
    },
    {
        "name": "GetFileNameWithoutExtension",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "the given path with everything except the file name truncated",
            "type": "string (path)"
        },
        "description": "Returns the file name of the given file path, without its extension.",
        "notes": "ph3sx function.\n\nThe given path does not need to actually exist."
    },
    {
        "name": "GetFileExtension",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "the given path with everything except the file extension truncated",
            "type": "string (path)"
        },
        "description": "Returns the file extension of the given file path.",
        "notes": "ph3sx function.\n\nThe given path does not need to actually exist."
    },
    {
        "name": "IsFileExists",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "true if the given path points to a file that exists; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given file exists.",
        "notes": "ph3sx function."
    },
    {
        "name": "IsDirectoryExists",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "true if the given path points to a directory that exists; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given directory exists.",
        "notes": "ph3sx function."
    },
    
    {
        "name": "GetSystemTimeMilliS",
        "arguments": [],
        "return": {
            "name": "integer equal to system time in milliseconds",
            "type": "number (int)"
        },
        "description": "Returns the time of the system clock in milliseconds.",
        "notes": "ph3sx function."
    },
    {
        "name": "GetSystemTimeNanoS",
        "arguments": [],
        "return": {
            "name": "integer equal to system time in nanoseconds",
            "type": "number (int)"
        },
        "description": "Returns the time of the system clock in nanoseconds.",
        "notes": "ph3sx function."
    },
    
    {
        "name": "WriteLog",
        "arguments": [
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {},
        "description": "Writes the values of the given arguments to the LogWindow.",
        "notes": "ph3sx function.\n\nCan take indefinite amount of arguments."
    },
    {
        "name": "RaiseMessageWindow",
        "arguments": [
            {
                "name": "headertext",
                "type": "string"
            },
            {
                "name": "bodytext",
                "type": "string"
            },
            {
                "name": "windowflags",
                "type": "number (int, optional overload)"
            }
        ],
        "return": {
            "name": "window result",
            "type": "number (int)"
        },
        "description": "Raises a message window similar to RaiseError, but does not terminate the script.",
        "notes": "ph3sx function.\n\nThe game will be paused until the message window is addressed. The LogWindow will not be affected.\n\nFor the list of window flags, refer to this page:\nhttps://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messagebox \n\nLeaving out windowflags will default the argument to MB_OK.\n\nThe following flags are not allowed and will be automatically deleted:\nMB_SETFOREGROUND\nMB_DEFAULT_DESKTOP_ONLY\nMB_SERVICE_NOTIFICATION\nMB_SYSTEMMODAL\nMB_TASKMODAL\n\nThe following flags are forced:\nMB_APPLMODAL\n\nThe return value is dependent on the user's interaction with the message window.\nRefer to the same page for the list and explaination of return values."
    },

    {
        "name": "GetCommonData",
        "arguments": [
            {
                "name": "key",
                "type": "string"
            },
            {
                "name": "defaultvalue",
                "type": "free (optional overload)"
            }
        ],
        "return": {
            "name": "the value associated with the given key in the default common data area, or defaultvalue if no mapping exists",
            "type": "free"
        },
        "description": "Returns the value associated with the given key in the default common data area, or defaultvalue if no mapping exists.",
        "notes": "ph3sx function.\n\nThe defaultvalue argument is optional; If it is left out, it will will return null if you try to return defaultvalue"
    },
    {
        "name": "GetAreaCommonData",
        "arguments": [
            {
                "name": "area",
                "type": "string"
            },
            {
                "name": "key",
                "type": "string"
            },
            {
                "name": "defaultvalue",
                "type": "free (optional overload)"
            }
        ],
        "return": {
            "name": "the value associated with the given key in the specified common data area, or defaultvalue if no mapping exists",
            "type": "free"
        },
        "description": "Returns the value associated with the given key in the specified common data area, or defaultvalue if no mapping exists.",
        "notes": "ph3sx function.\n\nThe defaultvalue argument is optional; If it is left out, it will will return null if you try to return defaultvalue"
    },
    {
        "name": "DeleteWholeAreaCommonData",
        "arguments": [
            {
                "name": "area",
                "type": "string"
            }
        ],
        "return": {},
        "description": "Deletes the whole area common data, not just the key-value list.",
        "notes": "ph3sx function.\n\nTo use the area common data again, it must be recreated with CreateCommonDataArea."
    },
    {
        "name": "LoadCommonDataValuePointer",
        "arguments": [
            {
                "name": "key",
                "type": "string"
            },
            {
                "name": "initialvalue",
                "type": "free (optional overload)"
            }
        ],
        "return": {
            "name": "value pointer to the value in the defualt common data area",
            "type": "pointer"
        },
        "description": "Obtains a value pointer to the common data value in the default area.",
        "notes": "ph3sx function.\n\nIf the requested common data does not exist, it will be created and initialized with the provided value.\n\nIt isn't necessary to provide initialvalue, though if the requested common data doesn't exist, there will be no value to provide it if it is created by this function"
    },
    {
        "name": "LoadAreaCommonDataValuePointer",
        "arguments": [
            {
                "name": "area",
                "type": "string"
            },
            {
                "name": "key",
                "type": "string"
            },
            {
                "name": "initialvalue",
                "type": "free (optional overload)"
            }
        ],
        "return": {
            "name": "value pointer to the value in the specified common data area",
            "type": "pointer"
        },
        "description": "Obtains a value pointer to the common data value in the given area.",
        "notes": "ph3sx function.\n\nIf the requested common data does not exist, it will be created and initialized with the provided value.\n\nIt isn't necessary to provide initialvalue, though if the requested common data doesn't exist, there will be no value to provide it if it is created by this function."
    },
    {
        "name": "IsValidCommonDataValuePointer",
        "arguments": [
            {
                "name": "valuepointer",
                "type": "pointer"
            }
        ],
        "return": {
            "name": "true if the pointer is valid; false otherwise",
            "type": "bool"
        },
        "description": "Returns if the given value is a valid common data value pointer.",
        "notes": "ph3sx function."
    },
    {
        "name": "SetCommonDataPtr",
        "arguments": [
            {
                "name": "valuepointer",
                "type": "pointer"
            },
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {},
        "description": "SetCommonData/SetAreaCommonData using pointers.",
        "notes": "ph3sx function.\n\nThe use of direct pointers mitigate the need for map traversals present in regular common data accesses, and thus would remarkably improve speed.\nUsing an invalid pointer may cause a memory access violation."
    },
    {
        "name": "GetCommonDataPtr",
        "arguments": [
            {
                "name": "valuepointer",
                "type": "pointer"
            },
            {
                "name": "defaultvalue",
                "type": "free (optional overload)"
            }
        ],
        "return": {
            "name": "stored value at the common data pointer",
            "type": "free"
        },
        "description": "GetCommonData/GetAreaCommonData using pointers.",
        "notes": "ph3sx function.\n\nThe use of direct pointers mitigate the need for map traversals present in regular common data accesses, and thus would remarkably improve speed.\nUsing an invalid pointer may cause a memory access violation.\n\nThe defaultvalue argument is optional; If it is left out, it will will return null if you try to return defaultvalue"
    },
    
    {
        "name": "IsEngineFastMode",
        "arguments": [],
        "return": {
            "name": "true if \"fast mode\" is active; false otherwise",
            "type": "bool"
        },
        "description": "Returns whether the engine is in the \"fast mode\" state.",
        "notes": "ph3sx function.\n\n\"Fast mode\" refers to fastforwarding activated by holding the left CTRL key"
    },
    {
        "name": "GetConfigWindowSizeIndex",
        "arguments": [],
        "return": {
            "name": "selected window size index from config file",
            "type": "number (int)"
        },
        "description": "Returns the config's selected window size index.",
        "notes": "ph3sx function."
    },
    {
        "name": "GetConfigWindowSizeList",
        "arguments": [],
        "return": {
            "name": "array contianing nested arrays of window sizes in the config file formatted as [[w, h], [w, h], ...] ",
            "type": "number (int) [] []"
        },
        "description": "Returns an array of the window sizes specified in th_dnh.def.",
        "notes": "ph3sx function."
    },
    {
        "name": "GetConfigVirtualKeyMapping",
        "arguments": [
            {
                "name": "vk",
                "type": "free (optional overload)"
            }
        ],
        "return": {
            "name": "array containing keymaps for the given virtual key in the format [keyboard, gamepad]",
            "type": "number (int) []"
        },
        "description": "Returns the key mapping [keyboard, gamepad] as set in the config.",
        "notes": "ph3sx function.\n\nMappings will not change if keys are reassigned in-game."
    },
    {
        "name": "GetConfigWindowTitle",
        "arguments": [],
        "return": {
            "name": "window title in the engine or the config file; config file takes priority",
            "type": "string"
        },
        "description": "Returns the engine's default window title, or the one specified in th_dnh.def if it exists.",
        "notes": "ph3sx function."
    },
    {
        "name": "SetWindowTitle",
        "arguments": [
            {
                "name": "windowtitle",
                "type": "string"
            }
        ],
        "return": {},
        "description": "Sets the window title.",
        "notes": "ph3sx function.\n\nPassing in an empty string will reset the window title to the default."
    },
    {
        "name": "SetEnableUnfocusedProcessing",
        "arguments": [
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Enables or disables unfocused processing.",
        "notes": "ph3sx function."
    },
    {
        "name": "GetLastFrameUpdateSpeed",
        "arguments": [],
        "return": {
            "name": "tiem taken to update scripts on previous frame in milliseconds",
            "type": "number (int)"
        },
        "description": "Returns the time the engine took to update scripts in the previous frame in milliseconds.",
        "notes": "ph3sx function."
    },
    {
        "name": "GetLastFrameRenderSpeed",
        "arguments": [],
        "return": {
            "name": "tiem taken to render the previous frame in milliseconds",
            "type": "number (int)"
        },
        "description": "Returns the time the engine took to render the previous frame in milliseconds.",
        "notes": "ph3sx function."
    },
    
    {
        "name": "SetScore",
        "arguments": [
            {
                "name": "score",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the score value.",
        "notes": "ph3sx function."
    },
    {
        "name": "SetGraze",
        "arguments": [
            {
                "name": "graze",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the graze count.",
        "notes": "ph3sx function."
    },
    {
        "name": "SetPoint",
        "arguments": [
            {
                "name": "point",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the default point item value.",
        "notes": "ph3sx function."
    },

    {
        "name": "AddArchiveFile",
        "arguments": [
            {
                "name": "archivepath",
                "type": "string (path)"
            },
            {
                "name": "offset",
                "type": "number (int, optional overload)"
            }
        ],
        "return": {
            "name": "true if the archive was successfully read, false otherwise",
            "type": "bool"
        },
        "description": "Adds the path to use when reading images or sounds from an archive file.\n\nReturns true if the archive was successfully read, false otherwise.",
        "notes": "ph3sx function.\n\nLoads a .dat archive, with the added capability to specify the read offset.\noffset is an optional argument."
    },
    {
        "name": "GetArchiveFilePathList",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            },
            {
                "name": "isfullpath",
                "type": "bool"
            }
        ],
        "return": {
            "name": "list of stored files in the archive",
            "type": "string (path) []"
        },
        "description": "Lists out the stored file entries in the given .dat archive.",
        "notes": "ph3sx function.\n\nArchive must have already been loaded."
    },
    
    {
        "name": "SaveSnapShotA3",
        "arguments": [
            {
                "name": "path",
                "type": "string (path)"
            },
            {
                "name": "rectx1",
                "type": "number (int)"
            },
            {
                "name": "recty1",
                "type": "number (int)"
            },
            {
                "name": "rectx2",
                "type": "number (int)"
            },
            {
                "name": "recty2",
                "type": "number (int)"
            },
            {
                "name": "format",
                "type": "const"
            }
        ],
        "return": {
            "name": "true if the file was successfully saved; false otherwise",
            "type": "bool"
        },
        "description": "Renders the whole screen to a texture and saves the specified rectangular area of the texture to a file with the given name.",
        "notes": "ph3sx function.\n\nReturns true if the save was successful.\n\nAvailable formats:\nIFF_BMP: Bitmap file. (.bmp) (default)\nIFF_TGA: TARGA bitmap file. (.tga)\nIFF_PNG: Portable Network Graphics file. (.png)\nIFF_DDS: DirectDraw Surface file. (.dds)\nIFF_PPM: Portable PixelMap graphics file."
    },
    
    {
        "name": "UnloadScript",
        "arguments": [
            {
                "name": "scriptpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Unloads a script that was loaded with LoadScript or LoadScriptInThread.",
        "notes": "ph3sx function."
    },
    {
        "name": "UnloadScriptFromCache",
        "arguments": [
            {
                "name": "scriptpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Unloads the given script from the script source cache.",
        "notes": "ph3sx function.\n\nDoes nothing if the script does not exist in the cache."
    },
    {
        "name": "StartScript",
        "arguments": [
            {
                "name": "scriptID",
                "type": "number (Script ID)"
            },
            {
                "name": "removefromload",
                "type": "bool (optional overload)"
            }
        ],
        "return": {},
        "description": "Starts the given script, and whether or not to remove the script from the \"Loaded Scripts\" cache. (NOT the \"Script Source\" cache)",
        "notes": "ph3sx function.\n\nA script that is often restarted would benefit from this overload by using LoadScript only once, and then using StartScript(idScript, false) to avoid having to repeatedly call LoadScript.\n\n*StartScript(idScript) = StartScript(idScript, true)"
    },
    {
        "name": "PauseScript",
        "arguments": [
            {
                "name": "scriptID",
                "type": "number (Script ID)"
            },
            {
                "name": "pause",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Pauses or unpauses the specified script. Not guaranteed to work flawlessly.",
        "notes": "ph3sx function.\n\nCauses an error is the script ID is the ID of the script from which the function was called, aka; \"a script cannot pause itself\"."
    },
    {
        "name": "GetScriptStatus",
        "arguments": [
            {
                "name": "scriptID",
                "type": "number (Script ID)"
            }
        ],
        "return": {
            "name": "script status as a constant",
            "type": "const"
        },
        "description": "Returns the status of the specified script.",
        "notes": "ph3sx function.\n\nPossible return values:\n- STATUS_LOADING ; Script is currently loading.\n- STATUS_LOADED ; Script has been loaded.\n- STATUS_RUNNING ; Script is running.\n- STATUS_PAUSED ; Script has been paused.\n- STATUS_CLOSING ; Script is closing.\n- STATUS_INVALID ; Any other cases, or invalid script ID."
    },

    {
        "name": "GetEventArgumentCount",
        "arguments": [
            {
                "name": "count",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Returns the event argument count of the active event.",
        "notes": "ph3sx function."
    },
    {
        "name": "GetEventArgumentCount",
        "arguments": [
            {
                "name": "count",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Returns the event argument count of the active event.",
        "notes": "ph3sx function."
    },
    {
        "name": "NotifyEvent",
        "arguments": [
            {
                "name": "scriptID",
                "type": "number (Script ID)"
            },
            {
                "name": "eventtype",
                "type": "const"
            },
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {
            "name": "event result",
            "type": "free"
        },
        "description": "Calls the @Event of the script with the specified ID, triggering the specified event.",
        "notes": "ph3sx function.\n\nThe event type may use a value greater than EV_USER.\n\nIt is possible to pass as many event arguments as you want.\n\n*Scripts paused with PauseScript will still be able to run events."
    },
    {
        "name": "NotifyEventOwn",
        "arguments": [
            {
                "name": "eventtype",
                "type": "const"
            },
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {
            "name": "event result",
            "type": "free"
        },
        "description": "Calls the @Event of the script this function was called from, triggering the specified event.",
        "notes": "ph3sx function.\n\nThe event type may use a value greater than EV_USER.\n\nIt is possible to pass as many event arguments as you want.\n\n*Scripts paused with PauseScript will still be able to run events."
    },
    {
        "name": "NotifyEventAll",
        "arguments": [
            {
                "name": "eventtype",
                "type": "const"
            },
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {},
        "description": "Calls the @Event of all scripts, triggering the specified event in all scripts listening for it.",
        "notes": "ph3sx function.\n\nThe event type may use a value greater than EV_USER.\n\nIt is possible to pass as many event arguments as you want.\n\n*Scripts paused with PauseScript will still be able to run events."
    },

    {
        "name": "MatrixIdentity",
        "arguments": [],
        "return": {
            "name": "the identity matrix",
            "type": "matrix"
        },
        "description": "Contructs an identity matrix.",
        "notes": "ph3sx function."
    },
    {
        "name": "MatrixInverse",
        "arguments": [
            {
                "name": "matrix",
                "type": "matrix"
            }
        ],
        "return": {
            "name": "the inverse of the given matrix",
            "type": "matrix"
        },
        "description": "Inverses the given matrix.",
        "notes": "ph3sx function."
    },
    {
        "name": "MatrixAdd",
        "arguments": [
            {
                "name": "matrix1",
                "type": "matrix"
            },
            {
                "name": "matrix2",
                "type": "matrix"
            }
        ],
        "return": {
            "name": "addition of the two given matrices",
            "type": "matrix"
        },
        "description": "Adds two matrices together.",
        "notes": "ph3sx function.\n\nDirectly using the \"+\" operator also works."
    },
    {
        "name": "MatrixSubtract",
        "arguments": [
            {
                "name": "matrix1",
                "type": "matrix"
            },
            {
                "name": "matrix2",
                "type": "matrix"
            }
        ],
        "return": {
            "name": "result of matrix1 subtracted by matrix2",
            "type": "matrix"
        },
        "description": "Subtracts two matrices.",
        "notes": "ph3sx function.\n\nDirectly using the \"-\" operator also works."
    },
    {
        "name": "MatrixMultiply",
        "arguments": [
            {
                "name": "matrix1",
                "type": "matrix"
            },
            {
                "name": "matrix2",
                "type": "matrix"
            }
        ],
        "return": {
            "name": "multipication of the two given matrices",
            "type": "matrix"
        },
        "description": "Multiplies two matrices together.",
        "notes": "ph3sx function."
    },
    {
        "name": "MatrixDivide",
        "arguments": [
            {
                "name": "matrix1",
                "type": "matrix"
            },
            {
                "name": "matrix2",
                "type": "matrix"
            }
        ],
        "return": {
            "name": "result of matrix1 divided by matrix2",
            "type": "matrix"
        },
        "description": "Divides two matrices.",
        "notes": "ph3sx function."
    },
    {
        "name": "MatrixTranspose",
        "arguments": [
            {
                "name": "matrix",
                "type": "matrix"
            }
        ],
        "return": {
            "name": "transposition of the given matrix",
            "type": "matrix"
        },
        "description": "Transposes the given matrix.",
        "notes": "ph3sx function."
    },
    {
        "name": "MatrixDeterminant",
        "arguments": [
            {
                "name": "matrix",
                "type": "matrix"
            }
        ],
        "return": {
            "name": "determinant of the given matrix",
            "type": "number (float)"
        },
        "description": "Calculates the determinant of the given matrix.",
        "notes": "ph3sx function."
    },
    {
        "name": "MatrixLookAtLH",
        "arguments": [
            {
                "name": "eyevector",
                "type": "number (vector3)"
            },
            {
                "name": "destvector",
                "type": "number (vector3)"
            },
            {
                "name": "orientvector",
                "type": "number (vector3)"
            }
        ],
        "return": {
            "name": "left-handed look-at matrix from the given matrix",
            "type": "matrix"
        },
        "description": "Constructs a left-handed look-at matrix.",
        "notes": "ph3sx function."
    },
    {
        "name": "MatrixLookAtRH",
        "arguments": [
            {
                "name": "eyevector",
                "type": "number (vector3)"
            },
            {
                "name": "destvector",
                "type": "number (vector3)"
            },
            {
                "name": "orientvector",
                "type": "number (vector3)"
            }
        ],
        "return": {
            "name": "right-handed look-at matrix from the given matrix",
            "type": "matrix"
        },
        "description": "Constructs a right-handed look-at matrix.",
        "notes": "ph3sx function."
    },
    {
        "name": "MatrixTransformVector",
        "arguments": [
            {
                "name": "position",
                "type": "number (vector3)"
            },
            {
                "name": "transformmatrix",
                "type": "number (vector3)"
            }
        ],
        "return": {
            "name": "transformation of the given position using the given transformmatrix",
            "type": "number (vector4)"
        },
        "description": "Transforms the given (x, y, z, 1) point with the given matrix.",
        "notes": "ph3sx function."
    },
    
    {
        "name": "GetMonitorWidth",
        "arguments": [],
        "return": {
            "name": "user's primary monitor width in pixels",
            "type": "number (int)"
        },
        "description": "Returns the width of the primary display monitor.",
        "notes": "ph3sx function."
    },
    {
        "name": "GetMonitorHeight",
        "arguments": [],
        "return": {
            "name": "user's primary monitor height in pixels",
            "type": "number (int)"
        },
        "description": "Returns the height of the primary display monitor.",
        "notes": "ph3sx function."
    },
    {
        "name": "GetScreenWidth",
        "arguments": [],
        "return": {
            "name": "width of the game engine's screen in pixels",
            "type": "number (int)"
        },
        "description": "Returns the width of the engine screen. (specified in th_dnh.def as \"screen.width\")",
        "notes": "ph3sx function."
    },
    {
        "name": "GetScreenHeight",
        "arguments": [],
        "return": {
            "name": "height of the game engine's screen in pixels",
            "type": "number (int)"
        },
        "description": "Returns the height of the engine screen. (specified in th_dnh.def as \"screen.height\")",
        "notes": "ph3sx function."
    },
    {
        "name": "GetWindowedWidth",
        "arguments": [],
        "return": {
            "name": "windowed width of the game engine's screen in pixels",
            "type": "number (int)"
        },
        "description": "Returns the width of the windowed mode.",
        "notes": "ph3sx function."
    },
    {
        "name": "GetWindowedHeight",
        "arguments": [],
        "return": {
            "name": "windowed height of the game engine's screen in pixels",
            "type": "number (int)"
        },
        "description": "Returns the height of the windowed mode.",
        "notes": "ph3sx function."
    },
    {
        "name": "IsFullscreenMode",
        "arguments": [],
        "return": {
            "name": "true if the engine is fullscreen; false otherwise",
            "type": "bool"
        },
        "description": "Returns whether or not the game is in fullscreen mode.",
        "notes": "ph3sx function.\n\nBoth pseudo and true fullscreen modes register as true."
    },
    
    {
        "name": "SetSoundDivisionVolumeRate",
        "arguments": [
            {
                "name": "division",
                "type": "const"
            },
            {
                "name": "rate",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the volume rate of the given sound division.",
        "notes": "ph3sx function.\n\nThe volume rates of all sound objects assigned to the division are multiplied by the division's rate."
    },
    {
        "name": "SetSoundDivisionVolumeRate",
        "arguments": [
            {
                "name": "division",
                "type": "const"
            }
        ],
        "return": {
            "name": "volume rate of the given sound division",
            "type": "number (float)"
        },
        "description": "Returns the volume rate of the given sound division.",
        "notes": "ph3sx function."
    },

    {
        "name": "GetVirtualKeyMapping",
        "arguments": [
            {
                "name": "vk",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "key mapping for given virtual key as [keyboard, gamepad]",
            "type": "number (int) []"
        },
        "description": "Returns the given virtual key's current key mapping in the format [keyboard, gamepad].",
        "notes": "ph3sx function."
    },
    
    {
        "name": "LoadTextureEx",
        "arguments": [
            {
                "name": "texturepath",
                "type": "string (path)"
            },
            {
                "name": "usemipmap",
                "type": "bool"
            },
            {
                "name": "usenopowoftwo",
                "type": "bool"
            }
        ],
        "return": {
            "name": "true if loading was successful; false otherwise",
            "type": "bool"
        },
        "description": "Loads a texture with more options.",
        "notes": "ph3sx function.\n\nReturns a boolean value of whether loading was successful.\n\n\"usemipmap\" (use mipmap) option generates a mipmap chain, causes textures to look better when scaled down when used with mipmap filtering.\n\"usenopowoftwo\" (use non-power-of-two) option prevents blurring when the source texture's dimensions are not powers of two. (Due to DirectX's nature, may cause rendering to be slightly slower.)"
    },
    {
        "name": "LoadTextureInLoadThreadEx",
        "arguments": [
            {
                "name": "texturepath",
                "type": "string (path)"
            },
            {
                "name": "usemipmap",
                "type": "bool"
            },
            {
                "name": "usenopowoftwo",
                "type": "bool"
            }
        ],
        "return": {
            "name": "true if loading was successful; false otherwise",
            "type": "bool"
        },
        "description": "Loads a texture in the load thread with more options.",
        "notes": "ph3sx function.\n\nReturns a boolean value of whether loading was successful.\n\n\"usemipmap\" (use mipmap) option generates a mipmap chain, causes textures to look better when scaled down when used with mipmap filtering.\n\"usenopowoftwo\" (use non-power-of-two) option prevents blurring when the source texture's dimensions are not powers of two. (Due to DirectX's nature, may cause rendering to be slightly slower.)"
    },
    {
        "name": "LoadShader",
        "arguments": [
            {
                "name": "shaderpath",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "true if loading was successful; false otherwise",
            "type": "bool"
        },
        "description": "Loads a shader file, and returns a boolean value of whether loading was successful.",
        "notes": "ph3sx function."
    },
    {
        "name": "RemoveShader",
        "arguments": [
            {
                "name": "shaderpath",
                "type": "string (path)"
            }
        ],
        "return": {},
        "description": "Removes a shader data that was previously loaded with LoadShader.",
        "notes": "ph3sx function."
    },
    {
        "name": "LoadMesh",
        "arguments": [
            {
                "name": "meshpath",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "true if loading was successful; false otherwise",
            "type": "bool"
        },
        "description": "Loads a mesh data file, and returns a boolean value of whether loading was successful.",
        "notes": "ph3sx function."
    },
    {
        "name": "RemoveMesh",
        "arguments": [
            {
                "name": "meshpath",
                "type": "string (path)"
            }
        ],
        "return": {
            "name": "true if loading was successful; false otherwise",
            "type": "bool"
        },
        "description": "Removes a mesh data that was previously loaded with LoadMesh.",
        "notes": "ph3sx function."
    },

    {
        "name": "CreateRenderTargetEx",
        "arguments": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "width",
                "type": "number (int)"
            },
            {
                "name": "height",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "true if creation was successful; false otherwise",
            "type": "bool"
        },
        "description": "Creates a render target with the specified name, width, and height.",
        "notes": "ph3sx function.\n\nReturns a boolean value of whether creation was successful.\nFails if either value is not a positive integer."
    },
    {
        "name": "ClearRenderTargetA1",
        "arguments": [
            {
                "name": "name",
                "type": "string"
            }
        ],
        "return": {
            "name": "true if render target was successfully cleared; false otherwise",
            "type": "bool"
        },
        "description": "Clears the render target.",
        "notes": "ph3sx function.\n\nReturns a boolean value of whether operation was successful."
    },
    {
        "name": "ClearRenderTargetA2",
        "arguments": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "red",
                "type": "number (int)"
            },
            {
                "name": "green",
                "type": "number (int)"
            },
            {
                "name": "blue",
                "type": "number (int)"
            },
            {
                "name": "alpha",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "true if render target was successfully cleared; false otherwise",
            "type": "bool"
        },
        "description": "Clears the render target and fills it with the specified color and alpha.",
        "notes": "ph3sx function.\n\nReturns a boolean value of whether operation was successful."
    },
    {
        "name": "ClearRenderTargetA3",
        "arguments": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "red",
                "type": "number (int)"
            },
            {
                "name": "green",
                "type": "number (int)"
            },
            {
                "name": "blue",
                "type": "number (int)"
            },
            {
                "name": "alpha",
                "type": "number (int)"
            },
            {
                "name": "rectx1",
                "type": "number (int)"
            },
            {
                "name": "recty1",
                "type": "number (int)"
            },
            {
                "name": "rectx2",
                "type": "number (int)"
            },
            {
                "name": "recty2",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "true if render target was successfully cleared; false otherwise",
            "type": "bool"
        },
        "description": "Clears the render target in the specified rectangular area and fills that area with the specified color and alpha.",
        "notes": "ph3sx function.\n\nReturns a boolean value of whether operation was successful."
    },
    {
        "name": "SaveRenderedTextureA3",
        "arguments": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "path",
                "type": "string (path)"
            },
            {
                "name": "rectx1",
                "type": "number (int)"
            },
            {
                "name": "recty1",
                "type": "number (int)"
            },
            {
                "name": "rectx2",
                "type": "number (int)"
            },
            {
                "name": "recty2",
                "type": "number (int)"
            },
            {
                "name": "format",
                "type": "const"
            }
        ],
        "return": {
            "name": "true if rendered texture was successfully saved; false otherwise",
            "type": "bool"
        },
        "description": "Saves rendered texture to file, given x1/y1/x2/y2 bounds of the region to capture and the format to save as.",
        "notes": "ph3sx function.\n\nThe image file created by this function can be used immediately after its execution.\n\nAvailable formats are:\n- IFF_BMP: Bitmap file. (.bmp) (default)\n- IFF_JPG: Joint Photographic Experts Group graphics file. (.jpeg)\n- IFF_TGA: TARGA bitmap file. (.tga)\n- IFF_PNG: Portable Network Graphics file. (.png)\n- IFF_DDS: DirectDraw Surface file. (.dds)\n- IFF_PPM: Portable PixelMap graphics file. (.ppm)"
    },
    
    {
        "name": "IsVertexShaderSupported",
        "arguments": [
            {
                "name": "major",
                "type": "number (int)"
            },
            {
                "name": "minor",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "true if the vertex shader version is supported by the video card; false otherwise",
            "type": "bool"
        },
        "description": "Checks if the video card on the device supports the given vertex shader version.",
        "notes": "ph3sx function."
    },
    
    {
        "name": "SetFogParam",
        "arguments": [
            {
                "name": "start",
                "type": "number"
            },
            {
                "name": "end",
                "type": "number"
            },
            {
                "name": "red",
                "type": "number (int, can be xrgb hex instead)"
            },
            {
                "name": "green",
                "type": "number (int, optional overload if red contains xrgb hex)"
            },
            {
                "name": "blue",
                "type": "number (int, optional overload if red contains xrgb hex)"
            }
        ],
        "return": {},
        "description": "Sets the fog parameters with the start and end distances from the player. Color can be defined using RGB or XRGB hexadecimal.",
        "notes": "ph3sx function.\n\nIf using RGB, it is on 0-255 scale.\nTo turn the screen dark around the player using RGB, for example, you can use SetFogParam(250, 700, 0, 0, 0).\n\nIf using XRGB hex, use just the red argument and leave out the green and blue.\nTo turn the screen dark around the player using XRGB hex, for example, you can use SetFogParam(250, 700, 0x000000)."
    },

    {
        "name": "SetCameraMode",
        "arguments": [
            {
                "name": "mode",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Switches the 3D camera between available modes.",
        "notes": "ph3sx function.\n\nModes:\n- CAMERA_NORMAL ; The normal 3D camera mode, positioned with elevation and azimuth angles.\n- CAMERA_LOOKAT ; The new 3D camera mode for maths enthusiasts, with the ability to directly specify camera position and view target position. This can be configured with SetCameraFocusX/Y/Z or SetCameraPosEye and SetCameraPosLookAt."
    },
    {
        "name": "SetCameraPosEye",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "zcoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the x, y, and z coordinates of the camera focus.",
        "notes": "ph3sx function.\n\nAlias of SetCameraFocusXYZ."
    },
    {
        "name": "SetCameraPosLookAt",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "zcoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the camera's \"look-at\" position.",
        "notes": "ph3sx function.\n\nUsed with CAMERA_LOOKAT mode."
    },
    {
        "name": "GetCameraViewMatrix",
        "arguments": [],
        "return": {
            "name": "3D camera's view matrix",
            "type": "matrix"
        },
        "description": "Returns the 3D camera's view matrix.",
        "notes": "ph3sx function."
    },
    {
        "name": "GetCameraProjectionMatrix",
        "arguments": [],
        "return": {
            "name": "3D camera's projection matrix",
            "type": "matrix"
        },
        "description": "Returns the 3D camera's projection matrix.",
        "notes": "ph3sx function."
    },
    {
        "name": "GetCameraViewProjectionMatrix",
        "arguments": [],
        "return": {
            "name": "3D camera's view-projection matrix",
            "type": "matrix"
        },
        "description": "Returns the 3D camera's view-projection matrix.",
        "notes": "ph3sx function."
    },

    {
        "name": "IsIntersected_Point_Polygon",
        "arguments": [
            {
                "name": "pointx",
                "type": "number"
            },
            {
                "name": "pointy",
                "type": "number"
            },
            {
                "name": "polygonverts",
                "type": "number (float) [] []"
            }
        ],
        "return": {
            "name": "true if the given point intersects with the given polygon; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given point intersects with the polygon.",
        "notes": "ph3sx function.\n\nThe polygon can be convex, concave, or complex (self-intersecting)."
    },
    {
        "name": "IsIntersected_Point_Circle",
        "arguments": [
            {
                "name": "pointx",
                "type": "number"
            },
            {
                "name": "pointy",
                "type": "number"
            },
            {
                "name": "circlex",
                "type": "number"
            },
            {
                "name": "circley",
                "type": "number"
            },
            {
                "name": "circleradius",
                "type": "number"
            }
        ],
        "return": {
            "name": "true if the given point intersects with the given circle; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given point intersects with the circle.",
        "notes": "ph3sx function."
    },
    {
        "name": "IsIntersected_Point_Ellipse",
        "arguments": [
            {
                "name": "pointx",
                "type": "number"
            },
            {
                "name": "pointy",
                "type": "number"
            },
            {
                "name": "ellipsex",
                "type": "number"
            },
            {
                "name": "ellipsey",
                "type": "number"
            },
            {
                "name": "ellipseradiusx",
                "type": "number"
            },
            {
                "name": "ellipseradiusy",
                "type": "number"
            }
        ],
        "return": {
            "name": "true if the given point intersects with the given ellipse; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given point intersects with the ellipse.",
        "notes": "ph3sx function."
    },
    {
        "name": "IsIntersected_Point_Line",
        "arguments": [
            {
                "name": "pointx",
                "type": "number"
            },
            {
                "name": "pointy",
                "type": "number"
            },
            {
                "name": "linestartx",
                "type": "number"
            },
            {
                "name": "linestarty",
                "type": "number"
            },
            {
                "name": "lineendx",
                "type": "number"
            },
            {
                "name": "lineendy",
                "type": "number"
            },
            {
                "name": "linewidth",
                "type": "number"
            }
        ],
        "return": {
            "name": "true if the given point intersects with the given line; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given point intersects with the line.",
        "notes": "ph3sx function."
    },
    {
        "name": "IsIntersected_Point_RegularPolygon",
        "arguments": [
            {
                "name": "pointx",
                "type": "number"
            },
            {
                "name": "pointy",
                "type": "number"
            },
            {
                "name": "polygonx",
                "type": "number"
            },
            {
                "name": "polygony",
                "type": "number"
            },
            {
                "name": "polygonradius",
                "type": "number"
            },
            {
                "name": "polygonedgecount",
                "type": "number (int)"
            },
            {
                "name": "polygonangle",
                "type": "number (degrees)"
            }
        ],
        "return": {
            "name": "true if the given point intersects with the given regular polygon; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given point intersects with the regular polygon.",
        "notes": "ph3sx function."
    },
    {
        "name": "IsIntersected_Circle_Polygon",
        "arguments": [
            {
                "name": "circlex",
                "type": "number"
            },
            {
                "name": "circley",
                "type": "number"
            },
            {
                "name": "circleradius",
                "type": "number"
            },
            {
                "name": "polygonverts",
                "type": "number (float) [] []"
            }
        ],
        "return": {
            "name": "true if the given circle intersects with the given polygon; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given circle intersects with the polygon.",
        "notes": "ph3sx function.\n\nThe polygon can be convex, concave, or complex (self-intersecting)."
    },
    {
        "name": "IsIntersected_Circle_Circle",
        "arguments": [
            {
                "name": "circle1x",
                "type": "number"
            },
            {
                "name": "circle1y",
                "type": "number"
            },
            {
                "name": "circle1radius",
                "type": "number"
            },
            {
                "name": "circle2x",
                "type": "number"
            },
            {
                "name": "circle2y",
                "type": "number"
            },
            {
                "name": "circle2radius",
                "type": "number"
            }
        ],
        "return": {
            "name": "true if circle1 intersects circle2; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the first given circle intersects with the second given circle.",
        "notes": "ph3sx function."
    },
    {
        "name": "IsIntersected_Circle_Ellipse",
        "arguments": [
            {
                "name": "circlex",
                "type": "number"
            },
            {
                "name": "circley",
                "type": "number"
            },
            {
                "name": "circleradius",
                "type": "number"
            },
            {
                "name": "ellipsex",
                "type": "number"
            },
            {
                "name": "ellipsey",
                "type": "number"
            },
            {
                "name": "ellipseradiusx",
                "type": "number"
            },
            {
                "name": "ellipseradiusy",
                "type": "number"
            }
        ],
        "return": {
            "name": "true if the given circle intersects with the given ellipse; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given circle intersects with the ellipse.",
        "notes": "ph3sx function."
    },
    {
        "name": "IsIntersected_Circle_RegularPolygon",
        "arguments": [
            {
                "name": "circlex",
                "type": "number"
            },
            {
                "name": "circley",
                "type": "number"
            },
            {
                "name": "circleradius",
                "type": "number"
            },
            {
                "name": "polygonx",
                "type": "number"
            },
            {
                "name": "polygony",
                "type": "number"
            },
            {
                "name": "polygonradius",
                "type": "number"
            },
            {
                "name": "polygonedgecount",
                "type": "number (int)"
            },
            {
                "name": "polygonangle",
                "type": "number (degrees)"
            }
        ],
        "return": {
            "name": "true if the given point intersects with the given regular polygon; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given point intersects with the regular polygon.",
        "notes": "ph3sx function."
    },
    {
        "name": "IsIntersected_Line_Polygon",
        "arguments": [
            {
                "name": "linestartx",
                "type": "number"
            },
            {
                "name": "linestarty",
                "type": "number"
            },
            {
                "name": "lineendx",
                "type": "number"
            },
            {
                "name": "lineendy",
                "type": "number"
            },
            {
                "name": "linewidth",
                "type": "number"
            },
            {
                "name": "polygonverts",
                "type": "number (float) [] []"
            }
        ],
        "return": {
            "name": "true if the given line intersects with the given polygon; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given line intersects with the polygon.",
        "notes": "ph3sx function.\n\nThe polygon can be convex, concave, or complex (self-intersecting)."
    },
    {
        "name": "IsIntersected_Line_Circle",
        "arguments": [
            {
                "name": "linestartx",
                "type": "number"
            },
            {
                "name": "linestarty",
                "type": "number"
            },
            {
                "name": "lineendx",
                "type": "number"
            },
            {
                "name": "lineendy",
                "type": "number"
            },
            {
                "name": "linewidth",
                "type": "number"
            },
            {
                "name": "circlex",
                "type": "number"
            },
            {
                "name": "circley",
                "type": "number"
            },
            {
                "name": "circleradius",
                "type": "number"
            }
        ],
        "return": {
            "name": "true if the given line intersects with the given circle; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given line intersects with the circle.",
        "notes": "ph3sx function."
    },
    {
        "name": "IsIntersected_Line_Ellipse",
        "arguments": [
            {
                "name": "linestartx",
                "type": "number"
            },
            {
                "name": "linestarty",
                "type": "number"
            },
            {
                "name": "lineendx",
                "type": "number"
            },
            {
                "name": "lineendy",
                "type": "number"
            },
            {
                "name": "linewidth",
                "type": "number"
            },
            {
                "name": "ellipsex",
                "type": "number"
            },
            {
                "name": "ellipsey",
                "type": "number"
            },
            {
                "name": "ellipseradiusx",
                "type": "number"
            },
            {
                "name": "ellipseradiusy",
                "type": "number"
            }
        ],
        "return": {
            "name": "true if the given line intersects with the given ellipse; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given line intersects with the ellipse.",
        "notes": "ph3sx function."
    },
    {
        "name": "IsIntersected_Line_Line",
        "arguments": [
            {
                "name": "line1startx",
                "type": "number"
            },
            {
                "name": "line1starty",
                "type": "number"
            },
            {
                "name": "line1endx",
                "type": "number"
            },
            {
                "name": "line1endy",
                "type": "number"
            },
            {
                "name": "line1width",
                "type": "number"
            },
            {
                "name": "line2startx",
                "type": "number"
            },
            {
                "name": "line2starty",
                "type": "number"
            },
            {
                "name": "line2endx",
                "type": "number"
            },
            {
                "name": "line2endy",
                "type": "number"
            },
            {
                "name": "line2width",
                "type": "number"
            }
        ],
        "return": {
            "name": "true if line1 intersects with line2; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the first given line intersects with the second given line.",
        "notes": "ph3sx function."
    },
    {
        "name": "IsIntersected_Line_RegularPolygon",
        "arguments": [
            {
                "name": "linestartx",
                "type": "number"
            },
            {
                "name": "linestarty",
                "type": "number"
            },
            {
                "name": "lineendx",
                "type": "number"
            },
            {
                "name": "lineendy",
                "type": "number"
            },
            {
                "name": "linewidth",
                "type": "number"
            },
            {
                "name": "polygonx",
                "type": "number"
            },
            {
                "name": "polygony",
                "type": "number"
            },
            {
                "name": "polygonradius",
                "type": "number"
            },
            {
                "name": "polygonedgecount",
                "type": "number (int)"
            },
            {
                "name": "polygonangle",
                "type": "number (degrees)"
            }
        ],
        "return": {
            "name": "true if the given line intersects with the given regular polygon; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given line intersects with the regular polygon.",
        "notes": "ph3sx function."
    },
    {
        "name": "IsIntersected_Polygon_Polygon",
        "arguments": [
            {
                "name": "polygon1verts",
                "type": "number (float) [] []"
            },
            {
                "name": "polygon2verts",
                "type": "number (float) [] []"
            }
        ],
        "return": {
            "name": "true if polygon1 intersects with polygon2; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the first given polygon intersects with the second given polygon.",
        "notes": "ph3sx function.\n\nThe polygons can be convex, concave, or complex (self-intersecting)."
    },
    {
        "name": "IsIntersected_Polygon_Ellipse",
        "arguments": [
            {
                "name": "polygonverts",
                "type": "number (float) [] []"
            },
            {
                "name": "ellipsex",
                "type": "number"
            },
            {
                "name": "ellipsey",
                "type": "number"
            },
            {
                "name": "ellipseradiusx",
                "type": "number"
            },
            {
                "name": "ellipseradiusy",
                "type": "number"
            }
        ],
        "return": {
            "name": "true if the given polygon intersects with the given ellipse; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given polygon intersects with the ellipse.",
        "notes": "ph3sx function.\n\nThe polygon can be convex, concave, or complex (self-intersecting)."
    },
    {
        "name": "IsIntersected_Polygon_RegularPolygon",
        "arguments": [
            {
                "name": "polygon1verts",
                "type": "number (float) [] []"
            },
            {
                "name": "polygonx",
                "type": "number"
            },
            {
                "name": "polygony",
                "type": "number"
            },
            {
                "name": "polygonradius",
                "type": "number"
            },
            {
                "name": "polygonedgecount",
                "type": "number (int)"
            },
            {
                "name": "polygonangle",
                "type": "number (degrees)"
            }
        ],
        "return": {
            "name": "true if the given polygon intersects with the given regular polygon; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the given polygon intersects with the regular polygon.",
        "notes": "ph3sx function.\n\nThe polygon can be convex, concave, or complex (self-intersecting)."
    },

    {
        "name": "ColorARGBToHex",
        "arguments": [
            {
                "name": "alpha",
                "type": "number (int) OR number (int) []"
            },
            {
                "name": "red",
                "type": "number (int, optional overload if alpha is [a,r,g,b] array)"
            },
            {
                "name": "green",
                "type": "number (int, optional overload if alpha is [a,r,g,b] array)"
            },
            {
                "name": "blue",
                "type": "number (int, optional overload if alpha is [a,r,g,b] array)"
            }
        ],
        "return": {
            "name": "hex conversion of the given argb color",
            "type": "number (int)"
        },
        "description": "Returns an ARGB hexadecimal color value of the given colors.",
        "notes": "ph3sx function.\n\nThe first (alpha) argument also accepts a four-element array containing [alpha, red, gree, blue], which makes the other three arguments optional if this method is used.\nExample:\nColorARGBToHex(255, 255, 255, 255); or ColorARGBToHex([255, 255, 255, 255]);\n//Result: 0xFFFFFFFF\n\nColorARGBToHex(67, 255, 0, 125); or ColorARGBToHex([67, 255, 0, 125]);\n//Result: 0x43FF007D"
    },
    {
        "name": "ColorHexToARGB",
        "arguments": [
            {
                "name": "hexcolor",
                "type": "number (int)"
            },
            {
                "name": "control",
                "type": "number (int, optional overload)"
            }
        ],
        "return": {
            "name": "argb color array conversion of the given hex color",
            "type": "number (int) []"
        },
        "description": "Returns an ARGB color array of the given hexadecimal color (D3DCOLOR). If provided, the color array that is returned will be controlled by the control argument.",
        "notes": "ph3sx function.\n\nExample with no control argument:\nColorHexToARGB(0xFFFFFFFF);\n//Result: [255, 255, 255, 255]\n\nColorHexToARGB(0x43FF007D);\n//Result: [67, 255, 0, 125]\nThe control value dictates which color channels to output, and in which order.\nThe bit format is:\nMSB                         LSB   (16 bit)\n000000   00      00  00  00  00\nUnused   Count   1st 2nd 3rd 4th\n\n- Bits 0-5 are unused.\n- Bits 6-7 control the amount of color channels to return, subtracted by 1. (11 is 4 channels, 10 is 3, 01 is 2, 00 is 1)\n- Bits 8-15 control the order of the color channels, duplication is allowed.\n00 (0) signifies the A channel.\n01 (1) signifies the R channel.\n10 (2) signifies the G channel.\n11 (3) signifies the B channel.\n\nExamples:\n0b1100011011 (0x31b) -> [A, R, G, B]\n0b1101101100 (0x36c) -> [R, G, B, A]\n0b1100000000 (0x300) -> [A, A, A, A]\n0b1001101100 (0x26c) -> [R, G, B]\n0b0001000000 (0x040) -> [R]\n\nFor people whose brain lacks the required amount of sanity (or lack thereof) to understand the control argument, here are some constants:\nCOLOR_PERMUTE_ARGB\nCOLOR_PERMUTE_RGBA\nCOLOR_PERMUTE_BGRA\nCOLOR_PERMUTE_RGB\nCOLOR_PERMUTE_BGR\nCOLOR_PERMUTE_A\nCOLOR_PERMUTE_R\nCOLOR_PERMUTE_G\nCOLOR_PERMUTE_B\n\nExample with control argument:\nColorHexToARGB(0xFFFFFFFF, 0x31b);\n//Result: [255, 255, 255, 255]\n\nColorHexToARGB(0xFFFFFFFF, 0x000);\n//Result: [255]\n\nColorHexToARGB(0x43FF007D, 0x31b)\n//Result: [67, 255, 0, 125]\n\nColorHexToARGB(0x43FF007D, 0x36c);\n//Result: [255, 0, 125, 67]\n\nColorHexToARGB(0x43FF007D, 0x2e4);\n//Result: [125, 0, 255]"
    },
    {
        "name": "ColorRGBtoHSV",
        "arguments": [
            {
                "name": "red",
                "type": "number (int)"
            },
            {
                "name": "green",
                "type": "number (int)"
            },
            {
                "name": "blue",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "hsv color array conversion of the given rgb color",
            "type": "number (int) []"
        },
        "description": "Returns the given RGB color as a HSV color array.",
        "notes": "ph3sx function."
    },
    {
        "name": "ColorHexRGBtoHSV",
        "arguments": [
            {
                "name": "hexcolor",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "hsv color array conversion of the given xrgb color",
            "type": "number (int) []"
        },
        "description": "Returns the given XRGB hexadecimal color as a HSV color array.",
        "notes": "ph3sx function."
    },
    {
        "name": "ColorHSVtoRGB",
        "arguments": [
            {
                "name": "hue",
                "type": "number (int)"
            },
            {
                "name": "saturation",
                "type": "number (int)"
            },
            {
                "name": "value",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "rgb color array conversion of the given hsv color",
            "type": "number (int) []"
        },
        "description": "Returns the given HSV color as an RGB color array.",
        "notes": "ph3sx function."
    },
    {
        "name": "ColorHSVtoHexRGB",
        "arguments": [
            {
                "name": "hue",
                "type": "number (int)"
            },
            {
                "name": "saturation",
                "type": "number (int)"
            },
            {
                "name": "value",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "xrgb color conversion of the given hsv color",
            "type": "number (int)"
        },
        "description": "Returns the given HSV color as an XRGB hexadecimal color.",
        "notes": "ph3sx function."
    },

    {
        "name": "SetInvalidPositionReturn",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the default position that position-fetching functions will return if the object does not exist.",
        "notes": "ph3sx function.\n\nThe default value is (0, 0)."
    },
    {
        "name": "GetObjectDistance",
        "arguments": [
            {
                "name": "objID1",
                "type": "number (Object ID)"
            },
            {
                "name": "objID2",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "distance between two objects",
            "type": "number (float)"
        },
        "description": "Returns the distance between the two objects.",
        "notes": "ph3sx function.\n\nIf one of the objects' ID is invalid, -1 will be returned.\n\nThe Z positions will not be included in the calculation if neither objects are 3D-valid."
    },
    {
        "name": "GetObjectDistanceSq",
        "arguments": [
            {
                "name": "objID1",
                "type": "number (Object ID)"
            },
            {
                "name": "objID2",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "square of the distance between two objects",
            "type": "number (float)"
        },
        "description": "Returns the square of the distance between two objects.",
        "notes": "ph3sx function.\n\nIf one of the objects' ID is invalid, -1 will be returned.\n\nThe Z positions will not be included in the calculation if neither objects are 3D-valid."
    },
    {
        "name": "GetObjectDeltaAngle",
        "arguments": [
            {
                "name": "objID1",
                "type": "number (Object ID)"
            },
            {
                "name": "objID2",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "angle between two objects",
            "type": "number (float)"
        },
        "description": "Returns the angle between two objects.",
        "notes": "ph3sx function.\n\nIf one of the objects' ID is invalid, -1 will be returned.\n\nThe Z positions will not be included in the calculation if neither objects are 3D-valid."
    },
    {
        "name": "Obj_GetValueI",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "key",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "value for associated integer key in object's values",
            "type": "free"
        },
        "description": "Returns the value associated with the given integer key for the given object, previously set by Obj_SetValueI.",
        "notes": "ph3sx function.\n\nIf the key-value pair does not exist or was deleted, attempting to access it will crash the program.\n\nObj_GetValue with int value key."
    },
    {
        "name": "Obj_GetValueDI",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "key",
                "type": "number (int)"
            },
            {
                "name": "default",
                "type": "free"
            }
        ],
        "return": {
            "name": "value for associated integer key in object's values",
            "type": "free"
        },
        "description": "Returns the value associated with the given integer key for the given object, previously set by Obj_SetValueI.",
        "notes": "ph3sx function.\n\nIf the key-value pair does not exist or was deleted, returns the provided default instead.\n\nObj_GetValueD with int value key."
    },
    {
        "name": "Obj_SetValueI",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "key",
                "type": "number (int)"
            },
            {
                "name": "value",
                "type": "free"
            }
        ],
        "return": {
            "name": "specified value",
            "type": "free"
        },
        "description": "For the given object, maps the given integer key to the given value.",
        "notes": "ph3sx function.\n\nThe value can be returned by using Obj_GetValue with the corresponding key.\n\nObj_SetValue with int value key."
    },
    {
        "name": "Obj_DeleteValueI",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "key",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "value for associated integer key in object's values",
            "type": "free"
        },
        "description": "Deletes the integer key-value pair previously set by Obj_SetValueI.",
        "notes": "ph3sx function.\n\nObj_DeleteValue with int value key."
    },
    {
        "name": "Obj_IsValueExistsI",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "key",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "true if for the given object, the given is mapped; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the object has a key-value pair for the given integer key.",
        "notes": "ph3sx function.\n\nObj_IsValueExists with int value key."
    },
    {
        "name": "Obj_GetValueCount",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "count of the object's assigned values",
            "type": "number (int)"
        },
        "description": "Returns the number of stored values in the object's string-indexed value table.",
        "notes": "ph3sx function."
    },
    {
        "name": "Obj_GetValueCountI",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "count of the object's assigned values",
            "type": "number (int)"
        },
        "description": "Returns the number of stored values in the object's int-indexed value table.",
        "notes": "ph3sx function."
    },
    {
        "name": "Obj_CopyValueTable",
        "arguments": [
            {
                "name": "destobjID",
                "type": "number (Object ID)"
            },
            {
                "name": "sourceobjID",
                "type": "number (Object ID)"
            },
            {
                "name": "mode",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "amount of values in the source object",
            "type": "number (int)"
        },
        "description": "Copies the source's object value table to the destination's object value table.",
        "notes": "ph3sx function.\n\nAvailable modes:\n0 - Object value table is cleared before the copy.\n1 - Value will be overwritten in case of key conflicts.\n2 - Value will not be overwritten in case of key conflicts."
    },

    {
        "name": "ObjShader_SetShaderT",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "shadername",
                "type": "string"
            },
            {
                "name": "shadersource",
                "type": "string"
            }
        ],
        "return": {
            "name": "true if the operation was successful; false otherwise",
            "type": "bool"
        },
        "description": "Compiles a shader from the given string. Returns whether the operation was successful.",
        "notes": "ph3sx function.\n\nShader name should be unique."
    },
    
    {
        "name": "ObjRender_SetBlendType",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "blendtype",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the blend type for the specified object.",
        "notes": "ph3sx function.\n\nAvailable blend types are:\n\nBLEND_ALPHA - Overlays the image on top of the background, using the image's alpha values to determine transparency of individual pixels.\n\nBLEND_ALPHA_INV - Alpha blending with source color inversion.\n\nBLEND_ADD_RGB - Adds the image's pixel values to those of the background, resulting in a brighter image.\n\nBLEND_MULTIPLY - Multiplies the image's pixel values with those of the background, as a ratio from 0 to 255.\n\nBLEND_SUBTRACT - Subtracts the image's pixel values from those of the background, resulting in a darker image.\n\nBLEND_ADD_ARGB - Adds the image's pixel values to those of the background, using the image's alpha values to determine transparency of individual pixels.\n\nBLEND_INV_DESTRGB - Inverts the color of the background in relation to the intensity of the image's pixel values. Also known as exclusion blending.\n\nBLEND_SHADOW (undocumented) - Inverts the image's pixel values, then applies multiply-blend with the background."
    },

    {
        "name": "ObjRender_SetScaleXYZ",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xscale",
                "type": "number"
            },
            {
                "name": "yscale",
                "type": "number (optional overload if scaling uniformly)"
            },
            {
                "name": "zscale",
                "type": "number (optional overload if scaling uniformly)"
            }
        ],
        "return": {},
        "description": "Sets the x, y, and z scales of the object associated with objID.",
        "notes": "ph3sx function.\n\nIf you intend to scale uniformly, you only need to use the xscale argument and leave out yscale and zscale.\n\nExample:\nObjRender_SetScaleXYZ(obj, 2); is equivalent to ObjRender_SetScaleXYZ(obj, 2, 2, 2);"
    },
    
    {
        "name": "ObjRender_SetColor",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "red",
                "type": "number (int) or number (int) []"
            },
            {
                "name": "green",
                "type": "number (int, optional overload if hex replaces red value)"
            },
            {
                "name": "blue",
                "type": "number (int, optional overload if hex replaces red value)"
            }
        ],
        "return": {},
        "description": "Sets the color of the object associated with objID using RGB on a 0-255 scale or by XRGB.",
        "notes": "ph3sx changed function.\n\nIf using XRGB hexadecimal, place the XRGB color code into the red argument and leave out the green and blue arguments.\n\nExample:\nObjRender_SetColor(obj, 0xFF7B32); is equivalent to ObjRender_SetColor(obj, 255, 123, 50);"
    },
    {
        "name": "ObjRender_SetColorHSV",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "hue",
                "type": "number (int)"
            },
            {
                "name": "saturation",
                "type": "number (int)"
            },
            {
                "name": "value",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the object's RGB color as a HSV color.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjRender_GetColor",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "array containing the object's color formatted as [r, g, b]",
            "type": "number (int) []"
        },
        "description": "Returns an [r, g, b] array of the object's color.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjRender_GetColorHex",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "the object's color in hexadecimal format",
            "type": "number (int)"
        },
        "description": "Returns the object's color an XRGB hexadecimal color value.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjRender_GetAlpha",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "the object's alpha as an integer",
            "type": "number (int)"
        },
        "description": "Returns the object's alpha value.",
        "notes": "ph3sx function."
    },

    {
        "name": "ObjRender_SetTextureFilterMin",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "mode",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the minification filtering mode for the render object.",
        "notes": "ph3sx function.\n\nFiltering modes:\n- FILTER_NONE\n- FILTER_POINT\n- FILTER_LINEAR\n- FILTER_ANISOTROPIC\n\nDefault is FILTER_LINEAR."
    },
    {
        "name": "ObjRender_SetTextureFilterMag",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "mode",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the magnification filtering mode for the render object.",
        "notes": "ph3sx function.\n\nFiltering modes:\n- FILTER_NONE\n- FILTER_POINT\n- FILTER_LINEAR\n- FILTER_ANISOTROPIC\n\nDefault is FILTER_LINEAR."
    },
    {
        "name": "ObjRender_SetTextureFilterMip",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "mode",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the mipmap filtering mode for the render object.",
        "notes": "ph3sx function.\n\nFiltering modes:\n- FILTER_NONE\n- FILTER_POINT\n- FILTER_LINEAR\n- FILTER_ANISOTROPIC\n\nDefault is FILTER_NONE."
    },
    {
        "name": "ObjRender_SetTextureFilter",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "filtermin",
                "type": "const"
            },
            {
                "name": "filtermag",
                "type": "const"
            },
            {
                "name": "filtermip",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the minification, magnification, and mipmap filtering mode for the render object.",
        "notes": "ph3sx function.\n\nFiltering modes:\n- FILTER_NONE\n- FILTER_POINT\n- FILTER_LINEAR\n- FILTER_ANISOTROPIC\n\nDefaults:\n- filtermin = FILTER_LINEAR\n- filtermag = FILTER_LINEAR\n- filtermip = FILTER_NONE."
    },
    
    {
        "name": "ObjRender_SetVertexShaderRenderingMode",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "usevertshader",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether the render object will be rendered with support for vertex shaders.",
        "notes": "ph3sx function.\n\nDefault is false.\n\nRendering will not be performed without an attached shader object when this is set to true.\nWhen using vertex shader rendering mode with 3D objects, fog must be manually computed with the shader."
    },
    {
        "name": "ObjRender_SetEnableDefaultTransformMatrix",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether the render object will calculate its transformation matrix.",
        "notes": "ph3sx function.\n\nDefault is true.\n\nThe transformation matrix contains the object's scale, angle, and position data, along with the 2D camera matrix.\nIf set to false, the transformation matrix will only contain the 2D camera matrix."
    },
    
    {
        "name": "ObjRender_SetLightingEnable",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "lightingenable",
                "type": "bool"
            },
            {
                "name": "speclightingenable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Enables or disables the 3D directional lighting and specular lighting for the render object.",
        "notes": "ph3sx function.\n\nThe default values are false and false.\nFor mesh objects, the default values are true and false.\n\nAlthough it's supported, specular lighting is very computationally demanding and can cause slowdowns in the engine. Therefore, it is recommended to only enable it if necessary."
    },
    {
        "name": "ObjRender_SetLightingDiffuseColor",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "red",
                "type": "number (int)"
            },
            {
                "name": "green",
                "type": "number (int, optional overload if hex replaces red value)"
            },
            {
                "name": "blue",
                "type": "number (int, optional overload if hex replaces red value)"
            }
        ],
        "return": {},
        "description": "Sets the diffuse color of the lighting.",
        "notes": "ph3sx function.\n\nIf using XRGB hexadecimal, place the XRGB color code into the red argument and leave out the green and blue arguments.\n\nThe default color value is (128, 128, 128), or (0x808080)."
    },
    {
        "name": "ObjRender_SetLightingSpecularColor",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "red",
                "type": "number (int)"
            },
            {
                "name": "green",
                "type": "number (int, optional overload if hex replaces red value)"
            },
            {
                "name": "blue",
                "type": "number (int, optional overload if hex replaces red value)"
            }
        ],
        "return": {},
        "description": "Sets the specular color of the lighting.",
        "notes": "ph3sx function.\n\nIf using XRGB hexadecimal, place the XRGB color code into the red argument and leave out the green and blue arguments.\n\nThe default color value is (0, 0, 0), or (0x000000)."
    },
    {
        "name": "ObjRender_SetLightingAmbientColor",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "red",
                "type": "number (int)"
            },
            {
                "name": "green",
                "type": "number (int, optional overload if hex replaces red value)"
            },
            {
                "name": "blue",
                "type": "number (int, optional overload if hex replaces red value)"
            }
        ],
        "return": {},
        "description": "Sets the ambient color of the lighting.",
        "notes": "ph3sx function.\n\nIf using XRGB hexadecimal, place the XRGB color code into the red argument and leave out the green and blue arguments.\n\nThe default color value is (128, 128, 128), or (0x808080)."
    },
    {
        "name": "ObjRender_SetLightingDirection",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcomp",
                "type": "number (int)"
            },
            {
                "name": "ycomp",
                "type": "number (int)"
            },
            {
                "name": "zcomp",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the direction vector of the lighting.",
        "notes": "ph3sx function.\n\nVector does not need to be normalized, but should have a non-zero length.\n\nThe default direction vector is (-1, -1, -1)."
    },
    
    {
        "name": "ObjPrim_GetTexture",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "name of the given object's texture",
            "type": "string (path)"
        },
        "description": "Returns the path/name of the primitive object's texture.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPrim_SetVertexColor",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "vertexindex",
                "type": "number (int)"
            },
            {
                "name": "red",
                "type": "number (int)"
            },
            {
                "name": "green",
                "type": "number (int, optional overload if hex replaces red value)"
            },
            {
                "name": "blue",
                "type": "number (int, optional overload if hex replaces red value)"
            }
        ],
        "return": {},
        "description": "Sets the RGB color of the specified vertex on a 0-255 scale.",
        "notes": "ph3sx changed function.\n\nIf using XRGB hexadecimal, place the XRGB color code into the red argument and leave out the green and blue arguments."
    },
    {
        "name": "ObjPrim_SetVertexColorHSV",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "vertexindex",
                "type": "number (int)"
            },
            {
                "name": "hue",
                "type": "number (int)"
            },
            {
                "name": "saturation",
                "type": "number (int)"
            },
            {
                "name": "value",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the vertex color of the primitive object as a HSV color.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPrim_GetVertexColor",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "vertexindex",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "color of the vertex at the given obvject's vertexindex formatted as [r, g, b]",
            "type": "number (int) []"
        },
        "description": "Returns the vertex color as an [R, G, B] array.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPrim_GetVertexColorHex",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "vertexindex",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "color of the vertex at the given obvject's vertexindex as XRGB hex",
            "type": "number (int)"
        },
        "description": "Returns the vertex color as an XRGB hexadecimal color value.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPrim_GetVertexAlpha",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "vertexindex",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "alpha of the vertex at the given obvject's vertexindex",
            "type": "number (int)"
        },
        "description": "Returns the vertex alpha value.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPrim_SetVertexIndex",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "indices",
                "type": "number (int) []"
            }
        ],
        "return": {},
        "description": "Sets vertex indices to the primitive object. ",
        "notes": "ph3sx function.\n\nExample:\nObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLELIST);\nObjPrim_SetVertexCount(obj, 4);\nObjPrim_SetVertexPosition(obj, 0, 0, 0);\nObjPrim_SetVertexPosition(obj, 1, 32, 0);\nObjPrim_SetVertexPosition(obj, 2, 0, 32);\nObjPrim_SetVertexPosition(obj, 3, 32, 32);\nObjPrim_SetVertexIndex(obj, [0, 1, 2, 1, 2, 3]);"
    },
    
    {
        "name": "ObjSprite2D_SetSourceRect",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "texturex1",
                "type": "number (int) or number (int) []"
            },
            {
                "name": "texturey1",
                "type": "number (int, optional overload if texturex1 is [texturex1,texturey1,texturex2,texturey2] array)"
            },
            {
                "name": "texturex2",
                "type": "number (int, optional overload if texturex1 is [texturex1,texturey1,texturex2,texturey2] array)"
            },
            {
                "name": "texturey2",
                "type": "number (int, optional overload if texturex1 is [texturex1,texturey1,texturex2,texturey2] array)"
            }
        ],
        "return": {},
        "description": "Sets the texture rectangle for the sprite. This is the rectangle on the original texture from which the sprite will be drawn.",
        "notes": "ph3sx changed function.\n\nThis function supports a 4-element array as the rect, formatted as [texturex1, texturey1, texturex2, texturey2]. Just place the array in the x1 argument and leave out the y1, x2, and y2 arguments.\n\nExample of rect array:\nlet rect = [0, 0, 120, 80];\nObjSprite2D_SetSourceRect(obj, rect);"
    },
    {
        "name": "ObjSprite2D_SetDestRect",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "x1",
                "type": "number (float) or number (float) []"
            },
            {
                "name": "y1",
                "type": "number (float, optional overload if x1 is [x1,y1,x2,y2] array)"
            },
            {
                "name": "x2",
                "type": "number (float, optional overload if x1 is [x1,y1,x2,y2] array)"
            },
            {
                "name": "y2",
                "type": "number (float, optional overload if x1 is [x1,y1,x2,y2] array)"
            }
        ],
        "return": {},
        "description": "Sets the drawing rectangle for the sprite. This is the rectangle where the sprite will be drawn.",
        "notes": "ph3sx changed function.\n\nThis function supports a 4-element array as the rect, formatted as [x1, y1, x2, y2]. Just place the array in the x1 argument and leave out the y1, x2, and y2 arguments.\n\nExample of rect array:\nlet rect = [0, 0, 120, 80];\nObjSprite2D_SetDestRect(obj, rect);"
    },

    {
        "name": "ObjSpriteList2D_SetSourceRect",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "texturex1",
                "type": "number (int) or number (int) []"
            },
            {
                "name": "texturey1",
                "type": "number (int, optional overload if texturex1 is [texturex1,texturey1,texturex2,texturey2] array)"
            },
            {
                "name": "texturex2",
                "type": "number (int, optional overload if texturex1 is [texturex1,texturey1,texturex2,texturey2] array)"
            },
            {
                "name": "texturey2",
                "type": "number (int, optional overload if texturex1 is [texturex1,texturey1,texturex2,texturey2] array)"
            }
        ],
        "return": {},
        "description": "Sets the texture rectangle for the next sprite to be added. This is the rectangle on the original texture from which the sprite will be drawn.",
        "notes": "ph3sx changed function.\n\nThis function supports a 4-element array as the rect, formatted as [texturex1, texturey1, texturex2, texturey2]. Just place the array in the x1 argument and leave out the y1, x2, and y2 arguments.\n\nExample of rect array:\nlet rect = [0, 0, 120, 80];\nObjSpriteList2D_SetSourceRect(obj, rect);"
    },
    {
        "name": "ObjSpriteList2D_SetDestRect",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "x1",
                "type": "number (float) or number (float) []"
            },
            {
                "name": "y1",
                "type": "number (float, optional overload if x1 is [x1,y1,x2,y2] array)"
            },
            {
                "name": "x2",
                "type": "number (float, optional overload if x1 is [x1,y1,x2,y2] array)"
            },
            {
                "name": "y2",
                "type": "number (float, optional overload if x1 is [x1,y1,x2,y2] array)"
            }
        ],
        "return": {},
        "description": "Sets the drawing rectangle for the next sprite to be added. This is the rectangle where the sprite will be drawn.",
        "notes": "ph3sx changed function.\n\nThis function supports a 4-element array as the rect, formatted as [x1, y1, x2, y2]. Just place the array in the x1 argument and leave out the y1, x2, and y2 arguments.\n\nExample of rect array:\nlet rect = [0, 0, 120, 80];\nObjSpriteList2D_SetDestRect(obj, rect);"
    },
    {
        "name": "ObjSpriteList2D_SetAutoClearVertexCount",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "clear",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether the 2D sprite list object will clear its vertices upon rendering.",
        "notes": "ph3sx function."
    },
    
    {
        "name": "ObjSprite3D_SetSourceRect",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "texturex1",
                "type": "number (int) or number (int) []"
            },
            {
                "name": "texturey1",
                "type": "number (int, optional overload if texturex1 is [texturex1,texturey1,texturex2,texturey2] array)"
            },
            {
                "name": "texturex2",
                "type": "number (int, optional overload if texturex1 is [texturex1,texturey1,texturex2,texturey2] array)"
            },
            {
                "name": "texturey2",
                "type": "number (int, optional overload if texturex1 is [texturex1,texturey1,texturex2,texturey2] array)"
            }
        ],
        "return": {},
        "description": "Sets the texture rectangle for the sprite. This is the rectangle on the original texture from which the sprite will be drawn.",
        "notes": "ph3sx changed function.\n\nThis function supports a 4-element array as the rect, formatted as [texturex1, texturey1, texturex2, texturey2]. Just place the array in the x1 argument and leave out the y1, x2, and y2 arguments.\n\nExample of rect array:\nlet rect = [0, 0, 120, 80];\nObjSprite3D_SetSourceRect(obj, rect);"
    },
    {
        "name": "ObjSprite3D_SetDestRect",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "x1",
                "type": "number (float) or number (float) []"
            },
            {
                "name": "y1",
                "type": "number (float, optional overload if x1 is [x1,y1,x2,y2] array)"
            },
            {
                "name": "x2",
                "type": "number (float, optional overload if x1 is [x1,y1,x2,y2] array)"
            },
            {
                "name": "y2",
                "type": "number (float, optional overload if x1 is [x1,y1,x2,y2] array)"
            }
        ],
        "return": {},
        "description": "Sets the drawing rectangle for the sprite. This is the rectangle where the sprite will be drawn.",
        "notes": "ph3sx changed function.\n\nThis function supports a 4-element array as the rect, formatted as [x1, y1, x2, y2]. Just place the array in the x1 argument and leave out the y1, x2, and y2 arguments.\n\nExample of rect array:\nlet rect = [0, 0, 120, 80];\nObjSprite3D_SetDestRect(obj, rect);"
    },
    {
        "name": "ObjSprite3D_SetSourceDestRect",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "x1",
                "type": "number (float) or number (float) []"
            },
            {
                "name": "y1",
                "type": "number (float, optional overload if x1 is [x1,y1,x2,y2] array)"
            },
            {
                "name": "x2",
                "type": "number (float, optional overload if x1 is [x1,y1,x2,y2] array)"
            },
            {
                "name": "y2",
                "type": "number (float, optional overload if x1 is [x1,y1,x2,y2] array)"
            }
        ],
        "return": {},
        "description": "Sets the texture rectangle for the sprite, and maps the center of the rectangle to the destination coordinates (0, 0, 0).",
        "notes": "ph3sx changed function.\n\nThis function supports a 4-element array as the rect, formatted as [x1, y1, x2, y2]. Just place the array in the x1 argument and leave out the y1, x2, and y2 arguments.\n\nExample of rect array:\nlet rect = [0, 0, 120, 80];\nObjSprite3D_SetSourceDestRect(obj, rect);"
    },
    
    {
        "name": "ObjParticleList_Create",
        "arguments": [
            {
                "name": "type",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Creates a new particle list object and returns its ID.",
        "notes": "ph3sx function.\n\nAvailable types are:\n\nOBJ_PARTICLE_LIST_2D\nOBJ_PARTICLE_LIST_3D\n\nVertex shader rendering is always on, and rendering will fail if an improper custom shader is used.\nNot using a custom shader will result in the default shader being used."
    },
    {
        "name": "ObjParticleList_SetPosition",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "zcoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the instance position data.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjParticleList_SetScaleX",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xscale",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the instance X scale data.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjParticleList_SetScaleY",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "yscale",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the instance Y scale data.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjParticleList_SetScaleZ",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "zscale",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the instance Z scale data.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjParticleList_SetScale",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xscale",
                "type": "number"
            },
            {
                "name": "yscale",
                "type": "number (optional overload if scaling uniformly)"
            },
            {
                "name": "zscale",
                "type": "number (optional overload if scaling uniformly)"
            }
        ],
        "return": {},
        "description": "Sets the instance scale data.",
        "notes": "ph3sx function.\n\nIf you intend to scale uniformly, you only need to use the xscale argument and leave out yscale and zscale.\n\nExample:\nObjParticleList_SetScale(obj, 2); is equivalent to ObjRender_SetScaleXYZ(obj, 2, 2, 2);"
    },
    {
        "name": "ObjParticleList_SetAngleX",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xangle",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "Sets the instance X angle data.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjParticleList_SetAngleY",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "yangle",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "Sets the instance Y angle data.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjParticleList_SetAngleZ",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "zangle",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "Sets the instance Z angle data.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjParticleList_SetAngleXYZ",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xangle",
                "type": "number (degrees)"
            },
            {
                "name": "yangle",
                "type": "number (degrees)"
            },
            {
                "name": "zangle",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "Sets the instance XYZ angle data.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjParticleList_SetColor",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "red",
                "type": "number (int) or number (int) []"
            },
            {
                "name": "green",
                "type": "number (int, optional overload if hex replaces red value)"
            },
            {
                "name": "blue",
                "type": "number (int, optional overload if hex replaces red value)"
            }
        ],
        "return": {},
        "description": "Sets the instance RGB color data as RGB on a 0-255 scale or as XRGB.",
        "notes": "ph3sx function.\n\nIf using XRGB hexadecimal, place the XRGB color code into the red argument and leave out the green and blue arguments.\n\nExample:\nObjParticleList_SetColor(obj, 0xFF7B32); is equivalent to ObjParticleList_SetColor(obj, 255, 123, 50);"
    },
    {
        "name": "ObjParticleList_SetAlpha",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "alpha",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the instance alpha data.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjParticleList_AddInstance",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Submits the current data to the next instance.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjParticleList_ClearInstance",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Clears all previously submitted instance data of the current frame.",
        "notes": "ph3sx function."
    },

    {
        "name": "ObjMesh_SetColor",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "red",
                "type": "number (int) or number (int) []"
            },
            {
                "name": "green",
                "type": "number (int, optional overload if hex replaces red value)"
            },
            {
                "name": "blue",
                "type": "number (int, optional overload if hex replaces red value)"
            }
        ],
        "return": {},
        "description": "Sets the color of the mesh object associated with objID as RGB on a 0-255 scale or as XRGB.",
        "notes": "ph3sx changed function.\n\nIf using XRGB hexadecimal, place the XRGB color code into the red argument and leave out the green and blue arguments.\n\nExample:\nObjMesh_SetColor(obj, 0xFF7B32); is equivalent to ObjMesh_SetColor(obj, 255, 123, 50);"
    },
    
    {
        "name": "ObjText_GetText",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "text stored in the text object",
            "type": "string"
        },
        "description": "Returns the text of the text object.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjText_SetFixedWidth",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "width",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Activates and sets the width of monospacing mode for the text object.",
        "notes": "ph3sx function.\n\nIf width is <= 0, the spacing mode returns to regular dynamic spacing."
    },
    {
        "name": "ObjText_SetFontWeight",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "weight",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the font weight for the following text object.",
        "notes": "ph3sx function.\n\nWeight ranges from 0 to 1000, with 0 being the lightest and 1000 being the thickest. -1 for the default weight.\nSome fonts may not support all weight values.\n\n*ObjText_SetFontBold(a, b) is equivalent to ObjText_SetFontWeight(a, b ? 700 : 400)."
    },
    {
        "name": "ObjText_SetFontCharacterSet",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "charset",
                "type": "charset (int)"
            }
        ],
        "return": {},
        "description": "Sets the charset for the following text object.",
        "notes": "ph3sx function.\n\nThe following constants are defined:\nCHARSET_ANSI\nCHARSET_DEFAULT\nCHARSET_SHIFTJIS\nCHARSET_HANGUL\nCHARSET_JOHAB\nCHARSET_CHINESEBIG5\nCHARSET_TURKISH\nCHARSET_VIETNAMESE\nCHARSET_HEBREW\nCHARSET_ARABIC\nCHARSET_THAI\n\nFor the full list of all charset values, refer to here:\nhttps://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/0d0b32ac-a836-4bd2-a112-b6000a1b4fc9\n\nAvoid using CHARSET_DEFAULT, as it may be device-dependent.\n\nTo ensure that font glyphs generate correctly, match the text object's charset with the font's charset.\n*The font charset is reset to either CHARSET_ANSI or CHARSET_SHIFTJIS every time ObjText_SetFontType is used."
    },
    {
        "name": "ObjText_SetFontColorTop",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "red",
                "type": "number (int) or number (int) []"
            },
            {
                "name": "green",
                "type": "number (int, optional overload if hex replaces red value)"
            },
            {
                "name": "blue",
                "type": "number (int, optional overload if hex replaces red value)"
            }
        ],
        "return": {},
        "description": "Sets the top color of the text object associated with objID, on a 0-255 scale or as XRGB.",
        "notes": "ph3sx changed function\n\nIf using XRGB hexadecimal, place the XRGB color code into the red argument and leave out the green and blue arguments.\n\nExample:\nObjText_SetFontColorTop(obj, 0xFFFF7B32); is equivalent to ObjText_SetFontColorTop(obj, 255, 123, 50);\n\nDanmakufu will form a gradient between the colors set with ObjText_SetFontColorTop and ObjText_SetFontColorBottom."
    },
    {
        "name": "ObjText_SetFontColorBottom",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "red",
                "type": "number (int) or number (int) []"
            },
            {
                "name": "green",
                "type": "number (int, optional overload if hex replaces red value)"
            },
            {
                "name": "blue",
                "type": "number (int, optional overload if hex replaces red value)"
            }
        ],
        "return": {},
        "description": "Sets the bottom color of the text object associated with objID, on a 0-255 scale or as XRGB.",
        "notes": "ph3sx changed function\n\nIf using XRGB hexadecimal, place the XRGB color code into the red argument and leave out the green and blue arguments.\n\nExample:\nObjText_SetFontColorBottom(obj, 0xFFFF7B32); is equivalent to ObjText_SetFontColorBottom(obj, 255, 123, 50);\n\nDanmakufu will form a gradient between the colors set with ObjText_SetFontColorTop and ObjText_SetFontColorBottom."
    },
    {
        "name": "ObjText_SetFontBorderColor",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "red",
                "type": "number (int) or number (int) []"
            },
            {
                "name": "green",
                "type": "number (int, optional overload if hex replaces red value)"
            },
            {
                "name": "blue",
                "type": "number (int, optional overload if hex replaces red value)"
            }
        ],
        "return": {},
        "description": "Sets the color of the font border of the text object associated with objID, on a 0-255 scale or as XRGB.",
        "notes": "ph3sx changed function\n\nIf using XRGB hexadecimal, place the XRGB color code into the red argument and leave out the green and blue arguments.\n\nExample:\nObjText_SetFontBorderColor(obj, 0xFF7B32); is equivalent to ObjText_SetFontBorderColor(obj, 255, 123, 50);"
    },
    {
        "name": "ObjText_SetVertexColor",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "red",
                "type": "number (int) or number (int) []"
            },
            {
                "name": "green",
                "type": "number (int, optional overload if hex replaces red value)"
            },
            {
                "name": "blue",
                "type": "number (int, optional overload if hex replaces red value)"
            }
        ],
        "return": {},
        "description": "Sets the color of the text object associated with objID, on a 0-255 scale or as ARGB.",
        "notes": "ph3sx changed function\n\nIf using ARGB hexadecimal, place the ARGB color code into the red argument and leave out the green and blue arguments.\n\nExample:\nObjText_SetFontBorderColor(obj, 0xFFFF7B32); is equivalent to ObjText_SetFontBorderColor(obj, 255, 123, 50);"
    },
    
    {
        "name": "ObjSound_SetResumeEnable",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "When set to true, allows the sound object associated with objID to continue where it left off instead of restarting every time ObjSound_Play is called.",
        "notes": "ph3sx renamed function.\n\nThis function replaces ObjSound_SetRestartEnable from vanilla ph3. Running it by the original name will raise an error in ph3sx, and running the function by the new name in vanilla ph3 will also raise an error."
    },
    {
        "name": "ObjSound_Seek",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "time",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Seeks to the specified time in the audio.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjSound_Seek",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "time",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Seeks to the specified time in the audio.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjSound_SeekSampleCount",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "sample",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Seeks to the specified sample in the audio.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjSound_SetFrequency",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frequency",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the frequency of the audio in sample rate.",
        "notes": "ph3sx function.\n\nCan be used to increase or decrease play speed.\n\nAn input of 0 will reset the value to the audio's original frequency."
    },
    {
        "name": "ObjSound_GetInfo",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "infotype",
                "type": "const"
            }
        ],
        "return": {
            "name": "results of query",
            "type": "varies"
        },
        "description": "Returns the value of the requested information about the sound object.",
        "notes": "ph3sx function.\n\nList of available information types:\n- INFO_FORMAT: The format of the audio file. Can be:\n--- SOUND_UNKNOWN\n--- SOUND_WAVE\n--- SOUND_OGG\n--- SOUND_MP3\n--- SOUND_AWAVE\n--- SOUND_MIDI\n- INFO_CHANNEL: The number of channels.\n- INFO_SAMPLE_RATE: The sample rate of the audio in hertz; ObjSound_SetFrequency does not affect this value.\n- INFO_AVG_BYTE_PER_SEC: The average byte per one second of audio.\n- INFO_BLOCK_ALIGN: The block align. (channel * bytePerSample)\n- INFO_BIT_PER_SAMPLE: The bits per sample of the audio.\n- INFO_POSITION: The current reading position of the audio in seconds.\n- INFO_POSITION_SAMPLE: The current reading position of the audio in sample count.\n- INFO_LENGTH: The total length of the audio in seconds.\n- INFO_LENGTH_SAMPLE: The total length of the audio in sample count."
    },

    {
        "name": "ObjFileT_SetLineText",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "linenumber",
                "type": "number (int)"
            },
            {
                "name": "newtext",
                "type": "string"
            }
        ],
        "return": {},
        "description": "Sets the text of the given line of the text file object.",
        "notes": "ph3sx function.\n\nNote that the actual file content is only updated upon calling ObjFile_Store."
    },

    {
        "name": "ObjFileB_GetLastRead",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "amount of bytes read at the last read operation for the given binary file object",
            "type": "number (int)"
        },
        "description": "Returns the amount of bytes read at the last read operation.",
        "notes": "ph3sx function.\n\nA result of 0 may indicate an end-of-file."
    },
    {
        "name": "ObjFileB_ReadBoolean",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "next byte",
            "type": "bool"
        },
        "description": "Reads a boolean value from the binary file object.",
        "notes": "ph3sx changed function\n\nNo longer throws an error upon attempting to read past the end-of-file.\n\nAdvances the read pointer by 1."
    },
    {
        "name": "ObjFileB_ReadByte",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "next byte",
            "type": "number (int)"
        },
        "description": "Reads a byte value from the binary file object.",
        "notes": "ph3sx changed function\n\nNo longer throws an error upon attempting to read past the end-of-file.\n\nAdvances the read pointer by 1."
    },
    {
        "name": "ObjFileB_ReadShort",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "next two bytes",
            "type": "number (int)"
        },
        "description": "Reads a short integer value from the binary file object.",
        "notes": "ph3sx changed function\n\nNo longer throws an error upon attempting to read past the end-of-file.\n\nAdvances the read pointer by 2."
    },
    {
        "name": "ObjFileB_ReadInteger",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "next four bytes",
            "type": "number (int)"
        },
        "description": "Reads an integer value from the binary file object.",
        "notes": "ph3sx changed function\n\nNo longer throws an error upon attempting to read past the end-of-file.\n\nAdvances the read pointer by 4."
    },
    {
        "name": "ObjFileB_ReadLong",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "next eight bytes",
            "type": "number (int)"
        },
        "description": "Reads a long integer value from the binary file object.",
        "notes": "ph3sx changed function\n\nNo longer throws an error upon attempting to read past the end-of-file.\n\nAdvances the read pointer by 8."
    },
    {
        "name": "ObjFileB_ReadFloat",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "next four bytes",
            "type": "number (float)"
        },
        "description": "Reads a single-precision float value from the binary file object.",
        "notes": "ph3sx changed function\n\nNo longer throws an error upon attempting to read past the end-of-file.\n\nAdvances the read pointer by 4."
    },
    {
        "name": "ObjFileB_ReadDouble",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "next eight bytes",
            "type": "number (float)"
        },
        "description": "Reads a double-precision float value from the binary file object.",
        "notes": "ph3sx changed function\n\nNo longer throws an error upon attempting to read past the end-of-file.\n\nAdvances the read pointer by 8."
    },
    {
        "name": "ObjFileB_WriteBoolean",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "value",
                "type": "bool"
            }
        ],
        "return": {
            "name": "bytes written",
            "type": "number (int)"
        },
        "description": "Writes a boolean value to the binary file object at the current write pointer.",
        "notes": "ph3sx function.\n\nAdvances the write pointer by 1."
    },
    {
        "name": "ObjFileB_WriteByte",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "value",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "bytes written",
            "type": "number (int)"
        },
        "description": "Writes a byte value to the binary file object at the current write pointer.",
        "notes": "ph3sx function.\n\nAdvances the write pointer by 1."
    },
    {
        "name": "ObjFileB_WriteShort",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "value",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "bytes written",
            "type": "number (int)"
        },
        "description": "Writes a short integer value to the binary file object at the current write pointer.",
        "notes": "ph3sx function.\n\nAdvances the write pointer by 2."
    },
    {
        "name": "ObjFileB_WriteInteger",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "value",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "bytes written",
            "type": "number (int)"
        },
        "description": "Writes an integer value to the binary file object at the current write pointer.",
        "notes": "ph3sx function.\n\nAdvances the write pointer by 4."
    },
    {
        "name": "ObjFileB_WriteLong",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "value",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "bytes written",
            "type": "number (int)"
        },
        "description": "Writes a long integer value to the binary file object at the current write pointer.",
        "notes": "ph3sx function.\n\nAdvances the write pointer by 8."
    },
    {
        "name": "ObjFileB_WriteFloat",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "value",
                "type": "number (float)"
            }
        ],
        "return": {
            "name": "bytes written",
            "type": "number (int)"
        },
        "description": "Writes a single-precision float value to the binary file object at the current write pointer.",
        "notes": "ph3sx function.\n\nAdvances the write pointer by 4."
    },
    {
        "name": "ObjFileB_WriteDouble",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "value",
                "type": "number (float)"
            }
        ],
        "return": {
            "name": "bytes written",
            "type": "number (int)"
        },
        "description": "Writes a double-precision float value to the binary file object at the current write pointer.",
        "notes": "ph3sx function.\n\nAdvances the write pointer by 8."
    },
    
    {
        "name": "SetStgFrame",
        "arguments": [
            {
                "name": "x1",
                "type": "number"
            },
            {
                "name": "y1",
                "type": "number"
            },
            {
                "name": "x2",
                "type": "number"
            },
            {
                "name": "y2",
                "type": "number"
            },
            {
                "name": "minrpriority",
                "type": "number"
            },
            {
                "name": "maxrpriority",
                "type": "number"
            },
            {
                "name": "2dcamrpriority",
                "type": "number (optional overload)"
            }
        ],
        "return": {},
        "description": "Sets the STG space frame given the x1/y1/x2/y2 values in the Danmakufu window and the minimum and maximum render priorities provided.",
        "notes": "ph3sx changed function.\n\n2dcamrpriority is optional.\n\nDefault values are (32, 16, 416, 464, 20, 80, 79).\n\nNote: the 2D camera render priority defualt was a guess, so it may not be 79 by defualt."
    },
    {
        "name": "SetIntersectionVisualization",
        "arguments": [
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Enables active visualization of all intersection object hitboxes.",
        "notes": "ph3sx changed function.\n\nColor codes:\n- Green: Player hitbox+grazebox\n- Blue: Player shot\n- Cyan: Player spell\n- Yellow: Enemy hitbox+killbox\n- Red: Enemy shot"
    },
    {
        "name": "SetIntersectionVisualizationRenderPriority",
        "arguments": [
            {
                "name": "rpriority",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the render priority of hitbox visualizations.",
        "notes": "ph3sx function.\n\nDefault value is 68. (GetCameraFocusPermitPriorityI() - 1)"
    },
    
    {
        "name": "GetPlayerScriptID",
        "arguments": [],
        "return": {
            "name": "script ID of the player object",
            "type": "number (int)"
        },
        "description": "Returns the script ID of the player object.",
        "notes": "ph3sx function.\n\n"
    },
    {
        "name": "GetPlayerAutoItemCollectLine",
        "arguments": [],
        "return": {
            "name": "position of the PoC (point of collection) line",
            "type": "number (float)"
        },
        "description": "Returns the position of the player's item autocollection line.",
        "notes": "ph3sx function."
    },
    {
        "name": "SetPlayerItemScope",
        "arguments": [
            {
                "name": "radius",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the player's item collection scope radius.",
        "notes": "ph3sx function.\n\nEffect equivalent to CollectItemsInCircle."
    },
    {
        "name": "GetPlayerItemScope",
        "arguments": [],
        "return": {
            "name": "radius of item collection scope",
            "type": "number (float)"
        },
        "description": "Gets the player's item collection scope radius.",
        "notes": "ph3sx function."
    },
    {
        "name": "SetPlayerInvincibleGraze",
        "arguments": [
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether the player can graze during invincbility period.",
        "notes": "ph3sx function.\n\nTrue by default. All hail ZUN's engine."
    },
    {
        "name": "SetPlayerIntersectionEraseShot",
        "arguments": [
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether shots colliding with the player would get automatically deleted.",
        "notes": "ph3sx function.\n\nTrue by default. All hail ZUN's engine."
    },
    {
        "name": "SetPlayerStateEndEnable",
        "arguments": [
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether STATE_END is permitted to activate.",
        "notes": "ph3sx function.\n\nIf set to false, player life will continue below 0 upon each death without limit.\n\nFalse by default if the main script is a package script."
    },
    {
        "name": "SetPlayerShootdownEventEnable",
        "arguments": [
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether EV_PLAYER_SHOOTDOWN will be notified upon the player's death.",
        "notes": "ph3sx function.\n\nSetting it to false would also disable STATE_DOWN and STATE_END from ever occuring."
    },
    {
        "name": "SetPlayerRebirthPosition",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the respawn point of the player.",
        "notes": "ph3sx function.\n\nUse REBIRTH_DEFAULT in either position to reset it to its default value."
    },
    
    {
        "name": "SetEnemyAutoDeleteClip",
        "arguments": [
            {
                "name": "x1",
                "type": "number (int)"
            },
            {
                "name": "y1",
                "type": "number (int)"
            },
            {
                "name": "x2",
                "type": "number (int)"
            },
            {
                "name": "y2",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the margin that enemy objects are allowed to traverse past the edges of the STG field before getting automatically deleted.",
        "notes": "ph3sx function.\n\nEquivalent to SetShotAutoDeleteClip, except for enemies."
    },

    {
        "name": "CreateShotA2",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "speed",
                "type": "number"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            },
            {
                "name": "accel",
                "type": "number"
            },
            {
                "name": "maxspeed",
                "type": "number"
            },
            {
                "name": "wvel",
                "type": "number (optional overload)"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            },
            {
                "name": "delay",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "object ID of new shot",
            "type": "number (Object ID)"
        },
        "description": "Creates a bullet that will move at the angle and speed defined, incrementing its speed by acceleration every frame, capping at maxspeed. It can also have angular velocity by setting wvel.",
        "notes": "ph3sx changed function.\n\nAngular velocity is optional; leaving it out will assume graphic and delay come next.\n\ngraphic is the image the bullet will have, while delay is the time in frames before the bullet will appear.\n\nDuring it's delay, there will be a collisionless cloud that appears where the bullet will spawn.\n\nReturns a void value in a player script if the player is unable to shoot."
    },
    {
        "name": "CreateShotC1",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "xspeed",
                "type": "number"
            },
            {
                "name": "yspeed",
                "type": "number"
            },
            {
                "name": "woffset",
                "type": "number"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            },
            {
                "name": "delay",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "object ID of new shot",
            "type": "number (Object ID)"
        },
        "description": "Creates a shot object using the C-movement mode and returns its object ID.",
        "notes": "ph3sx function.\n\nC-movement pattern:\nThe C-movement pattern is essentially B-movement with a twist.\nThere is an additional \"angle offset\" property which acts as a rotation vector for the X and Y speeds.\n\nTo be precise:\nrealSpeedXY = Rotate2D(xspeed, yspeed, woffset);"
    },
    {
        "name": "CreateShotC2",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "xspeed",
                "type": "number"
            },
            {
                "name": "yspeed",
                "type": "number"
            },
            {
                "name": "xaccel",
                "type": "number"
            },
            {
                "name": "yaccel",
                "type": "number"
            },
            {
                "name": "xspeedmax",
                "type": "number"
            },
            {
                "name": "yspeedmax",
                "type": "number"
            },
            {
                "name": "woffset",
                "type": "number"
            },
            {
                "name": "woffsetaccel",
                "type": "number"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            },
            {
                "name": "delay",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "object ID of new shot",
            "type": "number (Object ID)"
        },
        "description": "Creates a shot object using the C-movement mode and returns its object ID.",
        "notes": "ph3sx function.\n\nC-movement pattern:\nThe C-movement pattern is essentially B-movement with a twist.\nThere is an additional \"angle offset\" property which acts as a rotation vector for the X and Y speeds.\n\nTo be precise:\nrealSpeedXY = Rotate2D(xspeed, yspeed, woffset);"
    },
    {
        "name": "CreateShotOC1",
        "arguments": [
            {
                "name": "parentobjID",
                "type": "number (Object ID)"
            },
            {
                "name": "xspeed",
                "type": "number"
            },
            {
                "name": "yspeed",
                "type": "number"
            },
            {
                "name": "woffset",
                "type": "number"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            },
            {
                "name": "delay",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "object ID of new shot",
            "type": "number (Object ID)"
        },
        "description": "Creates a shot object using the C-movement mode on the position of the parent object and returns its object ID.",
        "notes": "ph3sx function.\n\nC-movement pattern:\nThe C-movement pattern is essentially B-movement with a twist.\nThere is an additional \"angle offset\" property which acts as a rotation vector for the X and Y speeds.\n\nTo be precise:\nrealSpeedXY = Rotate2D(xspeed, yspeed, woffset);"
    },
    {
        "name": "GetAllShotID",
        "arguments": [
            {
                "name": "type",
                "type": "const"
            }
        ],
        "return": {
            "name": "array containing object IDs of every shot that pertains to the specified type",
            "type": "number (int) []"
        },
        "description": "Returns an array of all shot object IDs of the given type.",
        "notes": "ph3sx function.\n\nAvailable types:\n- TARGET_ALL\n- TARGET_PLAYER\n- TARGET_ENEMY"
    },
    {
        "name": "GetShotDataInfoA1",
        "arguments": [
            {
                "name": "graphic",
                "type": "number (int)"
            },
            {
                "name": "targetshotsheet",
                "type": "const"
            },
            {
                "name": "infotype",
                "type": "const"
            }
        ],
        "return": {
            "name": "results of query",
            "type": "varies"
        },
        "description": "Returns information from the shotsheet depending on the information requested.",
        "notes": "ph3sx changed function.\n\nNo longer throws an error if the given shot graphic ID is invalid.\n\n- INFO_EXISTS: Returns whether the given shot graphic ID exists.\n- INFO_PATH: Returns the image path of the given shot graphic ID.\n- INFO_IS_FIXED_ANGLE: Returns whether the given shot graphic ID has had fixed_angle enabled.\n\ntargetshotsheet can be TARGET_PLAYER or TARGET_ENEMY.\n\ninfotype can be:\n\nINFO_RECT (returns [left, top, right, bottom] for the graphic)\n\nINFO_DELAY_COLOR (returns [red, green, blue] for the graphic)\n\nINFO_BLEND (returns blend type for the graphic)\n\nINFO_COLLISION (returns radius of collision detection)\n\nINFO_COLLISION_LIST (returns 2D array of collision hitbox radii and coordinates [radius, x, y])"
    },
    {
        "name": "SetShotTextureFilter",
        "arguments": [
            {
                "name": "filtermin",
                "type": "const"
            },
            {
                "name": "filtermag",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the min and mag texture filtering modes for rendering shot objects.",
        "notes": "ph3sx function.\n\nFiltering modes:\n- FILTER_NONE\n- FILTER_POINT\n- FILTER_LINEAR\n- FILTER_ANISOTROPIC\n\nThe default filtering modes are FILTER_LINEAR and FILTER_LINEAR."
    },
    
    {
        "name": "SetItemAutoDeleteClip",
        "arguments": [
            {
                "name": "x1",
                "type": "number (int)"
            },
            {
                "name": "y1",
                "type": "number (int)"
            },
            {
                "name": "x2",
                "type": "number (int)"
            },
            {
                "name": "y2",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the margin that item objects are allowed to traverse past the edges of the STG field before getting automatically deleted.",
        "notes": "ph3sx function.\n\nEquivalent to SetShotAutoDeleteClip, except for items."
    },
    {
        "name": "GetItemIdInCircleA1",
        "arguments": [
            {
                "name": "circlex",
                "type": "number"
            },
            {
                "name": "circley",
                "type": "number"
            },
            {
                "name": "circleradius",
                "type": "number"
            }
        ],
        "return": {
            "name": "object IDs of all items in the given circle",
            "type": "number (Object ID) []"
        },
        "description": "Returns the object ID of all item objects within the specified circle.",
        "notes": "ph3sx function."
    },
    {
        "name": "GetItemIdInCircleA2",
        "arguments": [
            {
                "name": "circlex",
                "type": "number"
            },
            {
                "name": "circley",
                "type": "number"
            },
            {
                "name": "circleradius",
                "type": "number"
            },
            {
                "name": "itemtype",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "object IDs of all items of the specified type in the given circle",
            "type": "number (Object ID) []"
        },
        "description": "Returns the object ID of all item objects of the specified type within the specified circle.",
        "notes": "ph3sx function."
    },
    {
        "name": "SetItemTextureFilter",
        "arguments": [
            {
                "name": "filtermin",
                "type": "const"
            },
            {
                "name": "filtermag",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the min and mag texture filtering modes for rendering item objects.",
        "notes": "ph3sx function.\n\nFiltering modes:\n- FILTER_NONE\n- FILTER_POINT\n- FILTER_LINEAR\n- FILTER_ANISOTROPIC\n\nThe default filtering modes are FILTER_LINEAR and FILTER_LINEAR."
    },

    {
        "name": "IsIntersected_Obj_Obj",
        "arguments": [
            {
                "name": "objID1",
                "type": "number (Object ID)"
            },
            {
                "name": "objID2",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "true if the objects collide; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if any of both object's hitboxes intersect at least once.",
        "notes": "ph3sx changed function."
    },
    {
        "name": "IsIntersected_Obj_Obj_All",
        "arguments": [
            {
                "name": "objID1",
                "type": "number (Object ID)"
            },
            {
                "name": "objID2",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "true if the objects collide; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if all of both object's hitboxes intersect at least once.",
        "notes": "ph3sx function."
    },
    
    {
        "name": "ObjMove_SetSpeed",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "speed",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the speed of the object associated with objID.",
        "notes": "ph3sx changed function.\n\nAlso works on B-pattern and C-pattern movements."
    },
    {
        "name": "ObjMove_SetAngle",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "Sets the angle of the object associated with objID.",
        "notes": "ph3sx changed function.\n\nAlso works on B-pattern and C-pattern movements."
    },
    {
        "name": "ObjMove_SetAcceleration",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "accel",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the acceleration of the object associated with objID.",
        "notes": "ph3sx changed function.\n\nAlso works on B-pattern and C-pattern movements."
    },
    {
        "name": "ObjMove_SetMaxSpeed",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "maxspeed",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the maximum/minimum speed the object associated with objID will approach using the ObjMove_SetAcceleration function.",
        "notes": "ph3sx changed function.\n\nAlso works on B-pattern and C-pattern movements."
    },
    {
        "name": "ObjMove_SetAngularVelocity",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "wvel",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the angular velocity (change in movement angle per frame) of the object associated with objID.",
        "notes": "ph3sx changed function.\n\nAlso works on C-pattern movements."
    },
    {
        "name": "ObjMove_SetAngularMaxVelocity",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "wvelmax",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the angular maximum velocity (change in movement angle per frame) of the object associated with objID.",
        "notes": "ph3sx function.\n\nWorks on A-pattern and C-pattern movements."
    },
    {
        "name": "ObjMove_SetSpeedX",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xspeed",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the move object's X speed.",
        "notes": "ph3sx function.\n\nWorks on A-pattern, B-pattern, and C-pattern movements."
    },
    {
        "name": "ObjMove_SetSpeedY",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "yspeed",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the move object's Y speed.",
        "notes": "ph3sx function.\n\nWorks on A-pattern, B-pattern, and C-pattern movements."
    },
    {
        "name": "ObjMove_SetSpeedXY",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xspeed",
                "type": "number"
            },
            {
                "name": "yspeed",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the move object's X and Y speed.",
        "notes": "ph3sx function.\n\nWorks on A-pattern, B-pattern, and C-pattern movements."
    },
    {
        "name": "ObjMove_GetSpeedX",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "x speed of the move object",
            "type": "number (float)"
        },
        "description": "Gets the move object's X speed.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjMove_GetSpeedY",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "y speed of the move object",
            "type": "number (float)"
        },
        "description": "Gets the move object's Y speed.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjMove_SetDestAtFrame",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "frames",
                "type": "number (int)"
            },
            {
                "name": "interptype",
                "type": "const (optional overload)"
            }
        ],
        "return": {},
        "description": "Moves the object to the target position in the given frames using the specified interpolation mode.",
        "notes": "ph3sx changed function.\n\nInterpolation type is optional.\n\nAvailable movement interpolation modes:\n- LERP_LINEAR: Linear interpolation.\n- LERP_SMOOTH: Smooth interpolation.\n- LERP_SMOOTHER: Smoother interpolation.\n- LERP_ACCELERATE: Accelerating interpolation.\n- LERP_DECELERATE: Decelerating interpolation."
    },
    {
        "name": "ObjMove_AddPatternA2",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            },
            {
                "name": "speed",
                "type": "number"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            },
            {
                "name": "accel",
                "type": "number"
            },
            {
                "name": "maxspeed",
                "type": "number"
            },
            {
                "name": "wvel",
                "type": "number"
            }
        ],
        "return": {},
        "description": "After the specified number of frames, changes the speed, angle, acceleration, maximum/minimum speed, and angular velocity of the object associated with objID.",
        "notes": "ph3sx changed function.\n\nNO_CHANGE can be used to preserve the original speed, angle, acceleration, angular velocity, or maximum/minimum speed."
    },
    {
        "name": "ObjMove_AddPatternA3",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            },
            {
                "name": "speed",
                "type": "number"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            },
            {
                "name": "accel",
                "type": "number"
            },
            {
                "name": "maxspeed",
                "type": "number"
            },
            {
                "name": "wvel",
                "type": "number"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "After the specified number of frames, changes the speed, angle, acceleration, maximum/minimum speed, angular velocity, and bullet graphic of the object associated with objID.",
        "notes": "ph3sx changed function.\n\nNO_CHANGE can be used to preserve the original speed, angle, acceleration, angular velocity, maximum/minimum speed, or bullet graphic."
    },
    {
        "name": "ObjMove_AddPatternA4",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            },
            {
                "name": "speed",
                "type": "number"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            },
            {
                "name": "accel",
                "type": "number"
            },
            {
                "name": "maxspeed",
                "type": "number"
            },
            {
                "name": "wvel",
                "type": "number"
            },
            {
                "name": "targetID",
                "type": "number (Object ID)"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "After the specified number of frames, changes the speed, angle, acceleration, maximum/minimum speed, angular velocity, and bullet graphic of the object associated with objID, with angle being based off of the angle from the object to the object associated with targetID.",
        "notes": "ph3sx changed function.\n\nNO_CHANGE can be used to preserve the original speed, angle, acceleration, angular velocity, maximum/minimum speed, or bullet graphic.\n\nThe angle parameter is relative to the angle from the object to the target. For example, if GetPlayerObjectID is used as the target, an angle of 0 will cause the object to aim for the player."
    },
    {
        "name": "ObjMove_AddPatternA5",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            },
            {
                "name": "speed",
                "type": "number"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            },
            {
                "name": "accel",
                "type": "number"
            },
            {
                "name": "maxspeed",
                "type": "number"
            },
            {
                "name": "wvel",
                "type": "number"
            },
            {
                "name": "wvelaccel",
                "type": "number"
            },
            {
                "name": "wvelmax",
                "type": "number"
            },
            {
                "name": "targetID",
                "type": "number (Object ID)"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "After the specified number of frames, changes the speed, angle, acceleration, maximum/minimum speed, angular velocity, angular acceleration, angular max velocity, and bullet graphic of the object associated with objID, with angle being based off of the angle from the object to the object associated with targetID.",
        "notes": "ph3sx function.\n\nNO_CHANGE can be used to preserve the original speed, angle, acceleration, angular velocity, maximum/minimum speed, or bullet graphic.\n\nThe angle parameter is relative to the angle from the object to the target. For example, if GetPlayerObjectID is used as the target, an angle of 0 will cause the object to aim for the player."
    },
    {
        "name": "ObjMove_AddPatternC1",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            },
            {
                "name": "xspeed",
                "type": "number"
            },
            {
                "name": "yspeed",
                "type": "number"
            },
            {
                "name": "woffset",
                "type": "number"
            }
        ],
        "return": {},
        "description": "After the specified number of frames, changes the x speed, y speed, and angular offset of the move object.",
        "notes": "ph3sx function.\n\nAdds a C-movement pattern to the object that will activate after the specified frames after the function call."
    },
    {
        "name": "ObjMove_AddPatternC2",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            },
            {
                "name": "xspeed",
                "type": "number"
            },
            {
                "name": "yspeed",
                "type": "number"
            },
            {
                "name": "xaccel",
                "type": "number"
            },
            {
                "name": "yaccel",
                "type": "number"
            },
            {
                "name": "xspeedmax",
                "type": "number"
            },
            {
                "name": "yspeedmax",
                "type": "number"
            },
            {
                "name": "woffset",
                "type": "number"
            },
            {
                "name": "woffsetvel",
                "type": "number"
            }
        ],
        "return": {},
        "description": "After the specified number of frames, changes the x and y speed, x and y acceleration, x and y max speed, angular offset, and angular offset velocity of the move object.",
        "notes": "ph3sx function.\n\nAdds a C-movement pattern to the object that will activate after the specified frames after the function call."
    },
    {
        "name": "ObjMove_AddPatternC3",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            },
            {
                "name": "xspeed",
                "type": "number"
            },
            {
                "name": "yspeed",
                "type": "number"
            },
            {
                "name": "xaccel",
                "type": "number"
            },
            {
                "name": "yaccel",
                "type": "number"
            },
            {
                "name": "xspeedmax",
                "type": "number"
            },
            {
                "name": "yspeedmax",
                "type": "number"
            },
            {
                "name": "woffset",
                "type": "number"
            },
            {
                "name": "woffsetvel",
                "type": "number"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "After the specified number of frames, changes the x and y speed, x and y acceleration, x and y max speed, angular offset, angular offset velocity, and shot graphic of the move object.",
        "notes": "ph3sx function.\n\nAdds a C-movement pattern to the object that will activate after the specified frames after the function call."
    },
    {
        "name": "ObjMove_AddPatternC4",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            },
            {
                "name": "xspeed",
                "type": "number"
            },
            {
                "name": "yspeed",
                "type": "number"
            },
            {
                "name": "xaccel",
                "type": "number"
            },
            {
                "name": "yaccel",
                "type": "number"
            },
            {
                "name": "xspeedmax",
                "type": "number"
            },
            {
                "name": "yspeedmax",
                "type": "number"
            },
            {
                "name": "woffset",
                "type": "number"
            },
            {
                "name": "woffsetvel",
                "type": "number"
            },
            {
                "name": "woffsetaccel",
                "type": "number"
            },
            {
                "name": "woffsetmaxspeed",
                "type": "number"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "After the specified number of frames, changes the x and y speed, x and y acceleration, x and y max speed, angular offset, angular offset velocity, angular offset acceleration, angular offset max speed, and shot graphic of the move object.",
        "notes": "ph3sx function.\n\nAdds a C-movement pattern to the object that will activate after the specified frames after the function call."
    },
    {
        "name": "ObjMove_AddPatternD1",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            },
            {
                "name": "targetx",
                "type": "number"
            },
            {
                "name": "targety",
                "type": "number"
            },
            {
                "name": "speed",
                "type": "number"
            }
        ],
        "return": {},
        "description": "After the specified number of frames, moves the given object to targetx and targety at the specified speed.",
        "notes": "ph3sx function.\n\nAdds a D-movement pattern to the object that will activate after the specified frames after the function call.\n\nEssentially an AddPattern version of ObjMove_SetDestAtSpeed."
    },
    {
        "name": "ObjMove_AddPatternD2",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            },
            {
                "name": "targetx",
                "type": "number"
            },
            {
                "name": "targety",
                "type": "number"
            },
            {
                "name": "frames",
                "type": "number (int)"
            },
            {
                "name": "interptype",
                "type": "const (optional overload)"
            }
        ],
        "return": {},
        "description": "After the specified number of frames, moves the given object to targetx and targety for the specified amount of frames.",
        "notes": "ph3sx function.\n\nAdds a D-movement pattern to the object that will activate after the specified frames after the function call.\n\nEssentially an AddPattern version of ObjMove_SetDestAtFrame.\n\nInterpolation type is optional.\n\nAvailable movement interpolation modes:\n- LERP_LINEAR: Linear interpolation.\n- LERP_SMOOTH: Smooth interpolation.\n- LERP_SMOOTHER: Smoother interpolation.\n- LERP_ACCELERATE: Accelerating interpolation.\n- LERP_DECELERATE: Decelerating interpolation."
    },
    {
        "name": "ObjMove_AddPatternD3",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            },
            {
                "name": "targetx",
                "type": "number"
            },
            {
                "name": "targety",
                "type": "number"
            },
            {
                "name": "weight",
                "type": "number"
            },
            {
                "name": "maxspeed",
                "type": "number"
            }
        ],
        "return": {},
        "description": "After the specified number of frames, moves the given object to targetx and targety at the specified weight and max speed.",
        "notes": "ph3sx function.\n\nAdds a D-movement pattern to the object that will activate after the specified frames after the function call.\n\nEssentially an AddPattern version of ObjMove_SetDestAtWeight."
    },
    {
        "name": "ObjMove_SetProcessMovement",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether the object will be allowed to execute movement-related routines.",
        "notes": "ph3sx function.\n\nObjMove_SetX/Y/Position would still alter the object's position."
    },
    {
        "name": "ObjMove_GetProcessMovement",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "true if object is allowed to execute movement-related routines; false otherwise",
            "type": "bool"
        },
        "description": "Returns true if the object is allowed to execute movement-related routines.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjMove_GetMovementType",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "movementtype",
            "type": "const"
        },
        "description": "Returns the current movement type of the move object.",
        "notes": "ph3sx function.\n\nPossible return values:\n- MOVE_NONE: The object doesn't have an active movement function. (May be caused by ObjMove_CancelMovement.)\n- MOVE_ANGLE: A-pattern movement. (Angle)\n- MOVE_XY: B-pattern movement. (XY)\n- MOVE_XY_ANGLE: C-pattern movement. (XY-Angle)\n- MOVE_LINE: D-pattern movement. (Line, ObjMove_SetDestAtXXX)\n- MOVE_OTHER: Other movements."
    },
    {
        "name": "ObjMove_CancelMovement",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Cancels the object's current movement routine.",
        "notes": "ph3sx function."
    },

    {
        "name": "ObjEnemy_GetInfo",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "infotype",
                "type": "const"
            }
        ],
        "return": {
            "name": "results of query",
            "type": "number"
        },
        "description": "Returns data on the enemy object associated with objID based on the query.",
        "notes": "ph3sx changed function.\n\nPossible infotypes are:\n\nINFO_LIFE - Returns the life points of the enemy\n\nINFO_DAMAGE_RATE_SHOT - Returns the damage rate percentage of normal player shots set by ObjEnemy_SetDamageRate on a 0 to 100 scale\n\nINFO_DAMAGE_RATE_SPELL - Returns the damage rate percentage of player bombs set by ObjEnemy_SetDamageRate on a 0 to 100 scale\n\nINFO_SHOT_HIT_COUNT - Returns the amount of times the enemy was hit by player bullets in the previous frame\n\nINFO_DAMAGE_PREVIOUS_FRAME - Returns the amount of damage the enemy received in the previous frame."
    },
    {
        "name": "ObjEnemy_SetAutoDelete",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "If set to true, enemies will automatically deleted when they move past the bounds defined with SetEnemyAutoDeleteClip.",
        "notes": "ph3sx function.\n\nDefault value is false.\n\nEssentially ObjShot_SetAutoDelete for enemies."
    },
    {
        "name": "ObjEnemy_SetDeleteFrame",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Deletes the enemy associated with objID after the specified number of frames.",
        "notes": "ph3sx function.\n\nEssentially ObjShot_SetDeleteFrame for enemies."
    },
    {
        "name": "ObjEnemy_AddLifeEx",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "life",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Adds the provided life points to the life points of the enemy object associated with objID with respect to its max damage.",
        "notes": "ph3sx function.\n\nNegative value (damaging) will count towards the maximum damage as if getting hit by a player shot.\nPositive value (healing) will reduce the damage count and allow more damage to be dealt in the frame equal to how much the healing was."
    },
    {
        "name": "ObjEnemy_SetMaximumDamage",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "maxdamage",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the maximum amount of damage that the enemy object can receive through normal means in a single frame.",
        "notes": "ph3sx function.\n\nDefault value is, for all intents and purposes, infinity."
    },
    {
        "name": "ObjEnemy_GetIntersectionCircleListToShot",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "array containing nested arrays of the enemy object's intersection circle to player shot",
            "type": "number (flaot) [] []"
        },
        "description": "Returns an array of arrays of the enemy object's intersection circle to player shot.",
        "notes": "ph3sx function.\n\ne.g. [[x1, y1, radius1], [x2, y2, radius2], ...]"
    },
    {
        "name": "ObjEnemy_GetIntersectionCircleListToPlayer",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "array containing nested arrays of the enemy object's intersection circle to player hitbox",
            "type": "number (flaot) [] []"
        },
        "description": "Returns an array of arrays of the enemy object's intersection circle to player hitbox.",
        "notes": "ph3sx function.\n\ne.g. [[x1, y1, radius1], [x2, y2, radius2], ...]"
    },
    {
        "name": "ObjEnemy_SetEnableIntersectionPositionFetching",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "If set to true, the given enemy object will be ignored in all functions related to returning enemy intersections.",
        "notes": "ph3sx function.\n\nIf set to false, the following functions will not include the specified enemy object's hitboxes:\n- GetEnemyIntersectionPosition\n- GetEnemyIntersectionPositionByIdA1\n- GetEnemyIntersectionPositionByIdA2\n- GetAllEnemyIntersectionPosition"
    },
    {
        "name": "ObjEnemyBossScene_GetInfo",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "infotype",
                "type": "const"
            }
        ],
        "return": {
            "name": "results of query",
            "type": "varies"
        },
        "description": "Returns data on the boss scene object associated with objID based on the query.",
        "notes": "ph3sx changed function.\n\nPossible infotypes are:\n\nINFO_IS_SPELL - Returns true if a spell card is active\n\nINFO_IS_LAST_SPELL - Returns true if the Last Spell is active\n\nINFO_IS_DURABLE_SPELL - Returns true in the case of a survival spell\n\nINFO_IS_LAST_STEP - Returns true when the last spell is active\n\nINFO_TIMER - Returns the timer value in seconds\n\nINFO_TIMERF - Returns the timer value in frames (returns -1 if unlimited)\n\nINFO_ORGTIMERF - Returns the original timer value in frames (returns -1 if unlimited)\n\nINFO_SPELL_SCORE - Returns the score of the spell card\n\nINFO_REMAIN_STEP_COUNT - Returns the number of steps remaining in the active boss scene\n\nINFO_ACTIVE_STEP_LIFE_COUNT - Returns the amount of attacks of the enemy for the active step\n\nINFO_ACTIVE_STEP_TOTAL_MAX_LIFE - Returns the initial life of the enemy for the active step\n\nINFO_ACTIVE_STEP_TOTAL_LIFE - Returns the total remaining life for the active step\n\nINFO_PLAYER_SHOOTDOWN_COUNT - Returns the amount of times the player died during the spell\n\nINFO_PLAYER_SPELL_COUNT - Returns the amount of times the player bombed during the spell\n\nINFO_ACTIVE_STEP_LIFE_RATE_LIST - Returns an array containing the proportion (0-1) of each attacks's amount of life in the active step\n\nINFO_CURRENT_LIFE - Returns the current life of the enemy in the current attack\n\nINFO_CURRENT_LIFE_MAX - Returns the maximum life of the enemy in the current attack\n\nINFO_IS_REQUIRE_ALL_DOWN - Returns if EV_REQUEST_REQUIRE_ALL_DOWN was set to true.\n\nWith regards to the step info types, step refers to the individual sections specified in the ObjEnemyBossScene_Add function's second argument.\n\nFor each script (referred to as an attack here) you load into the step, you increase the step life count of that specific step by 1."
    },
    {
        "name": "ObjEnemyBossScene_EndSpell",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Marks the current single as being not-a-spell.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjEnemyBossScene_SetUnloadCache",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "unload",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "If set to true, will unload all added scripts from the script source cache upon boss scene end or object deletion.",
        "notes": "ph3sx function."
    },
    
    {
        "name": "ObjShot_SetOwnerType",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "type",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the shot object's owner type.",
        "notes": "ph3sx function.\n\nAvailable types are:\nOWNER_PLAYER\nOWNER_ENEMY\n\nShots created inside a player script are set to OWNER_PLAYER by default, OWNER_ENEMY otherwise.\n\nSwitching a shot from OWNER_ENEMY to OWNER_PLAYER or vice-versa will change which shot data that shot is using. For example, an OWNER_ENEMY shot whose graphic is set to ID 1 will use ID 1 inside of the enemy shot data script. If this shot is switched to OWNER_PLAYER, it will immediatley swith to using ID 1 in the player's shot script instead. THe same happens both ways."
    },
    {
        "name": "ObjShot_GetIntersectionEnable",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "true if intersection is enabled; false otheriwse",
            "type": "bool"
        },
        "description": "Returns whether ObjShot_SetIntersectionEnable was set on the shot object.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjShot_SetIntersectionScaleX",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xscale",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the shot object's X hitbox scale.",
        "notes": "ph3sx function.\n\nFor normal shots, the true scale is the half-point between the X and Y scales."
    },
    {
        "name": "ObjShot_SetIntersectionScaleY",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "yscale",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the shot object's Y hitbox scale.",
        "notes": "ph3sx function.\n\nFor normal shots, the true scale is the half-point between the X and Y scales."
    },
    {
        "name": "ObjShot_SetIntersectionScaleXY",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xscale",
                "type": "number"
            },
            {
                "name": "yscale",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the shot object's X and Y hitbox scale.",
        "notes": "ph3sx function.\n\nFor normal shots, the true scale is the half-point between the X and Y scales."
    },
    {
        "name": "ObjShot_SetPositionRounding",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "If set to true, will cause the shot object to only render in non-floating point coordinates.",
        "notes": "ph3sx function.\n\nThis behavior is seen in the official Touhou games."
    },
    {
        "name": "ObjShot_SetAngleRounding",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "snapangle",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "Causes the shot render angle to be rounded to the nearest multiple of the given angle.",
        "notes": "ph3sx function.\n\nIf the angle is <= 0, angle rounding will be disabled.\n\nThis behavior is seen in the PC-98 Touhou games."
    },
    {
        "name": "ObjShot_SetDelayMotionEnable",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "If set to true, will enable the shot object to move in its delay period.",
        "notes": "ph3sx function.\n\nOnly works on regular shots.\n\nDefault is false."
    },
    {
        "name": "ObjShot_SetDelayGraphic",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "graphicID",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the graphic ID of the shot object's delay cloud.",
        "notes": "ph3sx function.\n\nA negative value will reset the delay cloud graphic to default."
    },
    {
        "name": "ObjShot_SetDelayScaleParameter",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "a",
                "type": "number"
            },
            {
                "name": "b",
                "type": "number"
            },
            {
                "name": "c",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the properties of the shot object's delay cloud's scale.",
        "notes": "ph3sx function.\n\n- DELAY_DEFAULT: scale = min(a + delay / c, b)\n- DELAY_LERP: scale = lerpFunction(a, b, delay / c)"
    },
    {
        "name": "ObjShot_SetDelayAlphaParameter",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "a",
                "type": "number"
            },
            {
                "name": "b",
                "type": "number"
            },
            {
                "name": "c",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the properties of the shot object's delay cloud's alpha.",
        "notes": "ph3sx function.\n\nAlpha value range is 0 to 1.\n\n- DELAY_DEFAULT: scale = min(a + delay / c, b)\n- DELAY_LERP: scale = lerpFunction(a, b, delay / c)"
    },
    {
        "name": "ObjShot_SetDelayMode",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "delaymode",
                "type": "const"
            },
            {
                "name": "scaleinterpmode",
                "type": "const"
            },
            {
                "name": "alphainterpmode",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the properties of the shot object's delay cloud.",
        "notes": "ph3sx function.\n\nAvailable delay modes:\n- DELAY_DEFAULT: Default Danmakufu delay.\n- DELAY_LERP: ZUN-like delay.\n\nAvailable delay interpolation modes:\n- LERP_LINEAR: Linear interpolation.\n- LERP_SMOOTH: Smooth interpolation.\n- LERP_SMOOTHER: Smoother interpolation.\n- LERP_ACCELERATE: Accelerating interpolation.\n- LERP_DECELERATE: Decelerating interpolation."
    },
    {
        "name": "ObjShot_SetDelayColor",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "hexcolor",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the color of the shot object's delay cloud as an ARGB hexadecimal color value.",
        "notes": "ph3sx function.\n\nSet to 0 to revert to using the shot data's delay color."
    },
    {
        "name": "ObjShot_SetDelayColoringEnable",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "When set to true, enables the object color to affect the shot object's delay cloud.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjShot_SetGrazeInvalidFrame",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "cooldownframe",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the shot object's graze cooldown frame. After being grazed, the shot will be put on graze cooldown, wherein it cannot be grazed for the duration.",
        "notes": "ph3sx function.\n\nFor lasers, the default value is 20.\nFor normal shots, the default value is 2147483647."
    },
    {
        "name": "ObjShot_SetGrazeFrame",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "frame",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the shot object's graze frame.",
        "notes": "ph3sx function.\n\nInternally, this value is reset to the graze invalid frame every time a graze is performed.\nThis value decreases by 1 every frame, and the shot object is eligible for a graze if it is equal to or less than 0."
    },
    {
        "name": "ObjShot_IsValidGraze",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "true if the shot object can currently be grazed; false otheriwse",
            "type": "bool"
        },
        "description": "Returns whether the shot object is currently able to be grazed.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjShot_SetPenetrateShotEnable",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {
            "name": "true if the shot object can currently be grazed; false otheriwse",
            "type": "bool"
        },
        "description": "If set to false, the shot will not lose penetration upon collision with another enemy shot.",
        "notes": "ph3sx function.\n\nIntended to be used with players shots, in tandem with ObjShot_SetEraseShot.\n\nDefault is true."
    },
    {
        "name": "ObjShot_SetEnemyIntersectionInvalidFrame",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "cooldownframes",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the enemy intersection cooldown duration in frames for the shot object.",
        "notes": "ph3sx function.\n\nIntersection with an enemy will add the enemy to the shot's cooldown list.\nThe shot will not be able to intersect enemy objects still on hit cooldown.\n\nCooldown is maintained by the shot, not the enemy.\nShot A intersecting and putting an enemy on cooldown will not stop Shot B from registering intersection with the same enemy."
    },
    {
        "name": "ObjShot_SetFixedAngle",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "isfixedangle",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "If set to true, the shot will not visually rotate along its movement angle.",
        "notes": "ph3sx function.\n\nThe default value is specified in the graphic's shot data as \"fixed_angle\", this function allows you to override that value."
    },
    {
        "name": "ObjShot_SetSpinAngularVelocity",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "wvelspin",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the Z angle spin speed of the shot graphic.",
        "notes": "ph3sx function.\n\nThe default spin speed is specified in the graphic's shot data as \"angular_velocity\", this function allows you to override that value."
    },
    {
        "name": "ObjShot_SetDelayAngularVelocity",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "delaywvel",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the Z angle spin speed of the shot's delay cloud.",
        "notes": "ph3sx function.\n\nThe default delay spin speed is 0."
    },

    {
        "name": "ObjLaser_SetInvalidLength",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "ratiobase",
                "type": "number"
            },
            {
                "name": "ratiotip",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the portion of the laser object associated with objID where there is no collision, in relation to the base and the tip of the laser.",
        "notes": "ph3sx changed function.\n\nBoth invalid lengths now scale from 0 to 1 rather than 0 to 100.\n\nBy default, the values are 10 (10%)."
    },
    {
        "name": "ObjStLaser_SetEnd",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "set",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether a delay cloud will appear at the end of the straight laser object.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjStLaser_SetEndGraphic",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "graphicID",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the shot graphic ID of the straight laser object \"end\" delay cloud.",
        "notes": "ph3sx function.\n\nEssentially ObjShot_SetDelayGraphic for the ends of straight lasers."
    },
    {
        "name": "ObjStLaser_SetDelayScale",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "sourcescalemult",
                "type": "number"
            },
            {
                "name": "endscalemult",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the scale multipliers of the straight laser object's delay clouds.",
        "notes": "ph3sx function.\n\nThe default values are (1, 1)."
    },
    {
        "name": "ObjStLaser_SetPermitExpand",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether the straight laser will expand after the delay period.",
        "notes": "ph3sx function.\n\nIntended for use in delay lines."
    },
    {
        "name": "ObjStLaser_GetPermitExpand",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "true if the laser is allowed to expand after its delay period; false otheriwse",
            "type": "bool"
        },
        "description": "Returns whether the straight laser is permitted to expand after the delay period.",
        "notes": "ph3sx function."
    },
    
    {
        "name": "ObjCrLaser_SetTipCapping",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether the curvy laser will attempt to keep its graphic's tips proportional to the upper and lower halves of its sprite.",
        "notes": "ph3sx function.\n\nThe exact middle of the sprite will be stretched along the laser's body between the tips.\nCan be used to emulate PC-98-styled \"cheeto lasers\"."
    },
    {
        "name": "ObjCrLaser_GetNodePointer",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "nodeindex",
                "type": "number (int)"
            }
        ],
        "return": {
            "name": "pointer value of the specified nodeindex",
            "type": "pointer"
        },
        "description": "Returns the pointer value of the specified node index.",
        "notes": "ph3sx function.\n\nThe pointer is used in other node-related functions.\n\nAs node traversal is relatively expensive, it is not recommended to repeatedly use this function.\n\nAt each frame, the node at the laser's end is invalidated if the laser is able to move.\n\nUsing an invalid pointer may cause a memory access violation."
    },
    {
        "name": "ObjCrLaser_GetNodePointerList",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "array containing all node pointers of the given curvy laser object",
            "type": "pointer []"
        },
        "description": "Returns a list of node pointers of the curvy laser object.",
        "notes": "ph3sx function.\n\nThe pointer is used in other node-related functions.\n\nAt each frame, the node at the laser's end is invalidated if the laser is able to move.\n\nUsing an invalid pointer may cause a memory access violation."
    },
    {
        "name": "ObjCrLaser_GetNodePosition",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "nodepointer",
                "type": "pointer"
            }
        ],
        "return": {
            "name": "position of the given object's node at the speicifed nodepointer formatted as [x, y]",
            "type": "number (float) []"
        },
        "description": "Returns the [x, y] position array of the specified node.",
        "notes": "ph3sx function.\n\nThe node pointer is obtained with ObjCrLaser_GetNodePointer[List], do NOT pass in any other values."
    },
    {
        "name": "ObjCrLaser_GetNodeAngle",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "nodepointer",
                "type": "pointer"
            }
        ],
        "return": {
            "name": "angle of the given object's node at the speicifed nodepointer",
            "type": "number (float)"
        },
        "description": "Returns the facing angle of the specified node.",
        "notes": "ph3sx function.\n\nThe node pointer is obtained with ObjCrLaser_GetNodePointer[List], do NOT pass in any other values."
    },
    {
        "name": "ObjCrLaser_GetNodeWidthScale",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "nodepointer",
                "type": "pointer"
            }
        ],
        "return": {
            "name": "width of the given object's node at the speicifed nodepointer",
            "type": "number (float)"
        },
        "description": "Returns the render width scale of the specified node.",
        "notes": "ph3sx function.\n\nThe node pointer is obtained with ObjCrLaser_GetNodePointer[List], do NOT pass in any other values."
    },
    {
        "name": "ObjCrLaser_GetNodeColor",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "nodepointer",
                "type": "pointer"
            }
        ],
        "return": {
            "name": "array contianing the color of the given object's node at the speicifed nodepointer formatted as [a, r, g, b]",
            "type": "number (int) []"
        },
        "description": "Returns the [a, r, g, b] color array of the specified node.",
        "notes": "ph3sx function.\n\nThe node pointer is obtained with ObjCrLaser_GetNodePointer[List], do NOT pass in any other values."
    },
    {
        "name": "ObjCrLaser_GetNodeColorHex",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "nodepointer",
                "type": "pointer"
            }
        ],
        "return": {
            "name": "color of the given object's node at the speicifed nodepointer as ARGB hex",
            "type": "number (int)"
        },
        "description": "Returns the ARGB hexadecimal color value of the specified node.",
        "notes": "ph3sx function.\n\nThe node pointer is obtained with ObjCrLaser_GetNodePointer[List], do NOT pass in any other values."
    },
    {
        "name": "ObjCrLaser_SetNode",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "nodepointer",
                "type": "pointer"
            },
            {
                "name": "nodex",
                "type": "number"
            },
            {
                "name": "nodey",
                "type": "number"
            },
            {
                "name": "nodeangle",
                "type": "number (degrees)"
            },
            {
                "name": "nodecolorhex",
                "type": "number (int)"
            },
            {
                "name": "nodewidth",
                "type": "number (optional overload)"
            }
        ],
        "return": {},
        "description": "Sets the position, angle, color, and (optionally) the render width scale of the specified node.",
        "notes": "ph3sx function.\n\nnodewidth is optional.\n\nThe node pointer is obtained with ObjCrLaser_GetNodePointer[List], do NOT pass in any other values."
    },
    {
        "name": "ObjCrLaser_SetNodePosition",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "nodepointer",
                "type": "pointer"
            },
            {
                "name": "nodex",
                "type": "number"
            },
            {
                "name": "nodey",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the position of the specified node.",
        "notes": "ph3sx function.\n\nThe node pointer is obtained with ObjCrLaser_GetNodePointer[List], do NOT pass in any other values."
    },
    {
        "name": "ObjCrLaser_SetNodeAngle",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "nodepointer",
                "type": "pointer"
            },
            {
                "name": "nodeangle",
                "type": "number (degrees)"
            }
        ],
        "return": {},
        "description": "Sets the angle of the specified node.",
        "notes": "ph3sx function.\n\nThe node pointer is obtained with ObjCrLaser_GetNodePointer[List], do NOT pass in any other values."
    },
    {
        "name": "ObjCrLaser_SetNodeWidthScale",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "nodepointer",
                "type": "pointer"
            },
            {
                "name": "nodewidth",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the render width scale of the specified node.",
        "notes": "ph3sx function.\n\nThe node pointer is obtained with ObjCrLaser_GetNodePointer[List], do NOT pass in any other values."
    },
    {
        "name": "ObjCrLaser_SetNodeColor",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "nodepointer",
                "type": "pointer"
            },
            {
                "name": "nodecolorhex",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the color of the specified node as an ARGB hexadecimal color value.",
        "notes": "ph3sx function.\n\nThe node pointer is obtained with ObjCrLaser_GetNodePointer[List], do NOT pass in any other values."
    },
    {
        "name": "ObjCrLaser_AddNode",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "nodepointer",
                "type": "pointer"
            },
            {
                "name": "nodex",
                "type": "number"
            },
            {
                "name": "nodey",
                "type": "number"
            },
            {
                "name": "nodeangle",
                "type": "number (degrees)"
            },
            {
                "name": "nodecolorhex",
                "type": "number (int)"
            },
            {
                "name": "nodewidth",
                "type": "number (optional overload)"
            }
        ],
        "return": {},
        "description": "Adds a laser node at the end of the curvy laser with the specified position, angle, color, and (optionally) render width scale.",
        "notes": "ph3sx function.\n\nnodewidth is optional.\n\nThe node pointer is obtained with ObjCrLaser_GetNodePointer[List], do NOT pass in any other values."
    },
    
    {
        "name": "ObjPatternShot_Create",
        "arguments": [],
        "return": {
            "name": "object ID of the created shot pattern object",
            "type": "number (Object ID)"
        },
        "description": "Creates a pattern shot object and returns its object ID.",
        "notes": "ph3sx function.\n\nCan be used for firing a large amount of bullets with only a few function calls, like in ZUN's ECL scripts."
    },
    {
        "name": "ObjPatternShot_Fire",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Fires the shot pattern defined by the given shot pattern object.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPatternShot_FireReturn",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "array containing the shot IDs of all shots fired by the given shot pattern object",
            "type": "number (int) []"
        },
        "description": "Fires the shot pattern defined by the given shot pattern object and returns the IDs of the created shots in an array.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPatternShot_SetParentObject",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "parentobjID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Sets the parent object of the given shot pattern object.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPatternShot_SetPatternType",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "type",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the firing pattern of the given shot pattern object.",
        "notes": "ph3sx function.\n\nAvailable pattern types:\n- PATTERN_FAN\n- PATTERN_FAN_AIMED\n- PATTERN_RING\n- PATTERN_RING_AIMED\n- PATTERN_ARROW\n- PATTERN_ARROW_AIMED\n- PATTERN_POLYGON\n--- [way]: Number of polygon vertices.\n--- [stack]: Number of shots per sides.\n--- [angle argument]: Edge skip, should normally be 1. Other values will result in polygrams.\n--- [speed argument]: No effect.\n- PATTERN_POLYGON_AIMED\n- PATTERN_ELLIPSE\n--- [stack]: No effect.\n--- [angle argument]: Angle of the ellipse. (Not of the shots)\n--- [base speed]: Max speed at the ends of the primary axis.\n--- [speed argument]: Max speed at the ends of the secondary axis.\n- PATTERN_ELLIPSE_AIMED\n- PATTERN_SCATTER_ANGLE\n- PATTERN_SCATTER_SPEED\n- PATTERN_SCATTER\n- PATTERN_LINE\n- PATTERN_ROSE\n--- [way]: Number of \"petals\".\n--- [stack]: Number of shots per petals."
    },
    {
        "name": "ObjPatternShot_SetShotType",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "type",
                "type": "const"
            }
        ],
        "return": {},
        "description": "Sets the shot type of the given shot pattern object.",
        "notes": "ph3sx function.\n\nSupported types:\n- OBJ_SHOT\n- OBJ_LOOSE_LASER\n- OBJ_CURVE_LASER"
    },
    {
        "name": "ObjPatternShot_SetShotCount",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "way",
                "type": "number (int)"
            },
            {
                "name": "stack",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the shot way and shot stack of the given shot pattern object.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPatternShot_SetSpeed",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "speedbase",
                "type": "number"
            },
            {
                "name": "speedarg",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the shot speed and argument of the given shot pattern object.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPatternShot_SetAngle",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "anglebase",
                "type": "number"
            },
            {
                "name": "anglearg",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the shot angle and argument of the given shot pattern object.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPatternShot_SetBasePoint",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "x",
                "type": "number"
            },
            {
                "name": "y",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the base firing position of the given shot pattern object.",
        "notes": "ph3sx function.\n\nDefaults to the parent object's position if not used.\n\nUse PATTERN_BASEPOINT_RESET in either arguments to reset it to the parent object's position."
    },
    {
        "name": "ObjPatternShot_SetBasePointOffset",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "xoffset",
                "type": "number"
            },
            {
                "name": "yoffset",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the firing position offset of the given shot pattern object from its base point.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPatternShot_SetBasePointOffsetCircle",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            },
            {
                "name": "radius",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the firing position offset in a circular manner of the given shot pattern object from its base point.",
        "notes": "ph3sx function.\n\nEquivalent to ObjPatternShot_SetBasePointOffset(obj, radius * cos(angle), radius * sin(angle));"
    },
    {
        "name": "ObjPatternShot_SetShootRadius",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "radius",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Causes the shots to be fired a certain radius away from their base points.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPatternShot_SetDelay",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "delay",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the shot delay of the given shot pattern object.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPatternShot_SetGraphic",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "graphicID",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the shot graphic ID of the given shot pattern object.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPatternShot_SetLaserParameter",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "width",
                "type": "number"
            },
            {
                "name": "length",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the length and width of the given shot pattern object.",
        "notes": "ph3sx function.\n\nHas no effect if the pattern is firing normal shots."
    },
    {
        "name": "ObjPatternShot_CopySettings",
        "arguments": [
            {
                "name": "destobjID",
                "type": "number (Object ID)"
            },
            {
                "name": "sourceobjID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Copies the settings of a shot pattern object to another.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjPatternShot_AddTransform",
        "arguments": [
            {
                "name": "destobjID",
                "type": "number (Object ID)"
            },
            {
                "name": "transformtype",
                "type": "const"
            },
            {
                "name": "transformargs",
                "type": "varies"
            }
        ],
        "return": {},
        "description": "Adds a transformation to the shot pattern object.",
        "notes": "ph3sx function.\n\nTransforms arguments will be designated, in order: [arg0], [arg1], [arg2], etc...\n\nAvailable transformations are:\n\n- TRANSFORM_WAIT (argc = 1)\n--- Delays the next transformation for [arg0] frames.\n\n- TRANSFORM_ADD_SPEED_ANGLE (argc = 4)\n--- Waits for [arg1] frames. (Does not delay the next transformation)\n--- For [arg0] frames, sets acceleration to [arg2].\n--- For [arg0] frames, sets angular velocity to [arg3].\n\n- TRANSFORM_ANGULAR_MOVE (argc = 3)\n--- For [arg0] frames, sets angular velocity to [arg1].\n--- Sets shot graphic \"spin\" to [arg2].\n\n- TRANSFORM_N_DECEL_CHANGE (argc = 5)\n--- For [arg1] times, decelerates/accelerates the shot to a complete halt in [arg0] frames. (See: Aunn's first spell)\n--- Movement will then change depending on [arg2].\n----- 0: Changes the movement angle to [arg4].\n----- 1: Increments the movement angle by [arg4].\n----- 2: Aims to the player with an added randomness factor of -[arg4] to [arg4].\n----- 3: Aims to the player with an increment of [arg4].\n----- 4: Angle becomes random.\n----- 5, other: No angle change.\n--- All modes sets the speed to [arg3].\n--- Delay the next transformation by ([arg0] * [arg1]) frames.\n\n- TRANSFORM_GRAPHIC_CHANGE (argc = 1)\n--- Changes the shot graphic to [arg0].\n\n- TRANSFORM_BLEND_CHANGE (argc = 1)\n--- Changes the shot blend type to [arg0].\n\n- TRANSFORM_TO_SPEED_ANGLE (argc = 3)\n--- Gradually changes the shot's speed to [arg1] in [arg0] frames.\n--- Gradually changes the shot's angle to [arg2] in [arg0] frames.\n----- Using TOPLAYER_CHANGE will aim the shot to the player object.\n--- NO_CHANGE can be used for [arg1] and [arg2].\n\n- TRANSFORM_ADDPATTERN_A1 (argc = 3)\n--- Applies [ObjMove_AddPatternA1(obj, [arg0], [arg1], [arg2])]\n\n- TRANSFORM_ADDPATTERN_A2 (argc = 8)\n--- Applies [ObjMove_AddPatternA4(obj, [arg0], [arg1], [arg2], [arg3], [arg4], [arg5], [arg6], [arg7])]\n\n- TRANSFORM_ADDPATTERN_B1 (argc = 3)\n--- Applies [ObjMove_AddPatternB1(obj, [arg0], [arg1], [arg2])]\n\n- TRANSFORM_ADDPATTERN_B2 (argc = 8)\n--- Applies [ObjMove_AddPatternB3(obj, [arg0], [arg1], [arg2], [arg3], [arg4], [arg5], [arg6], [arg7])]\n\n- TRANSFORM_ADDPATTERN_C1 (argc = 3)\n--- Applies [ObjMove_AddPatternC1(obj, [arg0], [arg1], [arg2])]\n\n- TRANSFORM_ADDPATTERN_C2 (argc = 10)\n--- Applies [ObjMove_AddPatternC3(obj, [arg0], [arg1], [arg2], [arg3], [arg4], [arg5], [arg6], [arg7], [arg8], [arg9])]"
    },
    {
        "name": "ObjPatternShot_SetTransform",
        "arguments": [
            {
                "name": "destobjID",
                "type": "number (Object ID)"
            },
            {
                "name": "transformindex",
                "type": "number (int)"
            },
            {
                "name": "transformtype",
                "type": "const"
            },
            {
                "name": "transformargs",
                "type": "varies"
            }
        ],
        "return": {},
        "description": "Sets transformation to the specified transform index.",
        "notes": "ph3sx function.\n\nTransforms arguments will be designated, in order: [arg0], [arg1], [arg2], etc...\n\nAvailable transformations are:\n\n- TRANSFORM_WAIT (argc = 1)\n--- Delays the next transformation for [arg0] frames.\n\n- TRANSFORM_ADD_SPEED_ANGLE (argc = 4)\n--- Waits for [arg1] frames. (Does not delay the next transformation)\n--- For [arg0] frames, sets acceleration to [arg2].\n--- For [arg0] frames, sets angular velocity to [arg3].\n\n- TRANSFORM_ANGULAR_MOVE (argc = 3)\n--- For [arg0] frames, sets angular velocity to [arg1].\n--- Sets shot graphic \"spin\" to [arg2].\n\n- TRANSFORM_N_DECEL_CHANGE (argc = 5)\n--- For [arg1] times, decelerates/accelerates the shot to a complete halt in [arg0] frames. (See: Aunn's first spell)\n--- Movement will then change depending on [arg2].\n----- 0: Changes the movement angle to [arg4].\n----- 1: Increments the movement angle by [arg4].\n----- 2: Aims to the player with an added randomness factor of -[arg4] to [arg4].\n----- 3: Aims to the player with an increment of [arg4].\n----- 4: Angle becomes random.\n----- 5, other: No angle change.\n--- All modes sets the speed to [arg3].\n--- Delay the next transformation by ([arg0] * [arg1]) frames.\n\n- TRANSFORM_GRAPHIC_CHANGE (argc = 1)\n--- Changes the shot graphic to [arg0].\n\n- TRANSFORM_BLEND_CHANGE (argc = 1)\n--- Changes the shot blend type to [arg0].\n\n- TRANSFORM_TO_SPEED_ANGLE (argc = 3)\n--- Gradually changes the shot's speed to [arg1] in [arg0] frames.\n--- Gradually changes the shot's angle to [arg2] in [arg0] frames.\n----- Using TOPLAYER_CHANGE will aim the shot to the player object.\n--- NO_CHANGE can be used for [arg1] and [arg2].\n\n- TRANSFORM_ADDPATTERN_A1 (argc = 3)\n--- Applies [ObjMove_AddPatternA1(obj, [arg0], [arg1], [arg2])]\n\n- TRANSFORM_ADDPATTERN_A2 (argc = 8)\n--- Applies [ObjMove_AddPatternA4(obj, [arg0], [arg1], [arg2], [arg3], [arg4], [arg5], [arg6], [arg7])]\n\n- TRANSFORM_ADDPATTERN_B1 (argc = 3)\n--- Applies [ObjMove_AddPatternB1(obj, [arg0], [arg1], [arg2])]\n\n- TRANSFORM_ADDPATTERN_B2 (argc = 8)\n--- Applies [ObjMove_AddPatternB3(obj, [arg0], [arg1], [arg2], [arg3], [arg4], [arg5], [arg6], [arg7])]\n\n- TRANSFORM_ADDPATTERN_C1 (argc = 3)\n--- Applies [ObjMove_AddPatternC1(obj, [arg0], [arg1], [arg2])]\n\n- TRANSFORM_ADDPATTERN_C2 (argc = 10)\n--- Applies [ObjMove_AddPatternC3(obj, [arg0], [arg1], [arg2], [arg3], [arg4], [arg5], [arg6], [arg7], [arg8], [arg9])]"
    },
    
    {
        "name": "ObjCol_GetListOfIntersectedShotID",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "shotownertype",
                "type": "const"
            }
        ],
        "return": {
            "name": "array containing the shot IDs of all shots fired by the specified shot owner type that are intersecting the given object",
            "type": "number (int) []"
        },
        "description": "Returns an array of all shot objects of the specified owner type currently intersecting with the object.",
        "notes": "ph3sx function.\n\nAvailable shot owner types are:\nOWNER_PLAYER\nOWNER_ENEMY"
    },
    
    {
        "name": "ObjItem_SetAutoCollectEnableFlags",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "flags",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Sets the autocollection enable flags of the item object. Autocollection enable flags dictate which autocollection types will affect the item object.",
        "notes": "ph3sx function.\n\nAvailable flags:\n- ITEM_AUTOCOLLECT_PLAYER_SCOPE\n- ITEM_AUTOCOLLECT_COLLECT_ALL\n- ITEM_AUTOCOLLECT_POC_LINE\n- ITEM_AUTOCOLLECT_COLLECT_CIRCLE\n- ITEM_AUTOCOLLECT_ALL\n\nFlags can be combined with bitwise OR.\nUsing 0 will cause the item object to be impervious to all autocollection types."
    },
    {
        "name": "ObjItem_GetInfo",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "infotype",
                "type": "const"
            }
        ],
        "return": {
            "name": "results of query",
            "type": "varies"
        },
        "description": "Returns data on the item object associated with objID based on the query.",
        "notes": "ph3sx changed function.\n\nAvailable infotypes:\n- INFO_ITEM_SCORE: Returns the score value of the item object\n- INFO_ITEM_MOVE_TYPE: Returns the move type of the item object; Returned values are the possible inputs of ObjItem_SetDefinedMovePatternA1.\n- INFO_ITEM_TYPE: Returns the graphic ID of the item object."
    },
    {
        "name": "ObjItem_SetMoveToPlayer",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "movetoplayer",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Causes the item object to start or stop moving to the player.",
        "notes": "ph3sx function.\n\nIf set to true, EV_COLLECT_ITEM will be notified.\nIf set to false, EV_CANCEL_ITEM will be notified."
    },
    {
        "name": "ObjItem_IsMoveToPlayer",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "true if the item object is set to move to the player; false otherwise",
            "type": "bool"
        },
        "description": "Returns whether the item object is moving to the player.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjItem_Collect",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {},
        "description": "Causes the item object to be instantly collected.",
        "notes": "ph3sx function.\n\nNot affected by ObjItem_SetIntersectionEnable."
    },
    {
        "name": "ObjItem_SetAutoDelete",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "autodelete",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether the item will be subject to the auto-deletion clip.",
        "notes": "ph3sx function.\n\nThe auto-deletion clip size can be altered using SetItemAutoDeleteClip."
    },
    {
        "name": "ObjItem_SetIntersectionRadius",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "radius",
                "type": "number"
            }
        ],
        "return": {},
        "description": "Sets the item object's player intersection radius.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjItem_SetIntersectionEnable",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether the item object is allowed to directly intersect with the player.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjItem_GetIntersectionEnable",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            }
        ],
        "return": {
            "name": "true if intersection is enabled on the given item object; false otherwise",
            "type": "bool"
        },
        "description": "Returns whether the item object has intersection enabled.",
        "notes": "ph3sx function."
    },
    {
        "name": "ObjItem_SetDefaultCollectMovement",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "Sets whether the item object will use the built-in autocollection behaviour.",
        "notes": "ph3sx function.\n\nIntended to be used in tandem with EV_COLLECT_ITEM."
    },
    {
        "name": "ObjItem_SetPositionRounding",
        "arguments": [
            {
                "name": "objID",
                "type": "number (Object ID)"
            },
            {
                "name": "enable",
                "type": "bool"
            }
        ],
        "return": {},
        "description": "If set to true, will cause the item object to only render in non-floating point coordinates.",
        "notes": "ph3sx function."
    },

    {
        "name": "KillPlayer",
        "arguments": [],
        "return": {},
        "description": "Kills the player.",
        "notes": "ph3sx function."
    },

    {
        "name": "CreatePlayerShotA1",
        "arguments": [
            {
                "name": "xcoord",
                "type": "number"
            },
            {
                "name": "ycoord",
                "type": "number"
            },
            {
                "name": "speed",
                "type": "number"
            },
            {
                "name": "angle",
                "type": "number (degrees)"
            },
            {
                "name": "damage",
                "type": "number"
            },
            {
                "name": "penetration",
                "type": "number (int)"
            },
            {
                "name": "graphic",
                "type": "number (int)"
            }
        ],
        "return": {},
        "description": "Fires a player shot with the specified position, speed, angle, damage, penetration, and graphic ID from the player shotsheet.",
        "notes": "ph3sx changed function.\n\nNo longer returns a null value if SetForbidPlayerShot was set to true."
    }
]
